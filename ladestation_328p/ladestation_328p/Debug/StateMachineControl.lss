
StateMachineControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000368  00800100  0000266c  00002700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000266c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  00800468  00800468  00002a68  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5b  00000000  00000000  000064a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000071fb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  0000722a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002eab  00000000  00000000  0000744a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d07  00000000  00000000  0000a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015c4  00000000  00000000  0000affc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  0000c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008b9  00000000  00000000  0000cb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c66  00000000  00000000  0000d40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  0000f073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_1>
       8:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.2006>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.2004>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec e6       	ldi	r30, 0x6C	; 108
     17e:	f6 e2       	ldi	r31, 0x26	; 38
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 36       	cpi	r26, 0x68	; 104
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	25 e0       	ldi	r18, 0x05	; 5
     18e:	a8 e6       	ldi	r26, 0x68	; 104
     190:	b4 e0       	ldi	r27, 0x04	; 4
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 37       	cpi	r26, 0x72	; 114
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 37 09 	call	0x126e	; 0x126e <main>
     1a0:	0c 94 34 13 	jmp	0x2668	; 0x2668 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:
 *  Author: T
 */ 
#include "Macroes.h"
void ADC_init()
{
	DDRC &= ~(1<<DDC5);
     1a8:	3d 98       	cbi	0x07, 5	; 7
	ADMUX |= (1<<MUX0)|(1<<MUX2); // External ref and adc5 selected (1<<REFS0)||(1<<MUX1)|(1<<MUX3)
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC5D); // Disable digital input buffer
     1b4:	ee e7       	ldi	r30, 0x7E	; 126
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	80 62       	ori	r24, 0x20	; 32
     1bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADIF)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //enable adc
     1be:	ea e7       	ldi	r30, 0x7A	; 122
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	87 69       	ori	r24, 0x97	; 151
     1c6:	80 83       	st	Z, r24
     1c8:	08 95       	ret

000001ca <ADC_Sample>:
}

uint16_t ADC_Sample()
{
	ADCSRA|=(1<<ADSC);
     1ca:	ea e7       	ldi	r30, 0x7A	; 122
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_Sample+0xa>
	return ADC;
     1da:	20 91 78 00 	lds	r18, 0x0078
     1de:	30 91 79 00 	lds	r19, 0x0079
     1e2:	82 2f       	mov	r24, r18
     1e4:	93 2f       	mov	r25, r19
     1e6:	08 95       	ret

000001e8 <GetUID>:
volatile unsigned int usedOere=0, usedKr=0;
char receiveBuffer[64] = "";
volatile unsigned int timeChargedInSeconds = 0;

void GetUID()
{
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
	PORTB &= ~(1<<PORTB2); // SS low to start transfer
     1f4:	2a 98       	cbi	0x05, 2	; 5
	SPI_MasterTransmit('U'); //0x55 Command get UID
     1f6:	85 e5       	ldi	r24, 0x55	; 85
     1f8:	0e 94 16 08 	call	0x102c	; 0x102c <SPI_MasterTransmit>
	PORTB |= (1<<PORTB2); // SS high to end transfer
     1fc:	2a 9a       	sbi	0x05, 2	; 5
	startComTimeout = true;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 66 05 	sts	0x0566, r24
	cardPresent = false;
     204:	10 92 6c 05 	sts	0x056C, r1
	while(1)//while((!dataReady) || (!comTimeout)); Virker ikke på denne måde?
	{
		if((dataReady) || (comTimeout)) break;
     208:	80 91 6b 05 	lds	r24, 0x056B
     20c:	81 11       	cpse	r24, r1
     20e:	04 c0       	rjmp	.+8      	; 0x218 <GetUID+0x30>
     210:	80 91 68 05 	lds	r24, 0x0568
     214:	88 23       	and	r24, r24
     216:	c1 f3       	breq	.-16     	; 0x208 <GetUID+0x20>
	}
	startComTimeout = false;
     218:	10 92 66 05 	sts	0x0566, r1
	comTimeout = false;
     21c:	10 92 68 05 	sts	0x0568, r1
	if (dataReady)
     220:	80 91 6b 05 	lds	r24, 0x056B
     224:	88 23       	and	r24, r24
     226:	09 f4       	brne	.+2      	; 0x22a <GetUID+0x42>
     228:	67 c0       	rjmp	.+206    	; 0x2f8 <GetUID+0x110>
	{
		//UART_Transmit_String("Data Ready \n");
		PORTB &= ~(1<<PORTB2); // SS low to start transfer
     22a:	2a 98       	cbi	0x05, 2	; 5
		SPI_MasterTransmit(0xF5); // Send dummy data
     22c:	85 ef       	ldi	r24, 0xF5	; 245
     22e:	0e 94 16 08 	call	0x102c	; 0x102c <SPI_MasterTransmit>
		PORTB |= (1<<PORTB2); // SS high to end transfer
     232:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     234:	8f e8       	ldi	r24, 0x8F	; 143
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <GetUID+0x50>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <GetUID+0x56>
     23e:	00 00       	nop
		_delay_us(100);
		if (SPDR == ACK)
     240:	8e b5       	in	r24, 0x2e	; 46
     242:	86 38       	cpi	r24, 0x86	; 134
     244:	09 f0       	breq	.+2      	; 0x248 <GetUID+0x60>
     246:	4f c0       	rjmp	.+158    	; 0x2e6 <GetUID+0xfe>
		{
			sprintf(displayBuffer, "UID = ");
     248:	87 e0       	ldi	r24, 0x07	; 7
     24a:	eb e0       	ldi	r30, 0x0B	; 11
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	af e0       	ldi	r26, 0x0F	; 15
     250:	b5 e0       	ldi	r27, 0x05	; 5
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <GetUID+0x6a>
     25a:	07 e0       	ldi	r16, 0x07	; 7
     25c:	10 e0       	ldi	r17, 0x00	; 0
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
				SPI_MasterTransmit(0xF5); // Send dummy data
				PORTB |= (1<<PORTB2); // SS high to end transfer
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     25e:	0f 2e       	mov	r0, r31
     260:	f2 e1       	ldi	r31, 0x12	; 18
     262:	ef 2e       	mov	r14, r31
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
     26a:	cf ec       	ldi	r28, 0xCF	; 207
     26c:	d4 e0       	ldi	r29, 0x04	; 4
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
     26e:	2a 98       	cbi	0x05, 2	; 5
				SPI_MasterTransmit(0xF5); // Send dummy data
     270:	85 ef       	ldi	r24, 0xF5	; 245
     272:	0e 94 16 08 	call	0x102c	; 0x102c <SPI_MasterTransmit>
				PORTB |= (1<<PORTB2); // SS high to end transfer
     276:	2a 9a       	sbi	0x05, 2	; 5
     278:	8f e8       	ldi	r24, 0x8F	; 143
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <GetUID+0x94>
     280:	00 c0       	rjmp	.+0      	; 0x282 <GetUID+0x9a>
     282:	00 00       	nop
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     284:	8e b5       	in	r24, 0x2e	; 46
     286:	1f 92       	push	r1
     288:	8f 93       	push	r24
     28a:	ff 92       	push	r15
     28c:	ef 92       	push	r14
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
				strcat(displayBuffer,comBuffer);
     296:	be 01       	movw	r22, r28
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	95 e0       	ldi	r25, 0x05	; 5
     29c:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
     2a0:	01 50       	subi	r16, 0x01	; 1
     2a2:	11 09       	sbc	r17, r1
		PORTB |= (1<<PORTB2); // SS high to end transfer
		_delay_us(100);
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	f1 f6       	brne	.-68     	; 0x26e <GetUID+0x86>
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
				strcat(displayBuffer,comBuffer);
				//Disp_char('0'+i);
			}
			strcat(displayBuffer,"\n");
     2b2:	ef e0       	ldi	r30, 0x0F	; 15
     2b4:	f5 e0       	ldi	r31, 0x05	; 5
     2b6:	01 90       	ld	r0, Z+
     2b8:	00 20       	and	r0, r0
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <GetUID+0xce>
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	91 83       	std	Z+1, r25	; 0x01
     2c4:	80 83       	st	Z, r24
			//UART_Transmit_String(displayBuffer);
			strncpy(uID, displayBuffer+6, 8);
     2c6:	48 e0       	ldi	r20, 0x08	; 8
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	65 e1       	ldi	r22, 0x15	; 21
     2cc:	75 e0       	ldi	r23, 0x05	; 5
     2ce:	8f e4       	ldi	r24, 0x4F	; 79
     2d0:	95 e0       	ldi	r25, 0x05	; 5
     2d2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strncpy>
			UART_Transmit_String(uID);
     2d6:	8f e4       	ldi	r24, 0x4F	; 79
     2d8:	95 e0       	ldi	r25, 0x05	; 5
     2da:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
			gotUID = true;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	80 93 69 05 	sts	0x0569, r24
     2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <GetUID+0x10a>
		}
		else
		{
			UART_Transmit_String("Command failed \n");
     2e6:	85 e1       	ldi	r24, 0x15	; 21
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
			gotUID = false;
     2ee:	10 92 69 05 	sts	0x0569, r1
		}
		dataReady = false;
     2f2:	10 92 6b 05 	sts	0x056B, r1
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <GetUID+0x120>
	}
	else
	{
		UART_Transmit_String("RFID reader timeout \n");
     2f8:	86 e2       	ldi	r24, 0x26	; 38
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		dataReady = false;
     300:	10 92 6b 05 	sts	0x056B, r1
		gotUID = false;
     304:	10 92 69 05 	sts	0x0569, r1
	}
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <SendCommand>:

void SendCommand(char command)
{
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	d8 2e       	mov	r13, r24
	char commandString[1];
	sprintf(commandString, "%c", command);
     32c:	1f 92       	push	r1
     32e:	8f 93       	push	r24
     330:	2c e3       	ldi	r18, 0x3C	; 60
     332:	31 e0       	ldi	r19, 0x01	; 1
     334:	3f 93       	push	r19
     336:	2f 93       	push	r18
     338:	ee 24       	eor	r14, r14
     33a:	e3 94       	inc	r14
     33c:	f1 2c       	mov	r15, r1
     33e:	ec 0e       	add	r14, r28
     340:	fd 1e       	adc	r15, r29
     342:	ff 92       	push	r15
     344:	ef 92       	push	r14
     346:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
	sprintf(comBuffer, START_CHAR);
     34a:	2f e3       	ldi	r18, 0x3F	; 63
     34c:	31 e0       	ldi	r19, 0x01	; 1
     34e:	3f 93       	push	r19
     350:	2f 93       	push	r18
     352:	0f ec       	ldi	r16, 0xCF	; 207
     354:	14 e0       	ldi	r17, 0x04	; 4
     356:	1f 93       	push	r17
     358:	0f 93       	push	r16
     35a:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
	strcat(comBuffer, CLIENT_ID);
     35e:	f8 01       	movw	r30, r16
     360:	01 90       	ld	r0, Z+
     362:	00 20       	and	r0, r0
     364:	e9 f7       	brne	.-6      	; 0x360 <SendCommand+0x4a>
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	40 e3       	ldi	r20, 0x30	; 48
     36a:	50 e3       	ldi	r21, 0x30	; 48
     36c:	61 e3       	ldi	r22, 0x31	; 49
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	40 83       	st	Z, r20
     372:	51 83       	std	Z+1, r21	; 0x01
     374:	62 83       	std	Z+2, r22	; 0x02
     376:	73 83       	std	Z+3, r23	; 0x03
	strcat(comBuffer, commandString);
     378:	b7 01       	movw	r22, r14
     37a:	c8 01       	movw	r24, r16
     37c:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
	switch(command)
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	95 e4       	ldi	r25, 0x45	; 69
     38c:	d9 16       	cp	r13, r25
     38e:	09 f4       	brne	.+2      	; 0x392 <SendCommand+0x7c>
     390:	3f c0       	rjmp	.+126    	; 0x410 <SendCommand+0xfa>
     392:	9d 15       	cp	r25, r13
     394:	20 f0       	brcs	.+8      	; 0x39e <SendCommand+0x88>
     396:	83 e4       	ldi	r24, 0x43	; 67
     398:	d8 12       	cpse	r13, r24
     39a:	3e c0       	rjmp	.+124    	; 0x418 <SendCommand+0x102>
     39c:	1a c0       	rjmp	.+52     	; 0x3d2 <SendCommand+0xbc>
     39e:	9c e4       	ldi	r25, 0x4C	; 76
     3a0:	d9 16       	cp	r13, r25
     3a2:	51 f0       	breq	.+20     	; 0x3b8 <SendCommand+0xa2>
     3a4:	86 e5       	ldi	r24, 0x56	; 86
     3a6:	d8 12       	cpse	r13, r24
     3a8:	37 c0       	rjmp	.+110    	; 0x418 <SendCommand+0x102>
	{
		case 'V': // Packet: % 001 V UID----- *
		{
			strcat(comBuffer, uID);
     3aa:	6f e4       	ldi	r22, 0x4F	; 79
     3ac:	75 e0       	ldi	r23, 0x05	; 5
     3ae:	8f ec       	ldi	r24, 0xCF	; 207
     3b0:	94 e0       	ldi	r25, 0x04	; 4
     3b2:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
		}
		break;
     3b6:	30 c0       	rjmp	.+96     	; 0x418 <SendCommand+0x102>
		case 'L': // Packet: % 001 L UID----- PSWD *
		{
			strcat(comBuffer, uID);
     3b8:	6f e4       	ldi	r22, 0x4F	; 79
     3ba:	75 e0       	ldi	r23, 0x05	; 5
     3bc:	8f ec       	ldi	r24, 0xCF	; 207
     3be:	94 e0       	ldi	r25, 0x04	; 4
     3c0:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
			strcat(comBuffer, password);
     3c4:	6a ec       	ldi	r22, 0xCA	; 202
     3c6:	74 e0       	ldi	r23, 0x04	; 4
     3c8:	8f ec       	ldi	r24, 0xCF	; 207
     3ca:	94 e0       	ldi	r25, 0x04	; 4
     3cc:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
		}
		break;
     3d0:	23 c0       	rjmp	.+70     	; 0x418 <SendCommand+0x102>
		case 'C': // Packet: % 001 C UID----- KR-- Oe Time- *
		{
			strcat(comBuffer, taID);
     3d2:	6e ea       	ldi	r22, 0xAE	; 174
     3d4:	74 e0       	ldi	r23, 0x04	; 4
     3d6:	8f ec       	ldi	r24, 0xCF	; 207
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
			strcat(comBuffer, uID);
     3de:	6f e4       	ldi	r22, 0x4F	; 79
     3e0:	75 e0       	ldi	r23, 0x05	; 5
     3e2:	8f ec       	ldi	r24, 0xCF	; 207
     3e4:	94 e0       	ldi	r25, 0x04	; 4
     3e6:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
			strcat(comBuffer, amountKr);
     3ea:	60 ec       	ldi	r22, 0xC0	; 192
     3ec:	74 e0       	ldi	r23, 0x04	; 4
     3ee:	8f ec       	ldi	r24, 0xCF	; 207
     3f0:	94 e0       	ldi	r25, 0x04	; 4
     3f2:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
			strcat(comBuffer, amountOere);
     3f6:	6d eb       	ldi	r22, 0xBD	; 189
     3f8:	74 e0       	ldi	r23, 0x04	; 4
     3fa:	8f ec       	ldi	r24, 0xCF	; 207
     3fc:	94 e0       	ldi	r25, 0x04	; 4
     3fe:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
			strcat(comBuffer, timeStamp);
     402:	67 eb       	ldi	r22, 0xB7	; 183
     404:	74 e0       	ldi	r23, 0x04	; 4
     406:	8f ec       	ldi	r24, 0xCF	; 207
     408:	94 e0       	ldi	r25, 0x04	; 4
     40a:	0e 94 55 12 	call	0x24aa	; 0x24aa <strcat>
		}
		break;
     40e:	04 c0       	rjmp	.+8      	; 0x418 <SendCommand+0x102>
		case 'E': // Packet: % 001 L UID----- PSWD *
		{
			UART_Transmit_String("Error Command State");
     410:	82 e4       	ldi	r24, 0x42	; 66
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		}
		break;
		default : command='E'; break;
	}
	strcat(comBuffer, STOP_CHAR);
     418:	ef ec       	ldi	r30, 0xCF	; 207
     41a:	f4 e0       	ldi	r31, 0x04	; 4
     41c:	01 90       	ld	r0, Z+
     41e:	00 20       	and	r0, r0
     420:	e9 f7       	brne	.-6      	; 0x41c <SendCommand+0x106>
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	8a e2       	ldi	r24, 0x2A	; 42
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	91 83       	std	Z+1, r25	; 0x01
     42a:	80 83       	st	Z, r24
	//UART_Transmit_String("Packet send\n");
	UART_Transmit_String(comBuffer);
     42c:	8f ec       	ldi	r24, 0xCF	; 207
     42e:	94 e0       	ldi	r25, 0x04	; 4
     430:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
}
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	08 95       	ret

00000446 <CardKnown>:

bool CardKnown()
{
	SendCommand(VALIDATE_CARD_COMMAND);
     446:	86 e5       	ldi	r24, 0x56	; 86
     448:	0e 94 8b 01 	call	0x316	; 0x316 <SendCommand>
	packetReceived = false;
     44c:	10 92 64 05 	sts	0x0564, r1
	startComTimeout = true;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 66 05 	sts	0x0566, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     456:	80 91 64 05 	lds	r24, 0x0564
     45a:	81 11       	cpse	r24, r1
     45c:	04 c0       	rjmp	.+8      	; 0x466 <CardKnown+0x20>
     45e:	80 91 68 05 	lds	r24, 0x0568
     462:	88 23       	and	r24, r24
     464:	c1 f3       	breq	.-16     	; 0x456 <CardKnown+0x10>
	}
	startComTimeout = false;
     466:	10 92 66 05 	sts	0x0566, r1
	comTimeout = false;
     46a:	10 92 68 05 	sts	0x0568, r1
	if (packetReceived)
     46e:	80 91 64 05 	lds	r24, 0x0564
     472:	88 23       	and	r24, r24
     474:	41 f1       	breq	.+80     	; 0x4c6 <CardKnown+0x80>
	{
		//UART_Transmit_String("receiveBuffer content\n");
		//UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
		memcpy(passResult,receiveBuffer+5, 4);
     476:	80 91 6f 04 	lds	r24, 0x046F
     47a:	90 91 70 04 	lds	r25, 0x0470
     47e:	a0 91 71 04 	lds	r26, 0x0471
     482:	b0 91 72 04 	lds	r27, 0x0472
     486:	80 93 c5 04 	sts	0x04C5, r24
     48a:	90 93 c6 04 	sts	0x04C6, r25
     48e:	a0 93 c7 04 	sts	0x04C7, r26
     492:	b0 93 c8 04 	sts	0x04C8, r27
		passResult[4] = '\0';   /* null character manually added */
     496:	10 92 c9 04 	sts	0x04C9, r1
		//UART_Transmit_String("validate card passResult content\n");
		//UART_Transmit_String(passResult);
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     49a:	80 e4       	ldi	r24, 0x40	; 64
     49c:	ea e6       	ldi	r30, 0x6A	; 106
     49e:	f4 e0       	ldi	r31, 0x04	; 4
     4a0:	df 01       	movw	r26, r30
     4a2:	1d 92       	st	X+, r1
     4a4:	8a 95       	dec	r24
     4a6:	e9 f7       	brne	.-6      	; 0x4a2 <CardKnown+0x5c>
		if (strncmp (passResult,"true",4) == 0)
     4a8:	44 e0       	ldi	r20, 0x04	; 4
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	66 e5       	ldi	r22, 0x56	; 86
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	85 ec       	ldi	r24, 0xC5	; 197
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <strncmp>
     4b8:	28 2f       	mov	r18, r24
     4ba:	39 2f       	mov	r19, r25
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	23 2b       	or	r18, r19
     4c0:	39 f0       	breq	.+14     	; 0x4d0 <CardKnown+0x8a>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Cardknown communication timeout\n");
     4c6:	8b e5       	ldi	r24, 0x5B	; 91
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		return false;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     4d0:	08 95       	ret

000004d2 <ValidatePassword>:

bool ValidatePassword()
{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
	for (int i = 0; i < 4;)
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		char keyP = KBDchar(1);
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	0e 94 c4 07 	call	0xf88	; 0xf88 <KBDchar>
		if (keyP != 0 && keyP != 'C')
     4e0:	88 23       	and	r24, r24
     4e2:	79 f0       	breq	.+30     	; 0x502 <ValidatePassword+0x30>
     4e4:	83 34       	cpi	r24, 0x43	; 67
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <ValidatePassword+0x26>
		{
			password[i] = keyP;
     4e8:	fe 01       	movw	r30, r28
     4ea:	e6 53       	subi	r30, 0x36	; 54
     4ec:	fb 4f       	sbci	r31, 0xFB	; 251
     4ee:	80 83       	st	Z, r24
			Disp_char(keyP);
     4f0:	0e 94 9c 05 	call	0xb38	; 0xb38 <Disp_char>
			i++;
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <ValidatePassword+0x30>
		}
		else if (keyP == 'C')
		{
			cancelPassword = true;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 63 05 	sts	0x0563, r24
			return false;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	5a c0       	rjmp	.+180    	; 0x5b6 <ValidatePassword+0xe4>
	}
}

bool ValidatePassword()
{
	for (int i = 0; i < 4;)
     502:	c4 30       	cpi	r28, 0x04	; 4
     504:	d1 05       	cpc	r29, r1
     506:	4c f3       	brlt	.-46     	; 0x4da <ValidatePassword+0x8>
			return false;
		}
	}
	//UART_Transmit_String("Password typed\n");
	//UART_Transmit_String(password);
	memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     508:	80 e4       	ldi	r24, 0x40	; 64
     50a:	ea e6       	ldi	r30, 0x6A	; 106
     50c:	f4 e0       	ldi	r31, 0x04	; 4
     50e:	df 01       	movw	r26, r30
     510:	1d 92       	st	X+, r1
     512:	8a 95       	dec	r24
     514:	e9 f7       	brne	.-6      	; 0x510 <ValidatePassword+0x3e>
	SendCommand(LOGIN_COMMAND);
     516:	8c e4       	ldi	r24, 0x4C	; 76
     518:	0e 94 8b 01 	call	0x316	; 0x316 <SendCommand>
	packetReceived = false;
     51c:	10 92 64 05 	sts	0x0564, r1
	startComTimeout = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 66 05 	sts	0x0566, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     526:	80 91 64 05 	lds	r24, 0x0564
     52a:	81 11       	cpse	r24, r1
     52c:	04 c0       	rjmp	.+8      	; 0x536 <ValidatePassword+0x64>
     52e:	80 91 68 05 	lds	r24, 0x0568
     532:	88 23       	and	r24, r24
     534:	c1 f3       	breq	.-16     	; 0x526 <ValidatePassword+0x54>
	}
	startComTimeout = false;
     536:	10 92 66 05 	sts	0x0566, r1
	comTimeout = false;
     53a:	10 92 68 05 	sts	0x0568, r1
	if (packetReceived)
     53e:	80 91 64 05 	lds	r24, 0x0564
     542:	88 23       	and	r24, r24
     544:	99 f1       	breq	.+102    	; 0x5ac <ValidatePassword+0xda>
	{
		//UART_Transmit_String("receiveBuffer content\n");
		//UART_Transmit_String(receiveBuffer); //Packet expected: %001A00000001---UID--truexxxx*
		memcpy(passResult,receiveBuffer+21, 4);
     546:	80 91 7f 04 	lds	r24, 0x047F
     54a:	90 91 80 04 	lds	r25, 0x0480
     54e:	a0 91 81 04 	lds	r26, 0x0481
     552:	b0 91 82 04 	lds	r27, 0x0482
     556:	80 93 c5 04 	sts	0x04C5, r24
     55a:	90 93 c6 04 	sts	0x04C6, r25
     55e:	a0 93 c7 04 	sts	0x04C7, r26
     562:	b0 93 c8 04 	sts	0x04C8, r27
		passResult[4] = '\0';   /* null character manually added */
     566:	10 92 c9 04 	sts	0x04C9, r1
		memcpy(taID,receiveBuffer+5, 8);
     56a:	88 e0       	ldi	r24, 0x08	; 8
     56c:	ef e6       	ldi	r30, 0x6F	; 111
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	ae ea       	ldi	r26, 0xAE	; 174
     572:	b4 e0       	ldi	r27, 0x04	; 4
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	8a 95       	dec	r24
     57a:	e1 f7       	brne	.-8      	; 0x574 <ValidatePassword+0xa2>
		taID[9] = '\0';   /* null character manually added */
     57c:	10 92 b7 04 	sts	0x04B7, r1
		//UART_Transmit_String("TAID content\n");
		//UART_Transmit_String(taID);
		//UART_Transmit_String("passwordResult content\n");
		//UART_Transmit_String(passResult);
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     580:	80 e4       	ldi	r24, 0x40	; 64
     582:	ea e6       	ldi	r30, 0x6A	; 106
     584:	f4 e0       	ldi	r31, 0x04	; 4
     586:	df 01       	movw	r26, r30
     588:	1d 92       	st	X+, r1
     58a:	8a 95       	dec	r24
     58c:	e9 f7       	brne	.-6      	; 0x588 <ValidatePassword+0xb6>
		if (strncmp (passResult,"true",4) == 0)
     58e:	44 e0       	ldi	r20, 0x04	; 4
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	66 e5       	ldi	r22, 0x56	; 86
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	85 ec       	ldi	r24, 0xC5	; 197
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <strncmp>
     59e:	28 2f       	mov	r18, r24
     5a0:	39 2f       	mov	r19, r25
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	23 2b       	or	r18, r19
     5a6:	39 f0       	breq	.+14     	; 0x5b6 <ValidatePassword+0xe4>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <ValidatePassword+0xe4>
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Validate password communication timeout\n");
     5ac:	8c e7       	ldi	r24, 0x7C	; 124
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		return false;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <UploadFinishedCharge>:

bool UploadFinishedCharge()
{
	SendCommand(UPLOAD_CHARGE_COMMAND);
     5bc:	83 e4       	ldi	r24, 0x43	; 67
     5be:	0e 94 8b 01 	call	0x316	; 0x316 <SendCommand>
	packetReceived = false;
     5c2:	10 92 64 05 	sts	0x0564, r1
	startComTimeout = true;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	80 93 66 05 	sts	0x0566, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     5cc:	80 91 64 05 	lds	r24, 0x0564
     5d0:	81 11       	cpse	r24, r1
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <UploadFinishedCharge+0x20>
     5d4:	80 91 68 05 	lds	r24, 0x0568
     5d8:	88 23       	and	r24, r24
     5da:	c1 f3       	breq	.-16     	; 0x5cc <UploadFinishedCharge+0x10>
	}
	startComTimeout = false;
     5dc:	10 92 66 05 	sts	0x0566, r1
	comTimeout = false;
     5e0:	10 92 68 05 	sts	0x0568, r1
	if (packetReceived)
     5e4:	80 91 64 05 	lds	r24, 0x0564
     5e8:	88 23       	and	r24, r24
     5ea:	41 f1       	breq	.+80     	; 0x63c <UploadFinishedCharge+0x80>
	{
		//UART_Transmit_String("receiveBuffer content. Expected: %001Atrue*\n");
		//UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
		memcpy(passResult,receiveBuffer+5, 4);
     5ec:	80 91 6f 04 	lds	r24, 0x046F
     5f0:	90 91 70 04 	lds	r25, 0x0470
     5f4:	a0 91 71 04 	lds	r26, 0x0471
     5f8:	b0 91 72 04 	lds	r27, 0x0472
     5fc:	80 93 c5 04 	sts	0x04C5, r24
     600:	90 93 c6 04 	sts	0x04C6, r25
     604:	a0 93 c7 04 	sts	0x04C7, r26
     608:	b0 93 c8 04 	sts	0x04C8, r27
		passResult[4] = '\0';   /* null character manually added */
     60c:	10 92 c9 04 	sts	0x04C9, r1
		//UART_Transmit_String("Acknowledge passResult content\n");
		//UART_Transmit_String(passResult);
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	ea e6       	ldi	r30, 0x6A	; 106
     614:	f4 e0       	ldi	r31, 0x04	; 4
     616:	df 01       	movw	r26, r30
     618:	1d 92       	st	X+, r1
     61a:	8a 95       	dec	r24
     61c:	e9 f7       	brne	.-6      	; 0x618 <UploadFinishedCharge+0x5c>
		if (strncmp (passResult,"true",4) == 0)
     61e:	44 e0       	ldi	r20, 0x04	; 4
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	66 e5       	ldi	r22, 0x56	; 86
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	85 ec       	ldi	r24, 0xC5	; 197
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <strncmp>
     62e:	28 2f       	mov	r18, r24
     630:	39 2f       	mov	r19, r25
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	23 2b       	or	r18, r19
     636:	39 f0       	breq	.+14     	; 0x646 <UploadFinishedCharge+0x8a>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Upload Charge Communication timeout\n");
     63c:	85 ea       	ldi	r24, 0xA5	; 165
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		return false;
     644:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     646:	08 95       	ret

00000648 <TryConnection>:

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
     648:	8a ec       	ldi	r24, 0xCA	; 202
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
	noConnection = true;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 71 05 	sts	0x0571, r24
	while(noConnection)
     656:	80 91 71 05 	lds	r24, 0x0571
     65a:	88 23       	and	r24, r24
     65c:	99 f0       	breq	.+38     	; 0x684 <TryConnection+0x3c>
	{
		if (tryConnect)
     65e:	80 91 70 05 	lds	r24, 0x0570
     662:	88 23       	and	r24, r24
     664:	49 f0       	breq	.+18     	; 0x678 <TryConnection+0x30>
		{
			UART_Transmit_String("try connect interval\n");
     666:	83 ee       	ldi	r24, 0xE3	; 227
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
			if (UploadFinishedCharge()) noConnection = false;
     66e:	0e 94 de 02 	call	0x5bc	; 0x5bc <UploadFinishedCharge>
     672:	81 11       	cpse	r24, r1
     674:	10 92 71 05 	sts	0x0571, r1
		}
		tryConnect = false;
     678:	10 92 70 05 	sts	0x0570, r1

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
	noConnection = true;
	while(noConnection)
     67c:	80 91 71 05 	lds	r24, 0x0571
     680:	81 11       	cpse	r24, r1
     682:	ed cf       	rjmp	.-38     	; 0x65e <TryConnection+0x16>
     684:	08 95       	ret

00000686 <CarConnected>:
	}
}

bool CarConnected()
{
	startConnectCarTimeout = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 65 05 	sts	0x0565, r24
	UART_Transmit_String("wait for timeout\n");
     68c:	89 ef       	ldi	r24, 0xF9	; 249
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
	while(1)
	{
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
     694:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     698:	0b 97       	sbiw	r24, 0x0b	; 11
     69a:	20 f4       	brcc	.+8      	; 0x6a4 <CarConnected+0x1e>
     69c:	80 91 67 05 	lds	r24, 0x0567
     6a0:	88 23       	and	r24, r24
     6a2:	c1 f3       	breq	.-16     	; 0x694 <CarConnected+0xe>
	}
	startConnectCarTimeout = false;
     6a4:	10 92 65 05 	sts	0x0565, r1
	if (!connectCarTimeout)
     6a8:	80 91 67 05 	lds	r24, 0x0567
     6ac:	88 23       	and	r24, r24
     6ae:	41 f0       	breq	.+16     	; 0x6c0 <CarConnected+0x3a>
	{
		return true;
	}
	else
	{
		UART_Transmit_String("connect car timeout\n");
     6b0:	8b e0       	ldi	r24, 0x0B	; 11
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
		connectCarTimeout = false;
     6b8:	10 92 67 05 	sts	0x0567, r1
		return false;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
	}
	startConnectCarTimeout = false;
	if (!connectCarTimeout)
	{
		return true;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		UART_Transmit_String("connect car timeout\n");
		connectCarTimeout = false;
		return false;
	}
}
     6c2:	08 95       	ret

000006c4 <BeginCharging>:

void BeginCharging()
{
     6c4:	2f 92       	push	r2
     6c6:	3f 92       	push	r3
     6c8:	4f 92       	push	r4
     6ca:	5f 92       	push	r5
     6cc:	6f 92       	push	r6
     6ce:	7f 92       	push	r7
     6d0:	8f 92       	push	r8
     6d2:	9f 92       	push	r9
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 6a 05 	sts	0x056A, r24
	chargingActive = true;
     6ee:	80 93 6e 05 	sts	0x056E, r24

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0
}

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
     6f6:	41 2c       	mov	r4, r1
     6f8:	51 2c       	mov	r5, r1
     6fa:	e1 2c       	mov	r14, r1
     6fc:	f1 2c       	mov	r15, r1
     6fe:	61 2c       	mov	r6, r1
     700:	71 2c       	mov	r7, r1
     702:	81 2c       	mov	r8, r1
     704:	91 2c       	mov	r9, r1
     706:	a1 2c       	mov	r10, r1
     708:	b1 2c       	mov	r11, r1
     70a:	c1 2c       	mov	r12, r1
     70c:	d1 2c       	mov	r13, r1
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     70e:	64 c1       	rjmp	.+712    	; 0x9d8 <__stack+0xd9>
	{
		if (takeSample)
     710:	80 91 6f 05 	lds	r24, 0x056F
     714:	88 23       	and	r24, r24
     716:	09 f4       	brne	.+2      	; 0x71a <BeginCharging+0x56>
     718:	2a c1       	rjmp	.+596    	; 0x96e <__stack+0x6f>
		{
			data=ADC_Sample();
     71a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     71e:	ec 01       	movw	r28, r24
			if((lastData!=data) && data > 0) //Only update display if needed (any change)
     720:	08 17       	cp	r16, r24
     722:	19 07       	cpc	r17, r25
     724:	09 f4       	brne	.+2      	; 0x728 <BeginCharging+0x64>
     726:	4a c0       	rjmp	.+148    	; 0x7bc <BeginCharging+0xf8>
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	09 f4       	brne	.+2      	; 0x72e <BeginCharging+0x6a>
     72c:	4a c0       	rjmp	.+148    	; 0x7c2 <BeginCharging+0xfe>
			{
				Disp_GotoXY(13,1);
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	8d e0       	ldi	r24, 0x0D	; 13
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
				sprintf(displayBuffer, "%4u", data);
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	80 e2       	ldi	r24, 0x20	; 32
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0f e0       	ldi	r16, 0x0F	; 15
     748:	15 e0       	ldi	r17, 0x05	; 5
     74a:	1f 93       	push	r17
     74c:	0f 93       	push	r16
     74e:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
				Disp_printString(displayBuffer);
     752:	c8 01       	movw	r24, r16
     754:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
				power = (double)data/409.2; //((2/5)*1023);   //mW 0.4*1023 = 409.2 // uW 0.4*1.023
     758:	be 01       	movw	r22, r28
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     762:	2a e9       	ldi	r18, 0x9A	; 154
     764:	39 e9       	ldi	r19, 0x99	; 153
     766:	4c ec       	ldi	r20, 0xCC	; 204
     768:	53 e4       	ldi	r21, 0x43	; 67
     76a:	0e 94 bd 0b 	call	0x177a	; 0x177a <__divsf3>
     76e:	f6 2e       	mov	r15, r22
     770:	e7 2e       	mov	r14, r23
     772:	58 2e       	mov	r5, r24
     774:	49 2e       	mov	r4, r25
     776:	66 2e       	mov	r6, r22
     778:	77 2e       	mov	r7, r23
     77a:	88 2e       	mov	r8, r24
     77c:	99 2e       	mov	r9, r25
				Disp_GotoXY(3,1);
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
				sprintf(displayBuffer, "%.2f", power);
     78a:	4f 92       	push	r4
     78c:	5f 92       	push	r5
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	84 e2       	ldi	r24, 0x24	; 36
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	1f 93       	push	r17
     79c:	0f 93       	push	r16
     79e:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
				Disp_printString(displayBuffer);
     7a2:	c8 01       	movw	r24, r16
     7a4:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
				lastData=data;
     7a8:	8d b7       	in	r24, 0x3d	; 61
     7aa:	9e b7       	in	r25, 0x3e	; 62
     7ac:	0e 96       	adiw	r24, 0x0e	; 14
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	9e bf       	out	0x3e, r25	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	8d bf       	out	0x3d, r24	; 61
     7b8:	8e 01       	movw	r16, r28
     7ba:	2d c0       	rjmp	.+90     	; 0x816 <BeginCharging+0x152>
			}
			else if (data == 0)
     7bc:	01 15       	cp	r16, r1
     7be:	11 05       	cpc	r17, r1
     7c0:	51 f5       	brne	.+84     	; 0x816 <BeginCharging+0x152>
			{
				usedKr = floor(price);
     7c2:	64 2d       	mov	r22, r4
     7c4:	75 2d       	mov	r23, r5
     7c6:	8e 2d       	mov	r24, r14
     7c8:	9f 2d       	mov	r25, r15
     7ca:	0e 94 8e 0c 	call	0x191c	; 0x191c <floor>
     7ce:	0e 94 25 0c 	call	0x184a	; 0x184a <__fixunssfsi>
     7d2:	70 93 ab 04 	sts	0x04AB, r23
     7d6:	60 93 aa 04 	sts	0x04AA, r22
				usedOere = (price-usedKr)*100;
     7da:	60 91 aa 04 	lds	r22, 0x04AA
     7de:	70 91 ab 04 	lds	r23, 0x04AB
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	64 2d       	mov	r22, r4
     7f0:	75 2d       	mov	r23, r5
     7f2:	8e 2d       	mov	r24, r14
     7f4:	9f 2d       	mov	r25, r15
     7f6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__subsf3>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	48 ec       	ldi	r20, 0xC8	; 200
     800:	52 e4       	ldi	r21, 0x42	; 66
     802:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__mulsf3>
     806:	0e 94 25 0c 	call	0x184a	; 0x184a <__fixunssfsi>
     80a:	70 93 ad 04 	sts	0x04AD, r23
     80e:	60 93 ac 04 	sts	0x04AC, r22
				chargingActive = false;
     812:	10 92 6e 05 	sts	0x056E, r1
			}
			energy += power;
     816:	26 2d       	mov	r18, r6
     818:	37 2d       	mov	r19, r7
     81a:	48 2d       	mov	r20, r8
     81c:	59 2d       	mov	r21, r9
     81e:	6a 2d       	mov	r22, r10
     820:	7b 2d       	mov	r23, r11
     822:	8c 2d       	mov	r24, r12
     824:	9d 2d       	mov	r25, r13
     826:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__addsf3>
     82a:	e6 2e       	mov	r14, r22
     82c:	f7 2e       	mov	r15, r23
     82e:	d8 2f       	mov	r29, r24
     830:	c9 2f       	mov	r28, r25
     832:	a6 2e       	mov	r10, r22
     834:	b7 2e       	mov	r11, r23
     836:	c8 2e       	mov	r12, r24
     838:	d9 2e       	mov	r13, r25
			Disp_GotoXY(3,2);
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			if (energy < 9999) sprintf(displayBuffer, "%.1f", energy);
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	3c e3       	ldi	r19, 0x3C	; 60
     84a:	4c e1       	ldi	r20, 0x1C	; 28
     84c:	56 e4       	ldi	r21, 0x46	; 70
     84e:	6e 2d       	mov	r22, r14
     850:	7f 2d       	mov	r23, r15
     852:	8d 2f       	mov	r24, r29
     854:	9c 2f       	mov	r25, r28
     856:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__cmpsf2>
     85a:	88 23       	and	r24, r24
     85c:	bc f4       	brge	.+46     	; 0x88c <BeginCharging+0x1c8>
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ff 92       	push	r15
     864:	ef 92       	push	r14
     866:	89 e2       	ldi	r24, 0x29	; 41
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	8f e0       	ldi	r24, 0x0F	; 15
     870:	95 e0       	ldi	r25, 0x05	; 5
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
     87a:	8d b7       	in	r24, 0x3d	; 61
     87c:	9e b7       	in	r25, 0x3e	; 62
     87e:	08 96       	adiw	r24, 0x08	; 8
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	9e bf       	out	0x3e, r25	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	8d bf       	out	0x3d, r24	; 61
     88a:	16 c0       	rjmp	.+44     	; 0x8b8 <BeginCharging+0x1f4>
			else sprintf(displayBuffer, "%5.f", energy);
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ff 92       	push	r15
     892:	ef 92       	push	r14
     894:	8e e2       	ldi	r24, 0x2E	; 46
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	8f e0       	ldi	r24, 0x0F	; 15
     89e:	95 e0       	ldi	r25, 0x05	; 5
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
     8a8:	8d b7       	in	r24, 0x3d	; 61
     8aa:	9e b7       	in	r25, 0x3e	; 62
     8ac:	08 96       	adiw	r24, 0x08	; 8
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	9e bf       	out	0x3e, r25	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	8d bf       	out	0x3d, r24	; 61
			Disp_printString(displayBuffer);
     8b8:	8f e0       	ldi	r24, 0x0F	; 15
     8ba:	95 e0       	ldi	r25, 0x05	; 5
     8bc:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			price = energy*KR_PR_MWS;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	5f e3       	ldi	r21, 0x3F	; 63
     8c8:	6e 2d       	mov	r22, r14
     8ca:	7f 2d       	mov	r23, r15
     8cc:	8d 2f       	mov	r24, r29
     8ce:	9c 2f       	mov	r25, r28
     8d0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__mulsf3>
     8d4:	c6 2f       	mov	r28, r22
     8d6:	d7 2f       	mov	r29, r23
     8d8:	38 2e       	mov	r3, r24
     8da:	29 2e       	mov	r2, r25
     8dc:	46 2e       	mov	r4, r22
     8de:	57 2e       	mov	r5, r23
     8e0:	e8 2e       	mov	r14, r24
     8e2:	f9 2e       	mov	r15, r25
			Disp_GotoXY(11,2);
     8e4:	62 e0       	ldi	r22, 0x02	; 2
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	8b e0       	ldi	r24, 0x0B	; 11
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			if (price < 99) sprintf(displayBuffer, "%.1f", price);
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	46 ec       	ldi	r20, 0xC6	; 198
     8f6:	52 e4       	ldi	r21, 0x42	; 66
     8f8:	6c 2f       	mov	r22, r28
     8fa:	7d 2f       	mov	r23, r29
     8fc:	83 2d       	mov	r24, r3
     8fe:	92 2d       	mov	r25, r2
     900:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__cmpsf2>
     904:	88 23       	and	r24, r24
     906:	bc f4       	brge	.+46     	; 0x936 <__stack+0x37>
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	89 e2       	ldi	r24, 0x29	; 41
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	8f e0       	ldi	r24, 0x0F	; 15
     91a:	95 e0       	ldi	r25, 0x05	; 5
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
     924:	8d b7       	in	r24, 0x3d	; 61
     926:	9e b7       	in	r25, 0x3e	; 62
     928:	08 96       	adiw	r24, 0x08	; 8
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	9e bf       	out	0x3e, r25	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	8d bf       	out	0x3d, r24	; 61
     934:	16 c0       	rjmp	.+44     	; 0x962 <__stack+0x63>
			else sprintf(displayBuffer, "%4.f", price);
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	83 e3       	ldi	r24, 0x33	; 51
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	8f e0       	ldi	r24, 0x0F	; 15
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
     952:	8d b7       	in	r24, 0x3d	; 61
     954:	9e b7       	in	r25, 0x3e	; 62
     956:	08 96       	adiw	r24, 0x08	; 8
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	9e bf       	out	0x3e, r25	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	8d bf       	out	0x3d, r24	; 61
			//sprintf(displayBuffer, "%.1f", price);
			Disp_printString(displayBuffer);
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			takeSample = false;
     96a:	10 92 6f 05 	sts	0x056F, r1
		}
		if (readKeys)
     96e:	80 91 6d 05 	lds	r24, 0x056D
     972:	88 23       	and	r24, r24
     974:	89 f1       	breq	.+98     	; 0x9d8 <__stack+0xd9>
		{
			char keyP = KBDchar(1);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 c4 07 	call	0xf88	; 0xf88 <KBDchar>
			if (keyP == 'C')
     97c:	83 34       	cpi	r24, 0x43	; 67
     97e:	51 f5       	brne	.+84     	; 0x9d4 <__stack+0xd5>
			{
				usedKr = floor(price);
     980:	64 2d       	mov	r22, r4
     982:	75 2d       	mov	r23, r5
     984:	8e 2d       	mov	r24, r14
     986:	9f 2d       	mov	r25, r15
     988:	0e 94 8e 0c 	call	0x191c	; 0x191c <floor>
     98c:	0e 94 25 0c 	call	0x184a	; 0x184a <__fixunssfsi>
     990:	70 93 ab 04 	sts	0x04AB, r23
     994:	60 93 aa 04 	sts	0x04AA, r22
				usedOere = (price-usedKr)*100;
     998:	60 91 aa 04 	lds	r22, 0x04AA
     99c:	70 91 ab 04 	lds	r23, 0x04AB
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatunsisf>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	64 2d       	mov	r22, r4
     9ae:	75 2d       	mov	r23, r5
     9b0:	8e 2d       	mov	r24, r14
     9b2:	9f 2d       	mov	r25, r15
     9b4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__subsf3>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	48 ec       	ldi	r20, 0xC8	; 200
     9be:	52 e4       	ldi	r21, 0x42	; 66
     9c0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__mulsf3>
     9c4:	0e 94 25 0c 	call	0x184a	; 0x184a <__fixunssfsi>
     9c8:	70 93 ad 04 	sts	0x04AD, r23
     9cc:	60 93 ac 04 	sts	0x04AC, r22
				chargingActive = false;
     9d0:	10 92 6e 05 	sts	0x056E, r1
			}
			readKeys = false;
     9d4:	10 92 6d 05 	sts	0x056D, r1
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     9d8:	80 91 6e 05 	lds	r24, 0x056E
     9dc:	81 11       	cpse	r24, r1
     9de:	98 ce       	rjmp	.-720    	; 0x710 <BeginCharging+0x4c>
				chargingActive = false;
			}
			readKeys = false;
		}
	}
	keypadActive = false;
     9e0:	10 92 6a 05 	sts	0x056A, r1
	//UART_Transmit_String("\nKr ");
	sprintf(amountKr, "%04u", usedKr);
     9e4:	80 91 aa 04 	lds	r24, 0x04AA
     9e8:	90 91 ab 04 	lds	r25, 0x04AB
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	88 e3       	ldi	r24, 0x38	; 56
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	80 ec       	ldi	r24, 0xC0	; 192
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
	//UART_Transmit_String(amountKr);
	//UART_Transmit_String("\nOere ");
	sprintf(amountOere, "%02u", usedOere);
     a04:	80 91 ac 04 	lds	r24, 0x04AC
     a08:	90 91 ad 04 	lds	r25, 0x04AD
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	8d e3       	ldi	r24, 0x3D	; 61
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	8d eb       	ldi	r24, 0xBD	; 189
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
	//UART_Transmit_String(amountOere);
	//UART_Transmit_String("\nTime in seconds");
	sprintf(timeStamp, "%05u", timeChargedInSeconds);
     a24:	80 91 68 04 	lds	r24, 0x0468
     a28:	90 91 69 04 	lds	r25, 0x0469
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	82 e4       	ldi	r24, 0x42	; 66
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	87 eb       	ldi	r24, 0xB7	; 183
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	9f 93       	push	r25
     a3e:	8f 93       	push	r24
     a40:	0e 94 b4 12 	call	0x2568	; 0x2568 <sprintf>
     a44:	8d b7       	in	r24, 0x3d	; 61
     a46:	9e b7       	in	r25, 0x3e	; 62
     a48:	42 96       	adiw	r24, 0x12	; 18
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	9e bf       	out	0x3e, r25	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	8d bf       	out	0x3d, r24	; 61
	//UART_Transmit_String(timeStamp);
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	7f 90       	pop	r7
     a6e:	6f 90       	pop	r6
     a70:	5f 90       	pop	r5
     a72:	4f 90       	pop	r4
     a74:	3f 90       	pop	r3
     a76:	2f 90       	pop	r2
     a78:	08 95       	ret

00000a7a <Disp_command>:
	displayAddress++;
}

void Disp_command(char command)
{
	SPCR |= (1<<DORD); // Send LSB first
     a7a:	9c b5       	in	r25, 0x2c	; 44
     a7c:	90 62       	ori	r25, 0x20	; 32
     a7e:	9c bd       	out	0x2c, r25	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     a80:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     a82:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     a84:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     a86:	28 98       	cbi	0x05, 0	; 5
	DDRC |= (1<<DDC4); // RS output
     a88:	3c 9a       	sbi	0x07, 4	; 7
	PORTC &= ~(1<<PORTC4); // RS low = instruction
     a8a:	44 98       	cbi	0x08, 4	; 8
	SPI_MasterTransmit(command);
     a8c:	0e 94 16 08 	call	0x102c	; 0x102c <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB first
     a90:	8c b5       	in	r24, 0x2c	; 44
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     a96:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1); // Shift register Output Enable low (active low)
     a98:	29 98       	cbi	0x05, 1	; 5
     a9a:	87 ec       	ldi	r24, 0xC7	; 199
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <Disp_command+0x24>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <Disp_command+0x2a>
     aa4:	00 00       	nop
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     aa6:	28 98       	cbi	0x05, 0	; 5
     aa8:	8f e7       	ldi	r24, 0x7F	; 127
     aaa:	9c e0       	ldi	r25, 0x0C	; 12
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <Disp_command+0x32>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <Disp_command+0x38>
     ab2:	00 00       	nop
     ab4:	08 95       	ret

00000ab6 <Disp_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	80 e7       	ldi	r24, 0x70	; 112
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <Disp_init+0x6>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <Disp_init+0x10>
     ac6:	00 00       	nop
}

void Disp_init()
{
	_delay_ms(50);
	Disp_command(0b00111000); // 0b00111000
     ac8:	88 e3       	ldi	r24, 0x38	; 56
     aca:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ace:	87 ec       	ldi	r24, 0xC7	; 199
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <Disp_init+0x1c>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <Disp_init+0x22>
     ad8:	00 00       	nop
	_delay_us(50);
	Disp_command(0b00001111); // 0b00001111
     ada:	8f e0       	ldi	r24, 0x0F	; 15
     adc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
     ae0:	8f ec       	ldi	r24, 0xCF	; 207
     ae2:	97 e0       	ldi	r25, 0x07	; 7
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <Disp_init+0x2e>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <Disp_init+0x34>
     aea:	00 00       	nop
	_delay_us(500);
	Disp_command(0b00000001); // 0b00000001
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
     af2:	8f e8       	ldi	r24, 0x8F	; 143
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <Disp_init+0x40>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <Disp_init+0x46>
     afc:	00 00       	nop
	_delay_us(100);
	Disp_command(0b00000110); // 0b00000111
     afe:	86 e0       	ldi	r24, 0x06	; 6
     b00:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
     b04:	8f e9       	ldi	r24, 0x9F	; 159
     b06:	9f e0       	ldi	r25, 0x0F	; 15
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <Disp_init+0x52>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <Disp_init+0x58>
     b0e:	00 00       	nop
     b10:	08 95       	ret

00000b12 <Disp_GotoXY>:
	_delay_us(1000);
}

void Disp_GotoXY (int x,int y)   // Go to position x (max 16) in line y (max 2).
{
	if (y == 2) displayAddress = x + 16;
     b12:	62 30       	cpi	r22, 0x02	; 2
     b14:	71 05       	cpc	r23, r1
     b16:	29 f4       	brne	.+10     	; 0xb22 <Disp_GotoXY+0x10>
     b18:	98 2f       	mov	r25, r24
     b1a:	90 5f       	subi	r25, 0xF0	; 240
     b1c:	90 93 00 01 	sts	0x0100, r25
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <Disp_GotoXY+0x14>
	else displayAddress = x;
     b22:	80 93 00 01 	sts	0x0100, r24
	char lineaddr = ((y-1) * 0x40 + (x-1)) | 0x80;// Put the x position
     b26:	90 e4       	ldi	r25, 0x40	; 64
     b28:	69 9f       	mul	r22, r25
     b2a:	80 0d       	add	r24, r0
     b2c:	11 24       	eor	r1, r1
     b2e:	81 54       	subi	r24, 0x41	; 65
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
     b36:	08 95       	ret

00000b38 <Disp_char>:
#include "Macroes.h"
static uint8_t displayAddress = 1;
enum state {stateIdle, stateCarConnected, stateCardSwiped, stateTypePassword, stateWrongPassword, stateCharging, stateChargingStopped, stateDisconnectCar, stateUploadToDB, stateDBoffline, stateUnknownCard, stateDisableCard,stateCardReadError,stateConnectCar,stateErrorState};

void Disp_char(char data)
{
     b38:	cf 93       	push	r28
     b3a:	c8 2f       	mov	r28, r24
	//static uint8_t displayAddress = 1;
	if (displayAddress == 17) Disp_GotoXY(1,2);
     b3c:	90 91 00 01 	lds	r25, 0x0100
     b40:	91 31       	cpi	r25, 0x11	; 17
     b42:	39 f4       	brne	.+14     	; 0xb52 <Disp_char+0x1a>
     b44:	62 e0       	ldi	r22, 0x02	; 2
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
     b50:	0b c0       	rjmp	.+22     	; 0xb68 <Disp_char+0x30>
	else if (displayAddress == 33)
     b52:	91 32       	cpi	r25, 0x21	; 33
     b54:	49 f4       	brne	.+18     	; 0xb68 <Disp_char+0x30>
	{
		 Disp_GotoXY(1,1);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
		 displayAddress = 1;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 00 01 	sts	0x0100, r24
	}
	DDRC |= (1<<DDC4); // RS output
     b68:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4); // RS high = data
     b6a:	44 9a       	sbi	0x08, 4	; 8
	SPCR |= (1<<DORD); // Send LSB first
     b6c:	8c b5       	in	r24, 0x2c	; 44
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	8c bd       	out	0x2c, r24	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     b72:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     b74:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     b76:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     b78:	28 98       	cbi	0x05, 0	; 5

	SPI_MasterTransmit(data);
     b7a:	8c 2f       	mov	r24, r28
     b7c:	0e 94 16 08 	call	0x102c	; 0x102c <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB
     b80:	8c b5       	in	r24, 0x2c	; 44
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     b86:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     b88:	29 98       	cbi	0x05, 1	; 5
     b8a:	87 ec       	ldi	r24, 0xC7	; 199
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <Disp_char+0x56>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <Disp_char+0x5c>
     b94:	00 00       	nop
	//PORTB |= (1<<PORTB0); // Enable display high
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     b96:	28 98       	cbi	0x05, 0	; 5
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
	displayAddress++;
     b98:	80 91 00 01 	lds	r24, 0x0100
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 00 01 	sts	0x0100, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <Disp_printString>:
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
     bac:	88 81       	ld	r24, Y
     bae:	88 23       	and	r24, r24
     bb0:	31 f0       	breq	.+12     	; 0xbbe <Disp_printString+0x18>
	_delay_us(800);
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
     bb2:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
     bb4:	0e 94 9c 05 	call	0xb38	; 0xb38 <Disp_char>
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
     bb8:	89 91       	ld	r24, Y+
     bba:	81 11       	cpse	r24, r1
     bbc:	fb cf       	rjmp	.-10     	; 0xbb4 <Disp_printString+0xe>
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
		str++;                     // Increment pointer
	}
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <Disp_clear>:
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
}

void Disp_clear (void)
{
	Disp_command(0x01);      // Send command '0x01' (Display Clear)
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <Disp_command>
     bca:	08 95       	ret

00000bcc <Disp_printState>:
}


void Disp_printState(int state)
{
	switch(state)
     bcc:	88 30       	cpi	r24, 0x08	; 8
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <Disp_printState+0x8>
     bd2:	25 c1       	rjmp	.+586    	; 0xe1e <Disp_printState+0x252>
     bd4:	94 f4       	brge	.+36     	; 0xbfa <Disp_printState+0x2e>
     bd6:	84 30       	cpi	r24, 0x04	; 4
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <Disp_printState+0x12>
     bdc:	6f c0       	rjmp	.+222    	; 0xcbc <Disp_printState+0xf0>
     bde:	34 f4       	brge	.+12     	; 0xbec <Disp_printState+0x20>
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	11 f1       	breq	.+68     	; 0xc28 <Disp_printState+0x5c>
     be4:	03 97       	sbiw	r24, 0x03	; 3
     be6:	09 f0       	breq	.+2      	; 0xbea <Disp_printState+0x1e>
     be8:	49 c1       	rjmp	.+658    	; 0xe7c <Disp_printState+0x2b0>
     bea:	35 c0       	rjmp	.+106    	; 0xc56 <Disp_printState+0x8a>
     bec:	86 30       	cpi	r24, 0x06	; 6
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <Disp_printState+0x28>
     bf2:	db c0       	rjmp	.+438    	; 0xdaa <Disp_printState+0x1de>
     bf4:	0c f0       	brlt	.+2      	; 0xbf8 <Disp_printState+0x2c>
     bf6:	06 c1       	rjmp	.+524    	; 0xe04 <Disp_printState+0x238>
     bf8:	c1 c0       	rjmp	.+386    	; 0xd7c <Disp_printState+0x1b0>
     bfa:	8b 30       	cpi	r24, 0x0B	; 11
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <Disp_printState+0x36>
     c00:	7d c0       	rjmp	.+250    	; 0xcfc <Disp_printState+0x130>
     c02:	44 f4       	brge	.+16     	; 0xc14 <Disp_printState+0x48>
     c04:	89 30       	cpi	r24, 0x09	; 9
     c06:	91 05       	cpc	r25, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <Disp_printState+0x40>
     c0a:	16 c1       	rjmp	.+556    	; 0xe38 <Disp_printState+0x26c>
     c0c:	0a 97       	sbiw	r24, 0x0a	; 10
     c0e:	09 f0       	breq	.+2      	; 0xc12 <Disp_printState+0x46>
     c10:	35 c1       	rjmp	.+618    	; 0xe7c <Disp_printState+0x2b0>
     c12:	3e c0       	rjmp	.+124    	; 0xc90 <Disp_printState+0xc4>
     c14:	8d 30       	cpi	r24, 0x0D	; 13
     c16:	91 05       	cpc	r25, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <Disp_printState+0x50>
     c1a:	dd c0       	rjmp	.+442    	; 0xdd6 <Disp_printState+0x20a>
     c1c:	0c f4       	brge	.+2      	; 0xc20 <Disp_printState+0x54>
     c1e:	8e c0       	rjmp	.+284    	; 0xd3c <Disp_printState+0x170>
     c20:	0e 97       	sbiw	r24, 0x0e	; 14
     c22:	09 f0       	breq	.+2      	; 0xc26 <Disp_printState+0x5a>
     c24:	2b c1       	rjmp	.+598    	; 0xe7c <Disp_printState+0x2b0>
     c26:	15 c1       	rjmp	.+554    	; 0xe52 <Disp_printState+0x286>
	{
		case stateIdle :
		{
			Disp_clear();
     c28:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Welcome");
     c38:	87 e4       	ldi	r24, 0x47	; 71
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     c40:	62 e0       	ldi	r22, 0x02	; 2
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Swipe Card");
     c4c:	8f e4       	ldi	r24, 0x4F	; 79
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     c54:	08 95       	ret
		case stateTypePassword :
		{
			Disp_clear();
     c56:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Type Password");
     c66:	8a e5       	ldi	r24, 0x5A	; 90
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(7,2);
     c6e:	62 e0       	ldi	r22, 0x02	; 2
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("C = cancel");
     c7a:	88 e6       	ldi	r24, 0x68	; 104
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     c82:	62 e0       	ldi	r22, 0x02	; 2
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
		}
		break;
     c8e:	08 95       	ret
		case stateUnknownCard :
		{
			Disp_clear();
     c90:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("card unknown");
     ca0:	83 e7       	ldi	r24, 0x73	; 115
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	87 ea       	ldi	r24, 0xA7	; 167
     cac:	91 e6       	ldi	r25, 0x61	; 97
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	80 40       	sbci	r24, 0x00	; 0
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <Disp_printState+0xe2>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <Disp_printState+0xec>
     cb8:	00 00       	nop
     cba:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateWrongPassword :
		{
			Disp_clear();
     cbc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("wrong password");
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("try again");
     ce0:	8f e8       	ldi	r24, 0x8F	; 143
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	87 ea       	ldi	r24, 0xA7	; 167
     cec:	91 e6       	ldi	r25, 0x61	; 97
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	80 40       	sbci	r24, 0x00	; 0
     cf2:	90 40       	sbci	r25, 0x00	; 0
     cf4:	e1 f7       	brne	.-8      	; 0xcee <Disp_printState+0x122>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <Disp_printState+0x12c>
     cf8:	00 00       	nop
     cfa:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateDisableCard :
		{
			Disp_clear();
     cfc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("card blocked");
     d0c:	89 e9       	ldi	r24, 0x99	; 153
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     d14:	62 e0       	ldi	r22, 0x02	; 2
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("contact service");
     d20:	86 ea       	ldi	r24, 0xA6	; 166
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	87 ea       	ldi	r24, 0xA7	; 167
     d2c:	91 e6       	ldi	r25, 0x61	; 97
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <Disp_printState+0x162>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <Disp_printState+0x16c>
     d38:	00 00       	nop
     d3a:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCardReadError :
		{
			Disp_clear();
     d3c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("card read error");
     d4c:	86 eb       	ldi	r24, 0xB6	; 182
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("swipe again");
     d60:	86 ec       	ldi	r24, 0xC6	; 198
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	87 ea       	ldi	r24, 0xA7	; 167
     d6c:	91 e6       	ldi	r25, 0x61	; 97
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	80 40       	sbci	r24, 0x00	; 0
     d72:	90 40       	sbci	r25, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <Disp_printState+0x1a2>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <Disp_printState+0x1ac>
     d78:	00 00       	nop
     d7a:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCharging:
		{
			Disp_clear();
     d7c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("P:     mW A:");
     d8c:	82 ed       	ldi	r24, 0xD2	; 210
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("E:     mWS    kr");
     da0:	8f ed       	ldi	r24, 0xDF	; 223
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     da8:	08 95       	ret
		case stateChargingStopped:
		{
			Disp_clear();
     daa:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Charging stopped");
     dba:	80 ef       	ldi	r24, 0xF0	; 240
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	87 ea       	ldi	r24, 0xA7	; 167
     dc6:	91 e6       	ldi	r25, 0x61	; 97
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	80 40       	sbci	r24, 0x00	; 0
     dcc:	90 40       	sbci	r25, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <Disp_printState+0x1fc>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <Disp_printState+0x206>
     dd2:	00 00       	nop
     dd4:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateConnectCar:
		{
			Disp_clear();
     dd6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Connect Car");
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
			Disp_GotoXY(1,2);
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("to continue");
     dfa:	8d e0       	ldi	r24, 0x0D	; 13
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     e02:	08 95       	ret
		case stateDisconnectCar:
		{
			Disp_clear();
     e04:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Disconnect Car");
     e14:	89 e1       	ldi	r24, 0x19	; 25
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     e1c:	08 95       	ret
		case stateUploadToDB:
		{
			Disp_clear();
     e1e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Uploading data");
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     e36:	08 95       	ret
		case stateDBoffline :
		{
			Disp_clear();
     e38:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Charger Offline");
     e48:	87 e3       	ldi	r24, 0x37	; 55
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
		}
		break;
     e50:	08 95       	ret
		case stateErrorState :
		{
			Disp_clear();
     e52:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
			Disp_GotoXY(1,1);
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 89 05 	call	0xb12	; 0xb12 <Disp_GotoXY>
			Disp_printString("Error State");
     e62:	87 e4       	ldi	r24, 0x47	; 71
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 d3 05 	call	0xba6	; 0xba6 <Disp_printString>
     e6a:	2f ef       	ldi	r18, 0xFF	; 255
     e6c:	87 ea       	ldi	r24, 0xA7	; 167
     e6e:	91 e6       	ldi	r25, 0x61	; 97
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	80 40       	sbci	r24, 0x00	; 0
     e74:	90 40       	sbci	r25, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <Disp_printState+0x2a4>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <Disp_printState+0x2ae>
     e7a:	00 00       	nop
     e7c:	08 95       	ret

00000e7e <KeyTranslate>:
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
	switch  (keyData)
     e7e:	8e 3c       	cpi	r24, 0xCE	; 206
     e80:	09 f4       	brne	.+2      	; 0xe84 <KeyTranslate+0x6>
     e82:	63 c0       	rjmp	.+198    	; 0xf4a <KeyTranslate+0xcc>
     e84:	08 f5       	brcc	.+66     	; 0xec8 <KeyTranslate+0x4a>
     e86:	8d 37       	cpi	r24, 0x7D	; 125
     e88:	09 f4       	brne	.+2      	; 0xe8c <KeyTranslate+0xe>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <KeyTranslate+0x94>
     e8c:	70 f4       	brcc	.+28     	; 0xeaa <KeyTranslate+0x2c>
     e8e:	8f 30       	cpi	r24, 0x0F	; 15
     e90:	09 f4       	brne	.+2      	; 0xe94 <KeyTranslate+0x16>
     e92:	57 c0       	rjmp	.+174    	; 0xf42 <KeyTranslate+0xc4>
     e94:	20 f4       	brcc	.+8      	; 0xe9e <KeyTranslate+0x20>
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <KeyTranslate+0x1e>
     e9a:	4f c0       	rjmp	.+158    	; 0xf3a <KeyTranslate+0xbc>
     e9c:	5a c0       	rjmp	.+180    	; 0xf52 <KeyTranslate+0xd4>
     e9e:	87 37       	cpi	r24, 0x77	; 119
     ea0:	71 f1       	breq	.+92     	; 0xefe <KeyTranslate+0x80>
     ea2:	8b 37       	cpi	r24, 0x7B	; 123
     ea4:	09 f0       	breq	.+2      	; 0xea8 <KeyTranslate+0x2a>
     ea6:	55 c0       	rjmp	.+170    	; 0xf52 <KeyTranslate+0xd4>
     ea8:	2e c0       	rjmp	.+92     	; 0xf06 <KeyTranslate+0x88>
     eaa:	8b 3b       	cpi	r24, 0xBB	; 187
     eac:	71 f1       	breq	.+92     	; 0xf0a <KeyTranslate+0x8c>
     eae:	30 f4       	brcc	.+12     	; 0xebc <KeyTranslate+0x3e>
     eb0:	8e 37       	cpi	r24, 0x7E	; 126
     eb2:	b9 f1       	breq	.+110    	; 0xf22 <KeyTranslate+0xa4>
     eb4:	87 3b       	cpi	r24, 0xB7	; 183
     eb6:	09 f0       	breq	.+2      	; 0xeba <KeyTranslate+0x3c>
     eb8:	4c c0       	rjmp	.+152    	; 0xf52 <KeyTranslate+0xd4>
     eba:	4d c0       	rjmp	.+154    	; 0xf56 <KeyTranslate+0xd8>
     ebc:	8d 3b       	cpi	r24, 0xBD	; 189
     ebe:	59 f1       	breq	.+86     	; 0xf16 <KeyTranslate+0x98>
     ec0:	8e 3b       	cpi	r24, 0xBE	; 190
     ec2:	09 f0       	breq	.+2      	; 0xec6 <KeyTranslate+0x48>
     ec4:	46 c0       	rjmp	.+140    	; 0xf52 <KeyTranslate+0xd4>
     ec6:	2b c0       	rjmp	.+86     	; 0xf1e <KeyTranslate+0xa0>
     ec8:	87 3e       	cpi	r24, 0xE7	; 231
     eca:	a9 f1       	breq	.+106    	; 0xf36 <KeyTranslate+0xb8>
     ecc:	58 f4       	brcc	.+22     	; 0xee4 <KeyTranslate+0x66>
     ece:	8b 3d       	cpi	r24, 0xDB	; 219
     ed0:	f1 f0       	breq	.+60     	; 0xf0e <KeyTranslate+0x90>
     ed2:	18 f4       	brcc	.+6      	; 0xeda <KeyTranslate+0x5c>
     ed4:	87 3d       	cpi	r24, 0xD7	; 215
     ed6:	e9 f5       	brne	.+122    	; 0xf52 <KeyTranslate+0xd4>
     ed8:	14 c0       	rjmp	.+40     	; 0xf02 <KeyTranslate+0x84>
     eda:	8d 3d       	cpi	r24, 0xDD	; 221
     edc:	f1 f0       	breq	.+60     	; 0xf1a <KeyTranslate+0x9c>
     ede:	8e 3d       	cpi	r24, 0xDE	; 222
     ee0:	c1 f5       	brne	.+112    	; 0xf52 <KeyTranslate+0xd4>
     ee2:	21 c0       	rjmp	.+66     	; 0xf26 <KeyTranslate+0xa8>
     ee4:	8e 3e       	cpi	r24, 0xEE	; 238
     ee6:	09 f1       	breq	.+66     	; 0xf2a <KeyTranslate+0xac>
     ee8:	28 f4       	brcc	.+10     	; 0xef4 <KeyTranslate+0x76>
     eea:	8b 3e       	cpi	r24, 0xEB	; 235
     eec:	11 f1       	breq	.+68     	; 0xf32 <KeyTranslate+0xb4>
     eee:	8d 3e       	cpi	r24, 0xED	; 237
     ef0:	81 f5       	brne	.+96     	; 0xf52 <KeyTranslate+0xd4>
     ef2:	1d c0       	rjmp	.+58     	; 0xf2e <KeyTranslate+0xb0>
     ef4:	80 3f       	cpi	r24, 0xF0	; 240
     ef6:	39 f1       	breq	.+78     	; 0xf46 <KeyTranslate+0xc8>
     ef8:	8f 3f       	cpi	r24, 0xFF	; 255
     efa:	59 f5       	brne	.+86     	; 0xf52 <KeyTranslate+0xd4>
     efc:	20 c0       	rjmp	.+64     	; 0xf3e <KeyTranslate+0xc0>
	{
		case 0b01110111: kbdChar='1'; break;
     efe:	81 e3       	ldi	r24, 0x31	; 49
     f00:	08 95       	ret
		case 0b10110111: kbdChar='2'; break;
		case 0b11010111: kbdChar='3'; break;
     f02:	83 e3       	ldi	r24, 0x33	; 51
     f04:	08 95       	ret
		case 0b01111011: kbdChar='4'; break;
     f06:	84 e3       	ldi	r24, 0x34	; 52
     f08:	08 95       	ret
		case 0b10111011: kbdChar='5'; break;
     f0a:	85 e3       	ldi	r24, 0x35	; 53
     f0c:	08 95       	ret
		case 0b11011011: kbdChar='6'; break;
     f0e:	86 e3       	ldi	r24, 0x36	; 54
     f10:	08 95       	ret
		case 0b01111101: kbdChar='7'; break;
     f12:	87 e3       	ldi	r24, 0x37	; 55
     f14:	08 95       	ret
		case 0b10111101: kbdChar='8'; break;
     f16:	88 e3       	ldi	r24, 0x38	; 56
     f18:	08 95       	ret
		case 0b11011101: kbdChar='9'; break;
     f1a:	89 e3       	ldi	r24, 0x39	; 57
     f1c:	08 95       	ret
		case 0b10111110: kbdChar='0'; break;
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	08 95       	ret
		case 0b01111110: kbdChar='A'; break;
     f22:	81 e4       	ldi	r24, 0x41	; 65
     f24:	08 95       	ret
		case 0b11011110: kbdChar='B'; break;
     f26:	82 e4       	ldi	r24, 0x42	; 66
     f28:	08 95       	ret
		case 0b11101110: kbdChar='C'; break;
     f2a:	83 e4       	ldi	r24, 0x43	; 67
     f2c:	08 95       	ret
		case 0b11101101: kbdChar='D'; break;
     f2e:	84 e4       	ldi	r24, 0x44	; 68
     f30:	08 95       	ret
		case 0b11101011: kbdChar='E'; break;
     f32:	85 e4       	ldi	r24, 0x45	; 69
     f34:	08 95       	ret
		case 0b11100111: kbdChar='F'; break;
     f36:	86 e4       	ldi	r24, 0x46	; 70
     f38:	08 95       	ret
		case 0b00000000: kbdChar='L'; break;
     f3a:	8c e4       	ldi	r24, 0x4C	; 76
     f3c:	08 95       	ret
		case 0b11111111: kbdChar='H'; break;
     f3e:	88 e4       	ldi	r24, 0x48	; 72
     f40:	08 95       	ret
		case 0b00001111: kbdChar='Q'; break;
     f42:	81 e5       	ldi	r24, 0x51	; 81
     f44:	08 95       	ret
		case 0b11110000: kbdChar='P'; break;
     f46:	80 e5       	ldi	r24, 0x50	; 80
     f48:	08 95       	ret
		case 0b11001110: Disp_clear(); break;
     f4a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Disp_clear>
#include <avr/io.h>
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
		case 0b11100111: kbdChar='F'; break;
		case 0b00000000: kbdChar='L'; break;
		case 0b11111111: kbdChar='H'; break;
		case 0b00001111: kbdChar='Q'; break;
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
     f50:	08 95       	ret
		default:		 kbdChar='X'; break;
     f52:	88 e5       	ldi	r24, 0x58	; 88
     f54:	08 95       	ret
{
	char kbdChar = 0;
	switch  (keyData)
	{
		case 0b01110111: kbdChar='1'; break;
		case 0b10110111: kbdChar='2'; break;
     f56:	82 e3       	ldi	r24, 0x32	; 50
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
		default:		 kbdChar='X'; break;
	}
	return kbdChar;
}
     f58:	08 95       	ret

00000f5a <DebounceKBD>:
uint8_t static lastKey = 0;
uint8_t static dbCount = 0;
uint8_t static dbLimit = 5;	//Debounce "depth"
bool debounced = false;

	if (keyData == lastKey)
     f5a:	90 91 5b 05 	lds	r25, 0x055B
     f5e:	89 13       	cpse	r24, r25
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <DebounceKBD+0x22>
	{
		if (dbCount==dbLimit)
     f62:	80 91 5c 05 	lds	r24, 0x055C
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	21 f4       	brne	.+8      	; 0xf72 <DebounceKBD+0x18>
		{
			dbCount=0;
     f6a:	10 92 5c 05 	sts	0x055C, r1
			return debounced = true;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	08 95       	ret
		}
		else
		{
			dbCount++;
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 5c 05 	sts	0x055C, r24
			return debounced = false;
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	08 95       	ret
		}
	}
	else
	{
		lastKey = keyData;
     f7c:	80 93 5b 05 	sts	0x055B, r24
		dbCount=0;
     f80:	10 92 5c 05 	sts	0x055C, r1
		return debounced = false;
     f84:	80 e0       	ldi	r24, 0x00	; 0
	}
	return debounced;
}
     f86:	08 95       	ret

00000f88 <KBDchar>:

char KBDchar (uint8_t charReturn)
{
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	18 2f       	mov	r17, r24
	uint8_t keyData;
	static char keyPrevious = 0, keyPressed = 0;

	DDRC  |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C udgang
     f90:	97 b1       	in	r25, 0x07	; 7
     f92:	9f 60       	ori	r25, 0x0F	; 15
     f94:	97 b9       	out	0x07, r25	; 7
	PORTC &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C lav
     f96:	88 b1       	in	r24, 0x08	; 8
     f98:	18 b8       	out	0x08, r1	; 8
	DDRD  &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D indgang
     f9a:	8a b1       	in	r24, 0x0a	; 10
     f9c:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D pullup
     f9e:	9b b1       	in	r25, 0x0b	; 11
     fa0:	90 6f       	ori	r25, 0xF0	; 240
     fa2:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa4:	87 ec       	ldi	r24, 0xC7	; 199
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <KBDchar+0x20>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <KBDchar+0x26>
     fae:	00 00       	nop
	_delay_us(50);
	keyData = PIND & 0b11110000; // Coloum
     fb0:	c9 b1       	in	r28, 0x09	; 9
     fb2:	c0 7f       	andi	r28, 0xF0	; 240
	
	DDRC  &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C indgang
     fb4:	87 b1       	in	r24, 0x07	; 7
     fb6:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C pullup
     fb8:	98 b1       	in	r25, 0x08	; 8
     fba:	9f 60       	ori	r25, 0x0F	; 15
     fbc:	98 b9       	out	0x08, r25	; 8
	DDRD  |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D udgang
     fbe:	9a b1       	in	r25, 0x0a	; 10
     fc0:	90 6f       	ori	r25, 0xF0	; 240
     fc2:	9a b9       	out	0x0a, r25	; 10
	PORTD &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D lav
     fc4:	8b b1       	in	r24, 0x0b	; 11
     fc6:	1b b8       	out	0x0b, r1	; 11
     fc8:	87 ec       	ldi	r24, 0xC7	; 199
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <KBDchar+0x44>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <KBDchar+0x4a>
     fd2:	00 00       	nop
	_delay_us(50);
	keyData |= (PINC & 0b00001111); // Row
     fd4:	96 b1       	in	r25, 0x06	; 6
     fd6:	9f 70       	andi	r25, 0x0F	; 15
     fd8:	c9 2b       	or	r28, r25
	if (keyData != 0xFF)
     fda:	cf 3f       	cpi	r28, 0xFF	; 255
     fdc:	a9 f0       	breq	.+42     	; 0x1008 <KBDchar+0x80>
	{
		keyPressed = KeyTranslate(keyData);
     fde:	8c 2f       	mov	r24, r28
     fe0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <KeyTranslate>
     fe4:	d8 2f       	mov	r29, r24
     fe6:	80 93 5d 05 	sts	0x055D, r24
		if ((keyPressed != keyPrevious) && DebounceKBD(keyData))
     fea:	80 91 5e 05 	lds	r24, 0x055E
     fee:	d8 17       	cp	r29, r24
     ff0:	79 f0       	breq	.+30     	; 0x1010 <KBDchar+0x88>
     ff2:	8c 2f       	mov	r24, r28
     ff4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <DebounceKBD>
     ff8:	88 23       	and	r24, r24
     ffa:	61 f0       	breq	.+24     	; 0x1014 <KBDchar+0x8c>
		{
			keyPrevious = keyPressed;
     ffc:	d0 93 5e 05 	sts	0x055E, r29
			if (charReturn != 0)
    1000:	11 23       	and	r17, r17
    1002:	49 f0       	breq	.+18     	; 0x1016 <KBDchar+0x8e>
			{
				return keyPressed;
    1004:	cd 2f       	mov	r28, r29
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <KBDchar+0x8e>
		else
		{
			return 0;
		}		
	}
	keyPrevious = 0;
    1008:	10 92 5e 05 	sts	0x055E, r1
	return 0;
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <KBDchar+0x8e>
			}
			else return keyData;
		}
		else
		{
			return 0;
    1010:	c0 e0       	ldi	r28, 0x00	; 0
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <KBDchar+0x8e>
    1014:	c0 e0       	ldi	r28, 0x00	; 0
		}		
	}
	keyPrevious = 0;
	return 0;
    1016:	8c 2f       	mov	r24, r28
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	08 95       	ret

00001020 <SPI_MasterInit>:
#include "Macroes.h"

void SPI_MasterInit()
{
	// Set MOSI and SCK  & SS output, all others input
	DDRB |= (1<<DDB5)|(1<<DDB3)|(1<<DDB2);// PB5 = SCK, PB3 = MOSI, PB2 = SS(No effect when output)
    1020:	84 b1       	in	r24, 0x04	; 4
    1022:	8c 62       	ori	r24, 0x2C	; 44
    1024:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PORTB2); //Pull up resistor on SS input to ensure Master mode
	// Enable SPI, Master, set clock rate fck/64
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    1026:	82 e5       	ldi	r24, 0x52	; 82
    1028:	8c bd       	out	0x2c, r24	; 44
    102a:	08 95       	ret

0000102c <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
    102c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    102e:	0d b4       	in	r0, 0x2d	; 45
    1030:	07 fe       	sbrs	r0, 7
    1032:	fd cf       	rjmp	.-6      	; 0x102e <SPI_MasterTransmit+0x2>
}
    1034:	08 95       	ret

00001036 <RFID_init>:
int state = stateIdle;
unsigned int dataIndex = 0;

void RFID_init()
{
	EICRA |= (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00); // Get interrupt on rising edge
    1036:	e9 e6       	ldi	r30, 0x69	; 105
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 60       	ori	r24, 0x0F	; 15
    103e:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1)|(1<<INT0); // Enable external interrupts
    1040:	8d b3       	in	r24, 0x1d	; 29
    1042:	83 60       	ori	r24, 0x03	; 3
    1044:	8d bb       	out	0x1d, r24	; 29
	DDRD &= ~(1<<DDD3)&~(1<<DDD2); //Set external interrupts INT0 & INT1 as inputs
    1046:	8a b1       	in	r24, 0x0a	; 10
    1048:	83 7f       	andi	r24, 0xF3	; 243
    104a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB2); //Set SS as output. RFID
    104c:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2); //Set SS high (Active low)
    104e:	2a 9a       	sbi	0x05, 2	; 5
    1050:	08 95       	ret

00001052 <Timer_init>:
}

void Timer_init()
{
	TCCR1B = (1<<CS10)|(1<<WGM12);  // Set clock no prescaler(16Mhz) & mode 4 CTC
    1052:	89 e0       	ldi	r24, 0x09	; 9
    1054:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15999;                  // Get interrupt at 15999 = every 1mS
    1058:	8f e7       	ldi	r24, 0x7F	; 127
    105a:	9e e3       	ldi	r25, 0x3E	; 62
    105c:	90 93 89 00 	sts	0x0089, r25
    1060:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A);            // Enable interrupt compare match
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	80 93 6f 00 	sts	0x006F, r24
    106a:	08 95       	ret

0000106c <__vector_18>:
}

ISR(USART_RX_vect)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	2f 93       	push	r18
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	receiveBuffer[dataIndex] = UDR0;
    1080:	80 91 5f 05 	lds	r24, 0x055F
    1084:	90 91 60 05 	lds	r25, 0x0560
    1088:	20 91 c6 00 	lds	r18, 0x00C6
    108c:	fc 01       	movw	r30, r24
    108e:	e6 59       	subi	r30, 0x96	; 150
    1090:	fb 4f       	sbci	r31, 0xFB	; 251
    1092:	20 83       	st	Z, r18
	if (receiveBuffer[dataIndex] == '*')
    1094:	2a 32       	cpi	r18, 0x2A	; 42
    1096:	41 f4       	brne	.+16     	; 0x10a8 <__vector_18+0x3c>
	{
		dataIndex = 0;
    1098:	10 92 60 05 	sts	0x0560, r1
    109c:	10 92 5f 05 	sts	0x055F, r1
		packetReceived = true;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 64 05 	sts	0x0564, r24
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <__vector_18+0x46>
	}
	else dataIndex++;
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	90 93 60 05 	sts	0x0560, r25
    10ae:	80 93 5f 05 	sts	0x055F, r24
}
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_11>:

ISR(TIMER1_COMPA_vect) // Comes every 1ms
{
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
	volatile static uint16_t count1Min = INTERVAL_MIN, count1Sec = INTERVAL_SEC,count9ms = INTERVAL_READKEYS, count10S = INTERVAL_COM_TIMEOUT,count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
	if (chargingActive)
    10d4:	80 91 6e 05 	lds	r24, 0x056E
    10d8:	88 23       	and	r24, r24
    10da:	f1 f0       	breq	.+60     	; 0x1118 <__vector_11+0x52>
	{
		if ((--count1Sec) ==0)  // Do if 1 minus count1Sec = 0
    10dc:	80 91 09 01 	lds	r24, 0x0109
    10e0:	90 91 0a 01 	lds	r25, 0x010A
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	90 93 0a 01 	sts	0x010A, r25
    10ea:	80 93 09 01 	sts	0x0109, r24
    10ee:	89 2b       	or	r24, r25
    10f0:	c9 f4       	brne	.+50     	; 0x1124 <__vector_11+0x5e>
		{
			timeChargedInSeconds++;
    10f2:	80 91 68 04 	lds	r24, 0x0468
    10f6:	90 91 69 04 	lds	r25, 0x0469
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	90 93 69 04 	sts	0x0469, r25
    1100:	80 93 68 04 	sts	0x0468, r24
			count1Sec = INTERVAL_SEC; // 1000
    1104:	88 ee       	ldi	r24, 0xE8	; 232
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	90 93 0a 01 	sts	0x010A, r25
    110c:	80 93 09 01 	sts	0x0109, r24
			takeSample = true;      // Activating this function to be run next time
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 6f 05 	sts	0x056F, r24
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <__vector_11+0x5e>
		}
	}
	else count1Sec = INTERVAL_SEC;
    1118:	88 ee       	ldi	r24, 0xE8	; 232
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	90 93 0a 01 	sts	0x010A, r25
    1120:	80 93 09 01 	sts	0x0109, r24
	
	if (keypadActive)
    1124:	80 91 6a 05 	lds	r24, 0x056A
    1128:	88 23       	and	r24, r24
    112a:	a9 f0       	breq	.+42     	; 0x1156 <__vector_11+0x90>
	{
		if ((--count9ms) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    112c:	80 91 07 01 	lds	r24, 0x0107
    1130:	90 91 08 01 	lds	r25, 0x0108
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	90 93 08 01 	sts	0x0108, r25
    113a:	80 93 07 01 	sts	0x0107, r24
    113e:	89 2b       	or	r24, r25
    1140:	81 f4       	brne	.+32     	; 0x1162 <__vector_11+0x9c>
		{
			count9ms = INTERVAL_READKEYS; //
    1142:	89 e0       	ldi	r24, 0x09	; 9
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	90 93 08 01 	sts	0x0108, r25
    114a:	80 93 07 01 	sts	0x0107, r24
			readKeys = true;      // Set readKeys to 1. Activating this function to be run next time
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 6d 05 	sts	0x056D, r24
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <__vector_11+0x9c>
		}
	}
	else count9ms = INTERVAL_READKEYS;
    1156:	89 e0       	ldi	r24, 0x09	; 9
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	90 93 08 01 	sts	0x0108, r25
    115e:	80 93 07 01 	sts	0x0107, r24
	
	if (startComTimeout)
    1162:	80 91 66 05 	lds	r24, 0x0566
    1166:	88 23       	and	r24, r24
    1168:	a9 f0       	breq	.+42     	; 0x1194 <__vector_11+0xce>
	{
		if ((--count10S) ==0)  // Do if 1 minus count10S = 0 and keypadActive = true
    116a:	80 91 05 01 	lds	r24, 0x0105
    116e:	90 91 06 01 	lds	r25, 0x0106
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	90 93 06 01 	sts	0x0106, r25
    1178:	80 93 05 01 	sts	0x0105, r24
    117c:	89 2b       	or	r24, r25
    117e:	81 f4       	brne	.+32     	; 0x11a0 <__vector_11+0xda>
		{
			count10S = INTERVAL_COM_TIMEOUT; //
    1180:	80 e1       	ldi	r24, 0x10	; 16
    1182:	97 e2       	ldi	r25, 0x27	; 39
    1184:	90 93 06 01 	sts	0x0106, r25
    1188:	80 93 05 01 	sts	0x0105, r24
			comTimeout = true;      // Activating this function to be run next time
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 68 05 	sts	0x0568, r24
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <__vector_11+0xda>
		}
	}
	else count10S = INTERVAL_COM_TIMEOUT;
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	97 e2       	ldi	r25, 0x27	; 39
    1198:	90 93 06 01 	sts	0x0106, r25
    119c:	80 93 05 01 	sts	0x0105, r24

	if (startConnectCarTimeout)
    11a0:	80 91 65 05 	lds	r24, 0x0565
    11a4:	88 23       	and	r24, r24
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <__vector_11+0x10c>
	{
		if ((--count10Sec) ==0)  // Do if 1 minus count10Sec = 0 and keypadActive = true
    11a8:	80 91 03 01 	lds	r24, 0x0103
    11ac:	90 91 04 01 	lds	r25, 0x0104
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	90 93 04 01 	sts	0x0104, r25
    11b6:	80 93 03 01 	sts	0x0103, r24
    11ba:	89 2b       	or	r24, r25
    11bc:	81 f4       	brne	.+32     	; 0x11de <__vector_11+0x118>
		{
			count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT; //
    11be:	80 e1       	ldi	r24, 0x10	; 16
    11c0:	97 e2       	ldi	r25, 0x27	; 39
    11c2:	90 93 04 01 	sts	0x0104, r25
    11c6:	80 93 03 01 	sts	0x0103, r24
			connectCarTimeout = true;      // Activating this function to be run next time
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 67 05 	sts	0x0567, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <__vector_11+0x118>
		}
	}
	else count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
    11d2:	80 e1       	ldi	r24, 0x10	; 16
    11d4:	97 e2       	ldi	r25, 0x27	; 39
    11d6:	90 93 04 01 	sts	0x0104, r25
    11da:	80 93 03 01 	sts	0x0103, r24
	
	if (noConnection)
    11de:	80 91 71 05 	lds	r24, 0x0571
    11e2:	88 23       	and	r24, r24
    11e4:	a9 f0       	breq	.+42     	; 0x1210 <__vector_11+0x14a>
	{
		if ((--count1Min) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    11e6:	80 91 01 01 	lds	r24, 0x0101
    11ea:	90 91 02 01 	lds	r25, 0x0102
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	90 93 02 01 	sts	0x0102, r25
    11f4:	80 93 01 01 	sts	0x0101, r24
    11f8:	89 2b       	or	r24, r25
    11fa:	81 f4       	brne	.+32     	; 0x121c <__vector_11+0x156>
		{
			count1Min = INTERVAL_MIN; //
    11fc:	80 e6       	ldi	r24, 0x60	; 96
    11fe:	9a ee       	ldi	r25, 0xEA	; 234
    1200:	90 93 02 01 	sts	0x0102, r25
    1204:	80 93 01 01 	sts	0x0101, r24
			tryConnect = true;      // Activating this function to be run next time
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 70 05 	sts	0x0570, r24
    120e:	06 c0       	rjmp	.+12     	; 0x121c <__vector_11+0x156>
		}
	}
	else count1Min = INTERVAL_MIN;
    1210:	80 e6       	ldi	r24, 0x60	; 96
    1212:	9a ee       	ldi	r25, 0xEA	; 234
    1214:	90 93 02 01 	sts	0x0102, r25
    1218:	80 93 01 01 	sts	0x0101, r24
}
    121c:	9f 91       	pop	r25
    121e:	8f 91       	pop	r24
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_1>:

ISR(INT0_vect)
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	8f 93       	push	r24
	if (!dataReady) cardPresent = true;
    1236:	80 91 6b 05 	lds	r24, 0x056B
    123a:	81 11       	cpse	r24, r1
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <__vector_1+0x1a>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 6c 05 	sts	0x056C, r24
}
    1244:	8f 91       	pop	r24
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__vector_2>:

ISR(INT1_vect)
{
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	8f 93       	push	r24
	dataReady = true;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 6b 05 	sts	0x056B, r24
}
    1262:	8f 91       	pop	r24
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <main>:

int main(void)
{
	int preState = 99;
	SPI_MasterInit();
    126e:	0e 94 10 08 	call	0x1020	; 0x1020 <SPI_MasterInit>
	UART_Init();
    1272:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_Init>
	RFID_init();
    1276:	0e 94 1b 08 	call	0x1036	; 0x1036 <RFID_init>
	Timer_init();
    127a:	0e 94 29 08 	call	0x1052	; 0x1052 <Timer_init>
	Disp_init();
    127e:	0e 94 5b 05 	call	0xab6	; 0xab6 <Disp_init>
	ADC_init();
    1282:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	sei();
    1286:	78 94       	sei
	UART_Transmit_String("Card test \n");
    1288:	83 e5       	ldi	r24, 0x53	; 83
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
	dataReady = true;
}

int main(void)
{
	int preState = 99;
    1290:	23 e6       	ldi	r18, 0x63	; 99
    1292:	30 e0       	ldi	r19, 0x00	; 0
				{
					UART_Transmit_String("stateDisconnectCar \n");
					Disp_printState(state);
					while (ADC_Sample() > 5);
					preState = state;
					state = stateUploadToDB;
    1294:	c8 e0       	ldi	r28, 0x08	; 8
    1296:	d0 e0       	ldi	r29, 0x00	; 0
					preState = state;
					//state = stateIdle;
				}
				break;
				
				default : state=stateErrorState; break;
    1298:	0f 2e       	mov	r0, r31
    129a:	fe e0       	ldi	r31, 0x0E	; 14
    129c:	cf 2e       	mov	r12, r31
    129e:	d1 2c       	mov	r13, r1
    12a0:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateConnectCar \n");
					Disp_printState(state);
					if (CarConnected())
					{
						preState = state;
						state = stateCharging;
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f5 e0       	ldi	r31, 0x05	; 5
    12a6:	8f 2e       	mov	r8, r31
    12a8:	91 2c       	mov	r9, r1
    12aa:	f0 2d       	mov	r31, r0
						state = stateIdle;
					} 
					else
					{
						preState = state;
						state = stateDBoffline;
    12ac:	0f 2e       	mov	r0, r31
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	6f 2e       	mov	r6, r31
    12b2:	71 2c       	mov	r7, r1
    12b4:	f0 2d       	mov	r31, r0
							state = stateIdle;
						} 
						else
						{
							preState = state;
							state = stateWrongPassword;
    12b6:	68 94       	set
    12b8:	22 24       	eor	r2, r2
    12ba:	22 f8       	bld	r2, 2
    12bc:	31 2c       	mov	r3, r1
				{
					UART_Transmit_String("stateCharging \n");
					Disp_printState(state);
					BeginCharging();
					preState = state;
					state = stateChargingStopped;
    12be:	0f 2e       	mov	r0, r31
    12c0:	f6 e0       	ldi	r31, 0x06	; 6
    12c2:	ef 2e       	mov	r14, r31
    12c4:	f1 2c       	mov	r15, r1
    12c6:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateChargingStopped \n");
					Disp_printState(state);
					if (ADC_Sample() > 5)
					{
						preState = state;
						state = stateDisconnectCar;
    12c8:	0f 2e       	mov	r0, r31
    12ca:	f7 e0       	ldi	r31, 0x07	; 7
    12cc:	4f 2e       	mov	r4, r31
    12ce:	51 2c       	mov	r5, r1
    12d0:	f0 2d       	mov	r31, r0
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
					Disp_printState(state);
					preState = state;
					state = stateTypePassword;
    12d2:	03 e0       	ldi	r16, 0x03	; 3
    12d4:	10 e0       	ldi	r17, 0x00	; 0
						gotUID = false;
					}
					else
					{
						preState = state;
						state = stateCardReadError;
    12d6:	0f 2e       	mov	r0, r31
    12d8:	fc e0       	ldi	r31, 0x0C	; 12
    12da:	af 2e       	mov	r10, r31
    12dc:	b1 2c       	mov	r11, r1
    12de:	f0 2d       	mov	r31, r0
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <main+0x76>
	ADC_init();
	sei();
	UART_Transmit_String("Card test \n");
	while(1)
	{
		if ((state != preState) || (cardPresent && (state == stateIdle)))
    12e2:	9c 01       	movw	r18, r24
    12e4:	80 91 61 05 	lds	r24, 0x0561
    12e8:	90 91 62 05 	lds	r25, 0x0562
    12ec:	82 17       	cp	r24, r18
    12ee:	93 07       	cpc	r25, r19
    12f0:	41 f4       	brne	.+16     	; 0x1302 <main+0x94>
    12f2:	20 91 6c 05 	lds	r18, 0x056C
    12f6:	22 23       	and	r18, r18
    12f8:	a1 f3       	breq	.-24     	; 0x12e2 <main+0x74>
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	91 f1       	breq	.+100    	; 0x1362 <main+0xf4>
    12fe:	9c 01       	movw	r18, r24
    1300:	f1 cf       	rjmp	.-30     	; 0x12e4 <main+0x76>
		{
			switch(state)
    1302:	87 30       	cpi	r24, 0x07	; 7
    1304:	91 05       	cpc	r25, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <main+0x9c>
    1308:	4b c1       	rjmp	.+662    	; 0x15a0 <main+0x332>
    130a:	94 f4       	brge	.+36     	; 0x1330 <main+0xc2>
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <main+0xa6>
    1312:	8d c0       	rjmp	.+282    	; 0x142e <main+0x1c0>
    1314:	34 f4       	brge	.+12     	; 0x1322 <main+0xb4>
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	21 f1       	breq	.+72     	; 0x1362 <main+0xf4>
    131a:	02 97       	sbiw	r24, 0x02	; 2
    131c:	09 f0       	breq	.+2      	; 0x1320 <main+0xb2>
    131e:	9b c1       	rjmp	.+822    	; 0x1656 <main+0x3e8>
    1320:	44 c0       	rjmp	.+136    	; 0x13aa <main+0x13c>
    1322:	85 30       	cpi	r24, 0x05	; 5
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <main+0xbc>
    1328:	06 c1       	rjmp	.+524    	; 0x1536 <main+0x2c8>
    132a:	0c f0       	brlt	.+2      	; 0x132e <main+0xc0>
    132c:	19 c1       	rjmp	.+562    	; 0x1560 <main+0x2f2>
    132e:	d0 c0       	rjmp	.+416    	; 0x14d0 <main+0x262>
    1330:	8a 30       	cpi	r24, 0x0A	; 10
    1332:	91 05       	cpc	r25, r1
    1334:	09 f4       	brne	.+2      	; 0x1338 <main+0xca>
    1336:	b9 c0       	rjmp	.+370    	; 0x14aa <main+0x23c>
    1338:	44 f4       	brge	.+16     	; 0x134a <main+0xdc>
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <main+0xd4>
    1340:	46 c1       	rjmp	.+652    	; 0x15ce <main+0x360>
    1342:	09 97       	sbiw	r24, 0x09	; 9
    1344:	09 f0       	breq	.+2      	; 0x1348 <main+0xda>
    1346:	87 c1       	rjmp	.+782    	; 0x1656 <main+0x3e8>
    1348:	62 c1       	rjmp	.+708    	; 0x160e <main+0x3a0>
    134a:	8d 30       	cpi	r24, 0x0D	; 13
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <main+0xe4>
    1350:	d2 c0       	rjmp	.+420    	; 0x14f6 <main+0x288>
    1352:	8e 30       	cpi	r24, 0x0E	; 14
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <main+0xec>
    1358:	6f c1       	rjmp	.+734    	; 0x1638 <main+0x3ca>
    135a:	0c 97       	sbiw	r24, 0x0c	; 12
    135c:	09 f0       	breq	.+2      	; 0x1360 <main+0xf2>
    135e:	7b c1       	rjmp	.+758    	; 0x1656 <main+0x3e8>
    1360:	53 c0       	rjmp	.+166    	; 0x1408 <main+0x19a>
			{
				case stateIdle :
				{
					UART_Transmit_String("stateIdle \n");
    1362:	8f e5       	ldi	r24, 0x5F	; 95
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    136a:	80 91 61 05 	lds	r24, 0x0561
    136e:	90 91 62 05 	lds	r25, 0x0562
    1372:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					if(cardPresent)
    1376:	80 91 6c 05 	lds	r24, 0x056C
    137a:	88 23       	and	r24, r24
    137c:	89 f0       	breq	.+34     	; 0x13a0 <main+0x132>
					{
						UART_Transmit_String("Card Present \n");
    137e:	8b e6       	ldi	r24, 0x6B	; 107
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
						GetUID();
    1386:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetUID>
						preState = state;
    138a:	20 91 61 05 	lds	r18, 0x0561
    138e:	30 91 62 05 	lds	r19, 0x0562
						state=stateCardSwiped;
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	90 93 62 05 	sts	0x0562, r25
    139a:	80 93 61 05 	sts	0x0561, r24
    139e:	a2 cf       	rjmp	.-188    	; 0x12e4 <main+0x76>
					}
					else preState = state;
    13a0:	20 91 61 05 	lds	r18, 0x0561
    13a4:	30 91 62 05 	lds	r19, 0x0562
    13a8:	9d cf       	rjmp	.-198    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateCardSwiped :
				{
					UART_Transmit_String("stateCardSwiped \n");
    13aa:	8a e7       	ldi	r24, 0x7A	; 122
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					if (gotUID)
    13b2:	80 91 69 05 	lds	r24, 0x0569
    13b6:	88 23       	and	r24, r24
    13b8:	f1 f0       	breq	.+60     	; 0x13f6 <main+0x188>
					{
						UART_Transmit_String("got UID \n");
    13ba:	8c e8       	ldi	r24, 0x8C	; 140
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
						if (CardKnown()) // Find card ID in database
    13c2:	0e 94 23 02 	call	0x446	; 0x446 <CardKnown>
    13c6:	88 23       	and	r24, r24
    13c8:	49 f0       	breq	.+18     	; 0x13dc <main+0x16e>
						{
							preState = state;
    13ca:	20 91 61 05 	lds	r18, 0x0561
    13ce:	30 91 62 05 	lds	r19, 0x0562
							state = stateTypePassword;
    13d2:	10 93 62 05 	sts	0x0562, r17
    13d6:	00 93 61 05 	sts	0x0561, r16
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <main+0x182>
						}
						else
						{
							preState = state;
    13dc:	20 91 61 05 	lds	r18, 0x0561
    13e0:	30 91 62 05 	lds	r19, 0x0562
							state = stateUnknownCard;
    13e4:	8a e0       	ldi	r24, 0x0A	; 10
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	90 93 62 05 	sts	0x0562, r25
    13ec:	80 93 61 05 	sts	0x0561, r24
						}
						gotUID = false;
    13f0:	10 92 69 05 	sts	0x0569, r1
    13f4:	77 cf       	rjmp	.-274    	; 0x12e4 <main+0x76>
					}
					else
					{
						preState = state;
    13f6:	20 91 61 05 	lds	r18, 0x0561
    13fa:	30 91 62 05 	lds	r19, 0x0562
						state = stateCardReadError;
    13fe:	b0 92 62 05 	sts	0x0562, r11
    1402:	a0 92 61 05 	sts	0x0561, r10
    1406:	6e cf       	rjmp	.-292    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateCardReadError:
				{
					UART_Transmit_String("Did not get UID \n");
    1408:	86 e9       	ldi	r24, 0x96	; 150
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    1410:	80 91 61 05 	lds	r24, 0x0561
    1414:	90 91 62 05 	lds	r25, 0x0562
    1418:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					preState = state;
    141c:	20 91 61 05 	lds	r18, 0x0561
    1420:	30 91 62 05 	lds	r19, 0x0562
					state = stateIdle;
    1424:	10 92 62 05 	sts	0x0562, r1
    1428:	10 92 61 05 	sts	0x0561, r1
				}
				break;
    142c:	5b cf       	rjmp	.-330    	; 0x12e4 <main+0x76>
				
				case stateTypePassword:
				{
					UART_Transmit_String("stateTypePassword \n");
    142e:	88 ea       	ldi	r24, 0xA8	; 168
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    1436:	80 91 61 05 	lds	r24, 0x0561
    143a:	90 91 62 05 	lds	r25, 0x0562
    143e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					if (ValidatePassword())// Get typed password and validate in database
    1442:	0e 94 69 02 	call	0x4d2	; 0x4d2 <ValidatePassword>
    1446:	88 23       	and	r24, r24
    1448:	c1 f0       	breq	.+48     	; 0x147a <main+0x20c>
					{
						if (ADC_Sample() < 5)
    144a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    144e:	05 97       	sbiw	r24, 0x05	; 5
    1450:	58 f4       	brcc	.+22     	; 0x1468 <main+0x1fa>
						{
							preState = state;
    1452:	20 91 61 05 	lds	r18, 0x0561
    1456:	30 91 62 05 	lds	r19, 0x0562
							state = stateConnectCar;
    145a:	8d e0       	ldi	r24, 0x0D	; 13
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	90 93 62 05 	sts	0x0562, r25
    1462:	80 93 61 05 	sts	0x0561, r24
    1466:	3e cf       	rjmp	.-388    	; 0x12e4 <main+0x76>
						}
						else
						{
							preState = state;
    1468:	20 91 61 05 	lds	r18, 0x0561
    146c:	30 91 62 05 	lds	r19, 0x0562
							state = stateCharging;
    1470:	90 92 62 05 	sts	0x0562, r9
    1474:	80 92 61 05 	sts	0x0561, r8
    1478:	35 cf       	rjmp	.-406    	; 0x12e4 <main+0x76>
						}
					}
					else
					{
						if (cancelPassword)
    147a:	80 91 63 05 	lds	r24, 0x0563
    147e:	88 23       	and	r24, r24
    1480:	59 f0       	breq	.+22     	; 0x1498 <main+0x22a>
						{
							cancelPassword = false;
    1482:	10 92 63 05 	sts	0x0563, r1
							preState = state;
    1486:	20 91 61 05 	lds	r18, 0x0561
    148a:	30 91 62 05 	lds	r19, 0x0562
							state = stateIdle;
    148e:	10 92 62 05 	sts	0x0562, r1
    1492:	10 92 61 05 	sts	0x0561, r1
    1496:	26 cf       	rjmp	.-436    	; 0x12e4 <main+0x76>
						} 
						else
						{
							preState = state;
    1498:	20 91 61 05 	lds	r18, 0x0561
    149c:	30 91 62 05 	lds	r19, 0x0562
							state = stateWrongPassword;
    14a0:	30 92 62 05 	sts	0x0562, r3
    14a4:	20 92 61 05 	sts	0x0561, r2
    14a8:	1d cf       	rjmp	.-454    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateUnknownCard:
				{
					UART_Transmit_String("stateUnknownCard \n");
    14aa:	8c eb       	ldi	r24, 0xBC	; 188
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    14b2:	80 91 61 05 	lds	r24, 0x0561
    14b6:	90 91 62 05 	lds	r25, 0x0562
    14ba:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					preState = state;
    14be:	20 91 61 05 	lds	r18, 0x0561
    14c2:	30 91 62 05 	lds	r19, 0x0562
					state = stateIdle;
    14c6:	10 92 62 05 	sts	0x0562, r1
    14ca:	10 92 61 05 	sts	0x0561, r1
				}
				break;
    14ce:	0a cf       	rjmp	.-492    	; 0x12e4 <main+0x76>
				
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
    14d0:	8f ec       	ldi	r24, 0xCF	; 207
    14d2:	93 e0       	ldi	r25, 0x03	; 3
    14d4:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    14d8:	80 91 61 05 	lds	r24, 0x0561
    14dc:	90 91 62 05 	lds	r25, 0x0562
    14e0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					preState = state;
    14e4:	20 91 61 05 	lds	r18, 0x0561
    14e8:	30 91 62 05 	lds	r19, 0x0562
					state = stateTypePassword;
    14ec:	10 93 62 05 	sts	0x0562, r17
    14f0:	00 93 61 05 	sts	0x0561, r16
				}
				break;
    14f4:	f7 ce       	rjmp	.-530    	; 0x12e4 <main+0x76>
				
				case stateConnectCar:
				{
					UART_Transmit_String("stateConnectCar \n");
    14f6:	84 ee       	ldi	r24, 0xE4	; 228
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    14fe:	80 91 61 05 	lds	r24, 0x0561
    1502:	90 91 62 05 	lds	r25, 0x0562
    1506:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					if (CarConnected())
    150a:	0e 94 43 03 	call	0x686	; 0x686 <CarConnected>
    150e:	88 23       	and	r24, r24
    1510:	49 f0       	breq	.+18     	; 0x1524 <main+0x2b6>
					{
						preState = state;
    1512:	20 91 61 05 	lds	r18, 0x0561
    1516:	30 91 62 05 	lds	r19, 0x0562
						state = stateCharging;
    151a:	90 92 62 05 	sts	0x0562, r9
    151e:	80 92 61 05 	sts	0x0561, r8
    1522:	e0 ce       	rjmp	.-576    	; 0x12e4 <main+0x76>
					}
					else
					{
						preState = state;
    1524:	20 91 61 05 	lds	r18, 0x0561
    1528:	30 91 62 05 	lds	r19, 0x0562
						state = stateIdle;
    152c:	10 92 62 05 	sts	0x0562, r1
    1530:	10 92 61 05 	sts	0x0561, r1
    1534:	d7 ce       	rjmp	.-594    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateCharging:
				{
					UART_Transmit_String("stateCharging \n");
    1536:	86 ef       	ldi	r24, 0xF6	; 246
    1538:	93 e0       	ldi	r25, 0x03	; 3
    153a:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    153e:	80 91 61 05 	lds	r24, 0x0561
    1542:	90 91 62 05 	lds	r25, 0x0562
    1546:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					BeginCharging();
    154a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <BeginCharging>
					preState = state;
    154e:	20 91 61 05 	lds	r18, 0x0561
    1552:	30 91 62 05 	lds	r19, 0x0562
					state = stateChargingStopped;
    1556:	f0 92 62 05 	sts	0x0562, r15
    155a:	e0 92 61 05 	sts	0x0561, r14
				}
				break;
    155e:	c2 ce       	rjmp	.-636    	; 0x12e4 <main+0x76>
				
				case stateChargingStopped:
				{
					UART_Transmit_String("stateChargingStopped \n");
    1560:	86 e0       	ldi	r24, 0x06	; 6
    1562:	94 e0       	ldi	r25, 0x04	; 4
    1564:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    1568:	80 91 61 05 	lds	r24, 0x0561
    156c:	90 91 62 05 	lds	r25, 0x0562
    1570:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					if (ADC_Sample() > 5)
    1574:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1578:	06 97       	sbiw	r24, 0x06	; 6
    157a:	48 f0       	brcs	.+18     	; 0x158e <main+0x320>
					{
						preState = state;
    157c:	20 91 61 05 	lds	r18, 0x0561
    1580:	30 91 62 05 	lds	r19, 0x0562
						state = stateDisconnectCar;
    1584:	50 92 62 05 	sts	0x0562, r5
    1588:	40 92 61 05 	sts	0x0561, r4
    158c:	ab ce       	rjmp	.-682    	; 0x12e4 <main+0x76>
					} 
					else
					{
						preState = state;
    158e:	20 91 61 05 	lds	r18, 0x0561
    1592:	30 91 62 05 	lds	r19, 0x0562
						state = stateUploadToDB;
    1596:	d0 93 62 05 	sts	0x0562, r29
    159a:	c0 93 61 05 	sts	0x0561, r28
    159e:	a2 ce       	rjmp	.-700    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateDisconnectCar:
				{
					UART_Transmit_String("stateDisconnectCar \n");
    15a0:	8d e1       	ldi	r24, 0x1D	; 29
    15a2:	94 e0       	ldi	r25, 0x04	; 4
    15a4:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    15a8:	80 91 61 05 	lds	r24, 0x0561
    15ac:	90 91 62 05 	lds	r25, 0x0562
    15b0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					while (ADC_Sample() > 5);
    15b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    15b8:	06 97       	sbiw	r24, 0x06	; 6
    15ba:	e0 f7       	brcc	.-8      	; 0x15b4 <main+0x346>
					preState = state;
    15bc:	20 91 61 05 	lds	r18, 0x0561
    15c0:	30 91 62 05 	lds	r19, 0x0562
					state = stateUploadToDB;
    15c4:	d0 93 62 05 	sts	0x0562, r29
    15c8:	c0 93 61 05 	sts	0x0561, r28
				}
				break;
    15cc:	8b ce       	rjmp	.-746    	; 0x12e4 <main+0x76>
				
				case stateUploadToDB:
				{
					UART_Transmit_String("stateUploadToDB \n");
    15ce:	82 e3       	ldi	r24, 0x32	; 50
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    15d6:	80 91 61 05 	lds	r24, 0x0561
    15da:	90 91 62 05 	lds	r25, 0x0562
    15de:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					if (UploadFinishedCharge())
    15e2:	0e 94 de 02 	call	0x5bc	; 0x5bc <UploadFinishedCharge>
    15e6:	88 23       	and	r24, r24
    15e8:	49 f0       	breq	.+18     	; 0x15fc <main+0x38e>
					{
						preState = state;
    15ea:	20 91 61 05 	lds	r18, 0x0561
    15ee:	30 91 62 05 	lds	r19, 0x0562
						state = stateIdle;
    15f2:	10 92 62 05 	sts	0x0562, r1
    15f6:	10 92 61 05 	sts	0x0561, r1
    15fa:	74 ce       	rjmp	.-792    	; 0x12e4 <main+0x76>
					} 
					else
					{
						preState = state;
    15fc:	20 91 61 05 	lds	r18, 0x0561
    1600:	30 91 62 05 	lds	r19, 0x0562
						state = stateDBoffline;
    1604:	70 92 62 05 	sts	0x0562, r7
    1608:	60 92 61 05 	sts	0x0561, r6
    160c:	6b ce       	rjmp	.-810    	; 0x12e4 <main+0x76>
				}
				break;
				
				case stateDBoffline:
				{
					UART_Transmit_String("stateDBoffline \n");
    160e:	84 e4       	ldi	r24, 0x44	; 68
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    1616:	80 91 61 05 	lds	r24, 0x0561
    161a:	90 91 62 05 	lds	r25, 0x0562
    161e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					TryConnection();
    1622:	0e 94 24 03 	call	0x648	; 0x648 <TryConnection>
					preState = state;
    1626:	20 91 61 05 	lds	r18, 0x0561
    162a:	30 91 62 05 	lds	r19, 0x0562
					state = stateIdle;
    162e:	10 92 62 05 	sts	0x0562, r1
    1632:	10 92 61 05 	sts	0x0561, r1
				}
				break;
    1636:	56 ce       	rjmp	.-852    	; 0x12e4 <main+0x76>
				
				case stateErrorState:
				{
					UART_Transmit_String("stateErrorState \n");
    1638:	85 e5       	ldi	r24, 0x55	; 85
    163a:	94 e0       	ldi	r25, 0x04	; 4
    163c:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_Transmit_String>
					Disp_printState(state);
    1640:	80 91 61 05 	lds	r24, 0x0561
    1644:	90 91 62 05 	lds	r25, 0x0562
    1648:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_printState>
					preState = state;
    164c:	20 91 61 05 	lds	r18, 0x0561
    1650:	30 91 62 05 	lds	r19, 0x0562
					//state = stateIdle;
				}
				break;
    1654:	47 ce       	rjmp	.-882    	; 0x12e4 <main+0x76>
				
				default : state=stateErrorState; break;
    1656:	d0 92 62 05 	sts	0x0562, r13
    165a:	c0 92 61 05 	sts	0x0561, r12
    165e:	42 ce       	rjmp	.-892    	; 0x12e4 <main+0x76>

00001660 <UART_Init>:

void UART_Init()
{
	//SREG = (1<<I); //Enable global interrupts // Same as: sei();
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    1660:	88 e9       	ldi	r24, 0x98	; 152
    1662:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = (1<<U2X0);//Double the USART Transmission Speed
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	80 93 c0 00 	sts	0x00C0, r24
	/* Set baud rate */
	//UBRR0H = (unsigned char)(baud>>8);
	UBRR0L = 0x67; // 19200
    1672:	87 e6       	ldi	r24, 0x67	; 103
    1674:	80 93 c4 00 	sts	0x00C4, r24
    1678:	08 95       	ret

0000167a <UART_Transmit>:
}

void UART_Transmit(char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    167a:	e0 ec       	ldi	r30, 0xC0	; 192
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	90 81       	ld	r25, Z
    1680:	95 ff       	sbrs	r25, 5
    1682:	fd cf       	rjmp	.-6      	; 0x167e <UART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1684:	80 93 c6 00 	sts	0x00C6, r24
    1688:	08 95       	ret

0000168a <UART_Transmit_String>:
}

void UART_Transmit_String(char *str)
{
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
    1690:	88 81       	ld	r24, Y
    1692:	88 23       	and	r24, r24
    1694:	31 f0       	breq	.+12     	; 0x16a2 <UART_Transmit_String+0x18>
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

void UART_Transmit_String(char *str)
    1696:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
    1698:	0e 94 3d 0b 	call	0x167a	; 0x167a <UART_Transmit>
	UDR0 = data;
}

void UART_Transmit_String(char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
    169c:	89 91       	ld	r24, Y+
    169e:	81 11       	cpse	r24, r1
    16a0:	fb cf       	rjmp	.-10     	; 0x1698 <UART_Transmit_String+0xe>
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
		str++;                    // Increment pointer
	}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <__subsf3>:
    16a8:	50 58       	subi	r21, 0x80	; 128

000016aa <__addsf3>:
    16aa:	bb 27       	eor	r27, r27
    16ac:	aa 27       	eor	r26, r26
    16ae:	0e d0       	rcall	.+28     	; 0x16cc <__addsf3x>
    16b0:	ac c1       	rjmp	.+856    	; 0x1a0a <__fp_round>
    16b2:	9d d1       	rcall	.+826    	; 0x19ee <__fp_pscA>
    16b4:	30 f0       	brcs	.+12     	; 0x16c2 <__addsf3+0x18>
    16b6:	a2 d1       	rcall	.+836    	; 0x19fc <__fp_pscB>
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__addsf3+0x18>
    16ba:	31 f4       	brne	.+12     	; 0x16c8 <__addsf3+0x1e>
    16bc:	9f 3f       	cpi	r25, 0xFF	; 255
    16be:	11 f4       	brne	.+4      	; 0x16c4 <__addsf3+0x1a>
    16c0:	1e f4       	brtc	.+6      	; 0x16c8 <__addsf3+0x1e>
    16c2:	92 c1       	rjmp	.+804    	; 0x19e8 <__fp_nan>
    16c4:	0e f4       	brtc	.+2      	; 0x16c8 <__addsf3+0x1e>
    16c6:	e0 95       	com	r30
    16c8:	e7 fb       	bst	r30, 7
    16ca:	5f c1       	rjmp	.+702    	; 0x198a <__fp_inf>

000016cc <__addsf3x>:
    16cc:	e9 2f       	mov	r30, r25
    16ce:	ae d1       	rcall	.+860    	; 0x1a2c <__fp_split3>
    16d0:	80 f3       	brcs	.-32     	; 0x16b2 <__addsf3+0x8>
    16d2:	ba 17       	cp	r27, r26
    16d4:	62 07       	cpc	r22, r18
    16d6:	73 07       	cpc	r23, r19
    16d8:	84 07       	cpc	r24, r20
    16da:	95 07       	cpc	r25, r21
    16dc:	18 f0       	brcs	.+6      	; 0x16e4 <__addsf3x+0x18>
    16de:	71 f4       	brne	.+28     	; 0x16fc <__addsf3x+0x30>
    16e0:	9e f5       	brtc	.+102    	; 0x1748 <__addsf3x+0x7c>
    16e2:	dd c1       	rjmp	.+954    	; 0x1a9e <__fp_zero>
    16e4:	0e f4       	brtc	.+2      	; 0x16e8 <__addsf3x+0x1c>
    16e6:	e0 95       	com	r30
    16e8:	0b 2e       	mov	r0, r27
    16ea:	ba 2f       	mov	r27, r26
    16ec:	a0 2d       	mov	r26, r0
    16ee:	0b 01       	movw	r0, r22
    16f0:	b9 01       	movw	r22, r18
    16f2:	90 01       	movw	r18, r0
    16f4:	0c 01       	movw	r0, r24
    16f6:	ca 01       	movw	r24, r20
    16f8:	a0 01       	movw	r20, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	ff 27       	eor	r31, r31
    16fe:	59 1b       	sub	r21, r25
    1700:	99 f0       	breq	.+38     	; 0x1728 <__addsf3x+0x5c>
    1702:	59 3f       	cpi	r21, 0xF9	; 249
    1704:	50 f4       	brcc	.+20     	; 0x171a <__addsf3x+0x4e>
    1706:	50 3e       	cpi	r21, 0xE0	; 224
    1708:	68 f1       	brcs	.+90     	; 0x1764 <__addsf3x+0x98>
    170a:	1a 16       	cp	r1, r26
    170c:	f0 40       	sbci	r31, 0x00	; 0
    170e:	a2 2f       	mov	r26, r18
    1710:	23 2f       	mov	r18, r19
    1712:	34 2f       	mov	r19, r20
    1714:	44 27       	eor	r20, r20
    1716:	58 5f       	subi	r21, 0xF8	; 248
    1718:	f3 cf       	rjmp	.-26     	; 0x1700 <__addsf3x+0x34>
    171a:	46 95       	lsr	r20
    171c:	37 95       	ror	r19
    171e:	27 95       	ror	r18
    1720:	a7 95       	ror	r26
    1722:	f0 40       	sbci	r31, 0x00	; 0
    1724:	53 95       	inc	r21
    1726:	c9 f7       	brne	.-14     	; 0x171a <__addsf3x+0x4e>
    1728:	7e f4       	brtc	.+30     	; 0x1748 <__addsf3x+0x7c>
    172a:	1f 16       	cp	r1, r31
    172c:	ba 0b       	sbc	r27, r26
    172e:	62 0b       	sbc	r22, r18
    1730:	73 0b       	sbc	r23, r19
    1732:	84 0b       	sbc	r24, r20
    1734:	ba f0       	brmi	.+46     	; 0x1764 <__addsf3x+0x98>
    1736:	91 50       	subi	r25, 0x01	; 1
    1738:	a1 f0       	breq	.+40     	; 0x1762 <__addsf3x+0x96>
    173a:	ff 0f       	add	r31, r31
    173c:	bb 1f       	adc	r27, r27
    173e:	66 1f       	adc	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	c2 f7       	brpl	.-16     	; 0x1736 <__addsf3x+0x6a>
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <__addsf3x+0x98>
    1748:	ba 0f       	add	r27, r26
    174a:	62 1f       	adc	r22, r18
    174c:	73 1f       	adc	r23, r19
    174e:	84 1f       	adc	r24, r20
    1750:	48 f4       	brcc	.+18     	; 0x1764 <__addsf3x+0x98>
    1752:	87 95       	ror	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	b7 95       	ror	r27
    175a:	f7 95       	ror	r31
    175c:	9e 3f       	cpi	r25, 0xFE	; 254
    175e:	08 f0       	brcs	.+2      	; 0x1762 <__addsf3x+0x96>
    1760:	b3 cf       	rjmp	.-154    	; 0x16c8 <__addsf3+0x1e>
    1762:	93 95       	inc	r25
    1764:	88 0f       	add	r24, r24
    1766:	08 f0       	brcs	.+2      	; 0x176a <__addsf3x+0x9e>
    1768:	99 27       	eor	r25, r25
    176a:	ee 0f       	add	r30, r30
    176c:	97 95       	ror	r25
    176e:	87 95       	ror	r24
    1770:	08 95       	ret

00001772 <__cmpsf2>:
    1772:	e7 d0       	rcall	.+462    	; 0x1942 <__fp_cmp>
    1774:	08 f4       	brcc	.+2      	; 0x1778 <__cmpsf2+0x6>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	08 95       	ret

0000177a <__divsf3>:
    177a:	0c d0       	rcall	.+24     	; 0x1794 <__divsf3x>
    177c:	46 c1       	rjmp	.+652    	; 0x1a0a <__fp_round>
    177e:	3e d1       	rcall	.+636    	; 0x19fc <__fp_pscB>
    1780:	40 f0       	brcs	.+16     	; 0x1792 <__divsf3+0x18>
    1782:	35 d1       	rcall	.+618    	; 0x19ee <__fp_pscA>
    1784:	30 f0       	brcs	.+12     	; 0x1792 <__divsf3+0x18>
    1786:	21 f4       	brne	.+8      	; 0x1790 <__divsf3+0x16>
    1788:	5f 3f       	cpi	r21, 0xFF	; 255
    178a:	19 f0       	breq	.+6      	; 0x1792 <__divsf3+0x18>
    178c:	fe c0       	rjmp	.+508    	; 0x198a <__fp_inf>
    178e:	51 11       	cpse	r21, r1
    1790:	87 c1       	rjmp	.+782    	; 0x1aa0 <__fp_szero>
    1792:	2a c1       	rjmp	.+596    	; 0x19e8 <__fp_nan>

00001794 <__divsf3x>:
    1794:	4b d1       	rcall	.+662    	; 0x1a2c <__fp_split3>
    1796:	98 f3       	brcs	.-26     	; 0x177e <__divsf3+0x4>

00001798 <__divsf3_pse>:
    1798:	99 23       	and	r25, r25
    179a:	c9 f3       	breq	.-14     	; 0x178e <__divsf3+0x14>
    179c:	55 23       	and	r21, r21
    179e:	b1 f3       	breq	.-20     	; 0x178c <__divsf3+0x12>
    17a0:	95 1b       	sub	r25, r21
    17a2:	55 0b       	sbc	r21, r21
    17a4:	bb 27       	eor	r27, r27
    17a6:	aa 27       	eor	r26, r26
    17a8:	62 17       	cp	r22, r18
    17aa:	73 07       	cpc	r23, r19
    17ac:	84 07       	cpc	r24, r20
    17ae:	38 f0       	brcs	.+14     	; 0x17be <__divsf3_pse+0x26>
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	5f 4f       	sbci	r21, 0xFF	; 255
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	44 1f       	adc	r20, r20
    17ba:	aa 1f       	adc	r26, r26
    17bc:	a9 f3       	breq	.-22     	; 0x17a8 <__divsf3_pse+0x10>
    17be:	33 d0       	rcall	.+102    	; 0x1826 <__divsf3_pse+0x8e>
    17c0:	0e 2e       	mov	r0, r30
    17c2:	3a f0       	brmi	.+14     	; 0x17d2 <__divsf3_pse+0x3a>
    17c4:	e0 e8       	ldi	r30, 0x80	; 128
    17c6:	30 d0       	rcall	.+96     	; 0x1828 <__divsf3_pse+0x90>
    17c8:	91 50       	subi	r25, 0x01	; 1
    17ca:	50 40       	sbci	r21, 0x00	; 0
    17cc:	e6 95       	lsr	r30
    17ce:	00 1c       	adc	r0, r0
    17d0:	ca f7       	brpl	.-14     	; 0x17c4 <__divsf3_pse+0x2c>
    17d2:	29 d0       	rcall	.+82     	; 0x1826 <__divsf3_pse+0x8e>
    17d4:	fe 2f       	mov	r31, r30
    17d6:	27 d0       	rcall	.+78     	; 0x1826 <__divsf3_pse+0x8e>
    17d8:	66 0f       	add	r22, r22
    17da:	77 1f       	adc	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	bb 1f       	adc	r27, r27
    17e0:	26 17       	cp	r18, r22
    17e2:	37 07       	cpc	r19, r23
    17e4:	48 07       	cpc	r20, r24
    17e6:	ab 07       	cpc	r26, r27
    17e8:	b0 e8       	ldi	r27, 0x80	; 128
    17ea:	09 f0       	breq	.+2      	; 0x17ee <__divsf3_pse+0x56>
    17ec:	bb 0b       	sbc	r27, r27
    17ee:	80 2d       	mov	r24, r0
    17f0:	bf 01       	movw	r22, r30
    17f2:	ff 27       	eor	r31, r31
    17f4:	93 58       	subi	r25, 0x83	; 131
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	2a f0       	brmi	.+10     	; 0x1804 <__divsf3_pse+0x6c>
    17fa:	9e 3f       	cpi	r25, 0xFE	; 254
    17fc:	51 05       	cpc	r21, r1
    17fe:	68 f0       	brcs	.+26     	; 0x181a <__divsf3_pse+0x82>
    1800:	c4 c0       	rjmp	.+392    	; 0x198a <__fp_inf>
    1802:	4e c1       	rjmp	.+668    	; 0x1aa0 <__fp_szero>
    1804:	5f 3f       	cpi	r21, 0xFF	; 255
    1806:	ec f3       	brlt	.-6      	; 0x1802 <__divsf3_pse+0x6a>
    1808:	98 3e       	cpi	r25, 0xE8	; 232
    180a:	dc f3       	brlt	.-10     	; 0x1802 <__divsf3_pse+0x6a>
    180c:	86 95       	lsr	r24
    180e:	77 95       	ror	r23
    1810:	67 95       	ror	r22
    1812:	b7 95       	ror	r27
    1814:	f7 95       	ror	r31
    1816:	9f 5f       	subi	r25, 0xFF	; 255
    1818:	c9 f7       	brne	.-14     	; 0x180c <__divsf3_pse+0x74>
    181a:	88 0f       	add	r24, r24
    181c:	91 1d       	adc	r25, r1
    181e:	96 95       	lsr	r25
    1820:	87 95       	ror	r24
    1822:	97 f9       	bld	r25, 7
    1824:	08 95       	ret
    1826:	e1 e0       	ldi	r30, 0x01	; 1
    1828:	66 0f       	add	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	bb 1f       	adc	r27, r27
    1830:	62 17       	cp	r22, r18
    1832:	73 07       	cpc	r23, r19
    1834:	84 07       	cpc	r24, r20
    1836:	ba 07       	cpc	r27, r26
    1838:	20 f0       	brcs	.+8      	; 0x1842 <__divsf3_pse+0xaa>
    183a:	62 1b       	sub	r22, r18
    183c:	73 0b       	sbc	r23, r19
    183e:	84 0b       	sbc	r24, r20
    1840:	ba 0b       	sbc	r27, r26
    1842:	ee 1f       	adc	r30, r30
    1844:	88 f7       	brcc	.-30     	; 0x1828 <__divsf3_pse+0x90>
    1846:	e0 95       	com	r30
    1848:	08 95       	ret

0000184a <__fixunssfsi>:
    184a:	f8 d0       	rcall	.+496    	; 0x1a3c <__fp_splitA>
    184c:	88 f0       	brcs	.+34     	; 0x1870 <__fixunssfsi+0x26>
    184e:	9f 57       	subi	r25, 0x7F	; 127
    1850:	90 f0       	brcs	.+36     	; 0x1876 <__fixunssfsi+0x2c>
    1852:	b9 2f       	mov	r27, r25
    1854:	99 27       	eor	r25, r25
    1856:	b7 51       	subi	r27, 0x17	; 23
    1858:	a0 f0       	brcs	.+40     	; 0x1882 <__fixunssfsi+0x38>
    185a:	d1 f0       	breq	.+52     	; 0x1890 <__fixunssfsi+0x46>
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	1a f0       	brmi	.+6      	; 0x186c <__fixunssfsi+0x22>
    1866:	ba 95       	dec	r27
    1868:	c9 f7       	brne	.-14     	; 0x185c <__fixunssfsi+0x12>
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <__fixunssfsi+0x46>
    186c:	b1 30       	cpi	r27, 0x01	; 1
    186e:	81 f0       	breq	.+32     	; 0x1890 <__fixunssfsi+0x46>
    1870:	16 d1       	rcall	.+556    	; 0x1a9e <__fp_zero>
    1872:	b1 e0       	ldi	r27, 0x01	; 1
    1874:	08 95       	ret
    1876:	13 c1       	rjmp	.+550    	; 0x1a9e <__fp_zero>
    1878:	67 2f       	mov	r22, r23
    187a:	78 2f       	mov	r23, r24
    187c:	88 27       	eor	r24, r24
    187e:	b8 5f       	subi	r27, 0xF8	; 248
    1880:	39 f0       	breq	.+14     	; 0x1890 <__fixunssfsi+0x46>
    1882:	b9 3f       	cpi	r27, 0xF9	; 249
    1884:	cc f3       	brlt	.-14     	; 0x1878 <__fixunssfsi+0x2e>
    1886:	86 95       	lsr	r24
    1888:	77 95       	ror	r23
    188a:	67 95       	ror	r22
    188c:	b3 95       	inc	r27
    188e:	d9 f7       	brne	.-10     	; 0x1886 <__fixunssfsi+0x3c>
    1890:	3e f4       	brtc	.+14     	; 0x18a0 <__fixunssfsi+0x56>
    1892:	90 95       	com	r25
    1894:	80 95       	com	r24
    1896:	70 95       	com	r23
    1898:	61 95       	neg	r22
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8f 4f       	sbci	r24, 0xFF	; 255
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	08 95       	ret

000018a2 <__floatunsisf>:
    18a2:	e8 94       	clt
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <__floatsisf+0x12>

000018a6 <__floatsisf>:
    18a6:	97 fb       	bst	r25, 7
    18a8:	3e f4       	brtc	.+14     	; 0x18b8 <__floatsisf+0x12>
    18aa:	90 95       	com	r25
    18ac:	80 95       	com	r24
    18ae:	70 95       	com	r23
    18b0:	61 95       	neg	r22
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	8f 4f       	sbci	r24, 0xFF	; 255
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	99 23       	and	r25, r25
    18ba:	a9 f0       	breq	.+42     	; 0x18e6 <__floatsisf+0x40>
    18bc:	f9 2f       	mov	r31, r25
    18be:	96 e9       	ldi	r25, 0x96	; 150
    18c0:	bb 27       	eor	r27, r27
    18c2:	93 95       	inc	r25
    18c4:	f6 95       	lsr	r31
    18c6:	87 95       	ror	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f1 11       	cpse	r31, r1
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <__floatsisf+0x1c>
    18d2:	fa f4       	brpl	.+62     	; 0x1912 <__floatsisf+0x6c>
    18d4:	bb 0f       	add	r27, r27
    18d6:	11 f4       	brne	.+4      	; 0x18dc <__floatsisf+0x36>
    18d8:	60 ff       	sbrs	r22, 0
    18da:	1b c0       	rjmp	.+54     	; 0x1912 <__floatsisf+0x6c>
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <__floatsisf+0x6c>
    18e6:	88 23       	and	r24, r24
    18e8:	11 f0       	breq	.+4      	; 0x18ee <__floatsisf+0x48>
    18ea:	96 e9       	ldi	r25, 0x96	; 150
    18ec:	11 c0       	rjmp	.+34     	; 0x1910 <__floatsisf+0x6a>
    18ee:	77 23       	and	r23, r23
    18f0:	21 f0       	breq	.+8      	; 0x18fa <__floatsisf+0x54>
    18f2:	9e e8       	ldi	r25, 0x8E	; 142
    18f4:	87 2f       	mov	r24, r23
    18f6:	76 2f       	mov	r23, r22
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <__floatsisf+0x5e>
    18fa:	66 23       	and	r22, r22
    18fc:	71 f0       	breq	.+28     	; 0x191a <__floatsisf+0x74>
    18fe:	96 e8       	ldi	r25, 0x86	; 134
    1900:	86 2f       	mov	r24, r22
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	2a f0       	brmi	.+10     	; 0x1912 <__floatsisf+0x6c>
    1908:	9a 95       	dec	r25
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	da f7       	brpl	.-10     	; 0x1908 <__floatsisf+0x62>
    1912:	88 0f       	add	r24, r24
    1914:	96 95       	lsr	r25
    1916:	87 95       	ror	r24
    1918:	97 f9       	bld	r25, 7
    191a:	08 95       	ret

0000191c <floor>:
    191c:	a9 d0       	rcall	.+338    	; 0x1a70 <__fp_trunc>
    191e:	80 f0       	brcs	.+32     	; 0x1940 <floor+0x24>
    1920:	9f 37       	cpi	r25, 0x7F	; 127
    1922:	40 f4       	brcc	.+16     	; 0x1934 <floor+0x18>
    1924:	91 11       	cpse	r25, r1
    1926:	0e f0       	brts	.+2      	; 0x192a <floor+0xe>
    1928:	bb c0       	rjmp	.+374    	; 0x1aa0 <__fp_szero>
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	80 e8       	ldi	r24, 0x80	; 128
    1930:	9f eb       	ldi	r25, 0xBF	; 191
    1932:	08 95       	ret
    1934:	26 f4       	brtc	.+8      	; 0x193e <floor+0x22>
    1936:	1b 16       	cp	r1, r27
    1938:	61 1d       	adc	r22, r1
    193a:	71 1d       	adc	r23, r1
    193c:	81 1d       	adc	r24, r1
    193e:	2b c0       	rjmp	.+86     	; 0x1996 <__fp_mintl>
    1940:	45 c0       	rjmp	.+138    	; 0x19cc <__fp_mpack>

00001942 <__fp_cmp>:
    1942:	99 0f       	add	r25, r25
    1944:	00 08       	sbc	r0, r0
    1946:	55 0f       	add	r21, r21
    1948:	aa 0b       	sbc	r26, r26
    194a:	e0 e8       	ldi	r30, 0x80	; 128
    194c:	fe ef       	ldi	r31, 0xFE	; 254
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	e8 07       	cpc	r30, r24
    1954:	f9 07       	cpc	r31, r25
    1956:	c0 f0       	brcs	.+48     	; 0x1988 <__fp_cmp+0x46>
    1958:	12 16       	cp	r1, r18
    195a:	13 06       	cpc	r1, r19
    195c:	e4 07       	cpc	r30, r20
    195e:	f5 07       	cpc	r31, r21
    1960:	98 f0       	brcs	.+38     	; 0x1988 <__fp_cmp+0x46>
    1962:	62 1b       	sub	r22, r18
    1964:	73 0b       	sbc	r23, r19
    1966:	84 0b       	sbc	r24, r20
    1968:	95 0b       	sbc	r25, r21
    196a:	39 f4       	brne	.+14     	; 0x197a <__fp_cmp+0x38>
    196c:	0a 26       	eor	r0, r26
    196e:	61 f0       	breq	.+24     	; 0x1988 <__fp_cmp+0x46>
    1970:	23 2b       	or	r18, r19
    1972:	24 2b       	or	r18, r20
    1974:	25 2b       	or	r18, r21
    1976:	21 f4       	brne	.+8      	; 0x1980 <__fp_cmp+0x3e>
    1978:	08 95       	ret
    197a:	0a 26       	eor	r0, r26
    197c:	09 f4       	brne	.+2      	; 0x1980 <__fp_cmp+0x3e>
    197e:	a1 40       	sbci	r26, 0x01	; 1
    1980:	a6 95       	lsr	r26
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	81 1d       	adc	r24, r1
    1986:	81 1d       	adc	r24, r1
    1988:	08 95       	ret

0000198a <__fp_inf>:
    198a:	97 f9       	bld	r25, 7
    198c:	9f 67       	ori	r25, 0x7F	; 127
    198e:	80 e8       	ldi	r24, 0x80	; 128
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	08 95       	ret

00001996 <__fp_mintl>:
    1996:	88 23       	and	r24, r24
    1998:	71 f4       	brne	.+28     	; 0x19b6 <__fp_mintl+0x20>
    199a:	77 23       	and	r23, r23
    199c:	21 f0       	breq	.+8      	; 0x19a6 <__fp_mintl+0x10>
    199e:	98 50       	subi	r25, 0x08	; 8
    19a0:	87 2b       	or	r24, r23
    19a2:	76 2f       	mov	r23, r22
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <__fp_mintl+0x1e>
    19a6:	66 23       	and	r22, r22
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__fp_mintl+0x18>
    19aa:	99 27       	eor	r25, r25
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <__fp_mintl+0x32>
    19ae:	90 51       	subi	r25, 0x10	; 16
    19b0:	86 2b       	or	r24, r22
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	2a f0       	brmi	.+10     	; 0x19c2 <__fp_mintl+0x2c>
    19b8:	9a 95       	dec	r25
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	da f7       	brpl	.-10     	; 0x19b8 <__fp_mintl+0x22>
    19c2:	88 0f       	add	r24, r24
    19c4:	96 95       	lsr	r25
    19c6:	87 95       	ror	r24
    19c8:	97 f9       	bld	r25, 7
    19ca:	08 95       	ret

000019cc <__fp_mpack>:
    19cc:	9f 3f       	cpi	r25, 0xFF	; 255
    19ce:	31 f0       	breq	.+12     	; 0x19dc <__fp_mpack_finite+0xc>

000019d0 <__fp_mpack_finite>:
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	20 f4       	brcc	.+8      	; 0x19dc <__fp_mpack_finite+0xc>
    19d4:	87 95       	ror	r24
    19d6:	77 95       	ror	r23
    19d8:	67 95       	ror	r22
    19da:	b7 95       	ror	r27
    19dc:	88 0f       	add	r24, r24
    19de:	91 1d       	adc	r25, r1
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	97 f9       	bld	r25, 7
    19e6:	08 95       	ret

000019e8 <__fp_nan>:
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	80 ec       	ldi	r24, 0xC0	; 192
    19ec:	08 95       	ret

000019ee <__fp_pscA>:
    19ee:	00 24       	eor	r0, r0
    19f0:	0a 94       	dec	r0
    19f2:	16 16       	cp	r1, r22
    19f4:	17 06       	cpc	r1, r23
    19f6:	18 06       	cpc	r1, r24
    19f8:	09 06       	cpc	r0, r25
    19fa:	08 95       	ret

000019fc <__fp_pscB>:
    19fc:	00 24       	eor	r0, r0
    19fe:	0a 94       	dec	r0
    1a00:	12 16       	cp	r1, r18
    1a02:	13 06       	cpc	r1, r19
    1a04:	14 06       	cpc	r1, r20
    1a06:	05 06       	cpc	r0, r21
    1a08:	08 95       	ret

00001a0a <__fp_round>:
    1a0a:	09 2e       	mov	r0, r25
    1a0c:	03 94       	inc	r0
    1a0e:	00 0c       	add	r0, r0
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <__fp_round+0xc>
    1a12:	88 23       	and	r24, r24
    1a14:	52 f0       	brmi	.+20     	; 0x1a2a <__fp_round+0x20>
    1a16:	bb 0f       	add	r27, r27
    1a18:	40 f4       	brcc	.+16     	; 0x1a2a <__fp_round+0x20>
    1a1a:	bf 2b       	or	r27, r31
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__fp_round+0x18>
    1a1e:	60 ff       	sbrs	r22, 0
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <__fp_round+0x20>
    1a22:	6f 5f       	subi	r22, 0xFF	; 255
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	08 95       	ret

00001a2c <__fp_split3>:
    1a2c:	57 fd       	sbrc	r21, 7
    1a2e:	90 58       	subi	r25, 0x80	; 128
    1a30:	44 0f       	add	r20, r20
    1a32:	55 1f       	adc	r21, r21
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <__fp_splitA+0x10>
    1a36:	5f 3f       	cpi	r21, 0xFF	; 255
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <__fp_splitA+0x1a>
    1a3a:	47 95       	ror	r20

00001a3c <__fp_splitA>:
    1a3c:	88 0f       	add	r24, r24
    1a3e:	97 fb       	bst	r25, 7
    1a40:	99 1f       	adc	r25, r25
    1a42:	61 f0       	breq	.+24     	; 0x1a5c <__fp_splitA+0x20>
    1a44:	9f 3f       	cpi	r25, 0xFF	; 255
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <__fp_splitA+0x2a>
    1a48:	87 95       	ror	r24
    1a4a:	08 95       	ret
    1a4c:	12 16       	cp	r1, r18
    1a4e:	13 06       	cpc	r1, r19
    1a50:	14 06       	cpc	r1, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	f2 cf       	rjmp	.-28     	; 0x1a3a <__fp_split3+0xe>
    1a56:	46 95       	lsr	r20
    1a58:	f1 df       	rcall	.-30     	; 0x1a3c <__fp_splitA>
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <__fp_splitA+0x30>
    1a5c:	16 16       	cp	r1, r22
    1a5e:	17 06       	cpc	r1, r23
    1a60:	18 06       	cpc	r1, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	f1 cf       	rjmp	.-30     	; 0x1a48 <__fp_splitA+0xc>
    1a66:	86 95       	lsr	r24
    1a68:	71 05       	cpc	r23, r1
    1a6a:	61 05       	cpc	r22, r1
    1a6c:	08 94       	sec
    1a6e:	08 95       	ret

00001a70 <__fp_trunc>:
    1a70:	e5 df       	rcall	.-54     	; 0x1a3c <__fp_splitA>
    1a72:	a0 f0       	brcs	.+40     	; 0x1a9c <__fp_trunc+0x2c>
    1a74:	be e7       	ldi	r27, 0x7E	; 126
    1a76:	b9 17       	cp	r27, r25
    1a78:	88 f4       	brcc	.+34     	; 0x1a9c <__fp_trunc+0x2c>
    1a7a:	bb 27       	eor	r27, r27
    1a7c:	9f 38       	cpi	r25, 0x8F	; 143
    1a7e:	60 f4       	brcc	.+24     	; 0x1a98 <__fp_trunc+0x28>
    1a80:	16 16       	cp	r1, r22
    1a82:	b1 1d       	adc	r27, r1
    1a84:	67 2f       	mov	r22, r23
    1a86:	78 2f       	mov	r23, r24
    1a88:	88 27       	eor	r24, r24
    1a8a:	98 5f       	subi	r25, 0xF8	; 248
    1a8c:	f7 cf       	rjmp	.-18     	; 0x1a7c <__fp_trunc+0xc>
    1a8e:	86 95       	lsr	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b1 1d       	adc	r27, r1
    1a96:	93 95       	inc	r25
    1a98:	96 39       	cpi	r25, 0x96	; 150
    1a9a:	c8 f3       	brcs	.-14     	; 0x1a8e <__fp_trunc+0x1e>
    1a9c:	08 95       	ret

00001a9e <__fp_zero>:
    1a9e:	e8 94       	clt

00001aa0 <__fp_szero>:
    1aa0:	bb 27       	eor	r27, r27
    1aa2:	66 27       	eor	r22, r22
    1aa4:	77 27       	eor	r23, r23
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	08 95       	ret

00001aac <__mulsf3>:
    1aac:	0b d0       	rcall	.+22     	; 0x1ac4 <__mulsf3x>
    1aae:	ad cf       	rjmp	.-166    	; 0x1a0a <__fp_round>
    1ab0:	9e df       	rcall	.-196    	; 0x19ee <__fp_pscA>
    1ab2:	28 f0       	brcs	.+10     	; 0x1abe <__mulsf3+0x12>
    1ab4:	a3 df       	rcall	.-186    	; 0x19fc <__fp_pscB>
    1ab6:	18 f0       	brcs	.+6      	; 0x1abe <__mulsf3+0x12>
    1ab8:	95 23       	and	r25, r21
    1aba:	09 f0       	breq	.+2      	; 0x1abe <__mulsf3+0x12>
    1abc:	66 cf       	rjmp	.-308    	; 0x198a <__fp_inf>
    1abe:	94 cf       	rjmp	.-216    	; 0x19e8 <__fp_nan>
    1ac0:	11 24       	eor	r1, r1
    1ac2:	ee cf       	rjmp	.-36     	; 0x1aa0 <__fp_szero>

00001ac4 <__mulsf3x>:
    1ac4:	b3 df       	rcall	.-154    	; 0x1a2c <__fp_split3>
    1ac6:	a0 f3       	brcs	.-24     	; 0x1ab0 <__mulsf3+0x4>

00001ac8 <__mulsf3_pse>:
    1ac8:	95 9f       	mul	r25, r21
    1aca:	d1 f3       	breq	.-12     	; 0x1ac0 <__mulsf3+0x14>
    1acc:	95 0f       	add	r25, r21
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	55 1f       	adc	r21, r21
    1ad2:	62 9f       	mul	r22, r18
    1ad4:	f0 01       	movw	r30, r0
    1ad6:	72 9f       	mul	r23, r18
    1ad8:	bb 27       	eor	r27, r27
    1ada:	f0 0d       	add	r31, r0
    1adc:	b1 1d       	adc	r27, r1
    1ade:	63 9f       	mul	r22, r19
    1ae0:	aa 27       	eor	r26, r26
    1ae2:	f0 0d       	add	r31, r0
    1ae4:	b1 1d       	adc	r27, r1
    1ae6:	aa 1f       	adc	r26, r26
    1ae8:	64 9f       	mul	r22, r20
    1aea:	66 27       	eor	r22, r22
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	66 1f       	adc	r22, r22
    1af2:	82 9f       	mul	r24, r18
    1af4:	22 27       	eor	r18, r18
    1af6:	b0 0d       	add	r27, r0
    1af8:	a1 1d       	adc	r26, r1
    1afa:	62 1f       	adc	r22, r18
    1afc:	73 9f       	mul	r23, r19
    1afe:	b0 0d       	add	r27, r0
    1b00:	a1 1d       	adc	r26, r1
    1b02:	62 1f       	adc	r22, r18
    1b04:	83 9f       	mul	r24, r19
    1b06:	a0 0d       	add	r26, r0
    1b08:	61 1d       	adc	r22, r1
    1b0a:	22 1f       	adc	r18, r18
    1b0c:	74 9f       	mul	r23, r20
    1b0e:	33 27       	eor	r19, r19
    1b10:	a0 0d       	add	r26, r0
    1b12:	61 1d       	adc	r22, r1
    1b14:	23 1f       	adc	r18, r19
    1b16:	84 9f       	mul	r24, r20
    1b18:	60 0d       	add	r22, r0
    1b1a:	21 1d       	adc	r18, r1
    1b1c:	82 2f       	mov	r24, r18
    1b1e:	76 2f       	mov	r23, r22
    1b20:	6a 2f       	mov	r22, r26
    1b22:	11 24       	eor	r1, r1
    1b24:	9f 57       	subi	r25, 0x7F	; 127
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	8a f0       	brmi	.+34     	; 0x1b4c <__mulsf3_pse+0x84>
    1b2a:	e1 f0       	breq	.+56     	; 0x1b64 <__mulsf3_pse+0x9c>
    1b2c:	88 23       	and	r24, r24
    1b2e:	4a f0       	brmi	.+18     	; 0x1b42 <__mulsf3_pse+0x7a>
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	bb 1f       	adc	r27, r27
    1b36:	66 1f       	adc	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	88 1f       	adc	r24, r24
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	50 40       	sbci	r21, 0x00	; 0
    1b40:	a9 f7       	brne	.-22     	; 0x1b2c <__mulsf3_pse+0x64>
    1b42:	9e 3f       	cpi	r25, 0xFE	; 254
    1b44:	51 05       	cpc	r21, r1
    1b46:	70 f0       	brcs	.+28     	; 0x1b64 <__mulsf3_pse+0x9c>
    1b48:	20 cf       	rjmp	.-448    	; 0x198a <__fp_inf>
    1b4a:	aa cf       	rjmp	.-172    	; 0x1aa0 <__fp_szero>
    1b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4e:	ec f3       	brlt	.-6      	; 0x1b4a <__mulsf3_pse+0x82>
    1b50:	98 3e       	cpi	r25, 0xE8	; 232
    1b52:	dc f3       	brlt	.-10     	; 0x1b4a <__mulsf3_pse+0x82>
    1b54:	86 95       	lsr	r24
    1b56:	77 95       	ror	r23
    1b58:	67 95       	ror	r22
    1b5a:	b7 95       	ror	r27
    1b5c:	f7 95       	ror	r31
    1b5e:	e7 95       	ror	r30
    1b60:	9f 5f       	subi	r25, 0xFF	; 255
    1b62:	c1 f7       	brne	.-16     	; 0x1b54 <__mulsf3_pse+0x8c>
    1b64:	fe 2b       	or	r31, r30
    1b66:	88 0f       	add	r24, r24
    1b68:	91 1d       	adc	r25, r1
    1b6a:	96 95       	lsr	r25
    1b6c:	87 95       	ror	r24
    1b6e:	97 f9       	bld	r25, 7
    1b70:	08 95       	ret

00001b72 <vfprintf>:
    1b72:	a2 e1       	ldi	r26, 0x12	; 18
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ef eb       	ldi	r30, 0xBF	; 191
    1b78:	fd e0       	ldi	r31, 0x0D	; 13
    1b7a:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__prologue_saves__>
    1b7e:	7c 01       	movw	r14, r24
    1b80:	1b 01       	movw	r2, r22
    1b82:	6a 01       	movw	r12, r20
    1b84:	fc 01       	movw	r30, r24
    1b86:	17 82       	std	Z+7, r1	; 0x07
    1b88:	16 82       	std	Z+6, r1	; 0x06
    1b8a:	83 81       	ldd	r24, Z+3	; 0x03
    1b8c:	81 fd       	sbrc	r24, 1
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <vfprintf+0x24>
    1b90:	6b c3       	rjmp	.+1750   	; 0x2268 <vfprintf+0x6f6>
    1b92:	65 01       	movw	r12, r10
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <vfprintf+0x2e>
    1b96:	88 24       	eor	r8, r8
    1b98:	83 94       	inc	r8
    1b9a:	91 2c       	mov	r9, r1
    1b9c:	8c 0e       	add	r8, r28
    1b9e:	9d 1e       	adc	r9, r29
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	f1 01       	movw	r30, r2
    1ba6:	93 fd       	sbrc	r25, 3
    1ba8:	85 91       	lpm	r24, Z+
    1baa:	93 ff       	sbrs	r25, 3
    1bac:	81 91       	ld	r24, Z+
    1bae:	1f 01       	movw	r2, r30
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <vfprintf+0x44>
    1bb4:	55 c3       	rjmp	.+1706   	; 0x2260 <vfprintf+0x6ee>
    1bb6:	85 32       	cpi	r24, 0x25	; 37
    1bb8:	39 f4       	brne	.+14     	; 0x1bc8 <vfprintf+0x56>
    1bba:	93 fd       	sbrc	r25, 3
    1bbc:	85 91       	lpm	r24, Z+
    1bbe:	93 ff       	sbrs	r25, 3
    1bc0:	81 91       	ld	r24, Z+
    1bc2:	1f 01       	movw	r2, r30
    1bc4:	85 32       	cpi	r24, 0x25	; 37
    1bc6:	31 f4       	brne	.+12     	; 0x1bd4 <vfprintf+0x62>
    1bc8:	b7 01       	movw	r22, r14
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1bd0:	56 01       	movw	r10, r12
    1bd2:	df cf       	rjmp	.-66     	; 0x1b92 <vfprintf+0x20>
    1bd4:	71 2c       	mov	r7, r1
    1bd6:	61 2c       	mov	r6, r1
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	20 32       	cpi	r18, 0x20	; 32
    1bdc:	a8 f4       	brcc	.+42     	; 0x1c08 <vfprintf+0x96>
    1bde:	8b 32       	cpi	r24, 0x2B	; 43
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <vfprintf+0x88>
    1be2:	28 f4       	brcc	.+10     	; 0x1bee <vfprintf+0x7c>
    1be4:	80 32       	cpi	r24, 0x20	; 32
    1be6:	51 f0       	breq	.+20     	; 0x1bfc <vfprintf+0x8a>
    1be8:	83 32       	cpi	r24, 0x23	; 35
    1bea:	71 f4       	brne	.+28     	; 0x1c08 <vfprintf+0x96>
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <vfprintf+0x92>
    1bee:	8d 32       	cpi	r24, 0x2D	; 45
    1bf0:	39 f0       	breq	.+14     	; 0x1c00 <vfprintf+0x8e>
    1bf2:	80 33       	cpi	r24, 0x30	; 48
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <vfprintf+0x96>
    1bf6:	21 60       	ori	r18, 0x01	; 1
    1bf8:	28 c0       	rjmp	.+80     	; 0x1c4a <vfprintf+0xd8>
    1bfa:	22 60       	ori	r18, 0x02	; 2
    1bfc:	24 60       	ori	r18, 0x04	; 4
    1bfe:	25 c0       	rjmp	.+74     	; 0x1c4a <vfprintf+0xd8>
    1c00:	28 60       	ori	r18, 0x08	; 8
    1c02:	23 c0       	rjmp	.+70     	; 0x1c4a <vfprintf+0xd8>
    1c04:	20 61       	ori	r18, 0x10	; 16
    1c06:	21 c0       	rjmp	.+66     	; 0x1c4a <vfprintf+0xd8>
    1c08:	27 fd       	sbrc	r18, 7
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <vfprintf+0xe8>
    1c0c:	38 2f       	mov	r19, r24
    1c0e:	30 53       	subi	r19, 0x30	; 48
    1c10:	3a 30       	cpi	r19, 0x0A	; 10
    1c12:	78 f4       	brcc	.+30     	; 0x1c32 <vfprintf+0xc0>
    1c14:	26 ff       	sbrs	r18, 6
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0xb2>
    1c18:	fa e0       	ldi	r31, 0x0A	; 10
    1c1a:	7f 9e       	mul	r7, r31
    1c1c:	30 0d       	add	r19, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	73 2e       	mov	r7, r19
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <vfprintf+0xd8>
    1c24:	4a e0       	ldi	r20, 0x0A	; 10
    1c26:	64 9e       	mul	r6, r20
    1c28:	30 0d       	add	r19, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	63 2e       	mov	r6, r19
    1c2e:	20 62       	ori	r18, 0x20	; 32
    1c30:	0c c0       	rjmp	.+24     	; 0x1c4a <vfprintf+0xd8>
    1c32:	8e 32       	cpi	r24, 0x2E	; 46
    1c34:	21 f4       	brne	.+8      	; 0x1c3e <vfprintf+0xcc>
    1c36:	26 fd       	sbrc	r18, 6
    1c38:	13 c3       	rjmp	.+1574   	; 0x2260 <vfprintf+0x6ee>
    1c3a:	20 64       	ori	r18, 0x40	; 64
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <vfprintf+0xd8>
    1c3e:	8c 36       	cpi	r24, 0x6C	; 108
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <vfprintf+0xd4>
    1c42:	20 68       	ori	r18, 0x80	; 128
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0xd8>
    1c46:	88 36       	cpi	r24, 0x68	; 104
    1c48:	41 f4       	brne	.+16     	; 0x1c5a <vfprintf+0xe8>
    1c4a:	f1 01       	movw	r30, r2
    1c4c:	93 fd       	sbrc	r25, 3
    1c4e:	85 91       	lpm	r24, Z+
    1c50:	93 ff       	sbrs	r25, 3
    1c52:	81 91       	ld	r24, Z+
    1c54:	1f 01       	movw	r2, r30
    1c56:	81 11       	cpse	r24, r1
    1c58:	c0 cf       	rjmp	.-128    	; 0x1bda <vfprintf+0x68>
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	95 54       	subi	r25, 0x45	; 69
    1c5e:	93 30       	cpi	r25, 0x03	; 3
    1c60:	18 f4       	brcc	.+6      	; 0x1c68 <vfprintf+0xf6>
    1c62:	20 61       	ori	r18, 0x10	; 16
    1c64:	80 5e       	subi	r24, 0xE0	; 224
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <vfprintf+0x102>
    1c68:	98 2f       	mov	r25, r24
    1c6a:	95 56       	subi	r25, 0x65	; 101
    1c6c:	93 30       	cpi	r25, 0x03	; 3
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <vfprintf+0x100>
    1c70:	a4 c1       	rjmp	.+840    	; 0x1fba <vfprintf+0x448>
    1c72:	2f 7e       	andi	r18, 0xEF	; 239
    1c74:	26 fd       	sbrc	r18, 6
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <vfprintf+0x10a>
    1c78:	16 e0       	ldi	r17, 0x06	; 6
    1c7a:	71 2e       	mov	r7, r17
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	5b 2e       	mov	r5, r27
    1c80:	52 22       	and	r5, r18
    1c82:	85 36       	cpi	r24, 0x65	; 101
    1c84:	19 f4       	brne	.+6      	; 0x1c8c <vfprintf+0x11a>
    1c86:	f0 e4       	ldi	r31, 0x40	; 64
    1c88:	5f 2a       	or	r5, r31
    1c8a:	07 c0       	rjmp	.+14     	; 0x1c9a <vfprintf+0x128>
    1c8c:	86 36       	cpi	r24, 0x66	; 102
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <vfprintf+0x124>
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	54 2a       	or	r5, r20
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <vfprintf+0x128>
    1c96:	71 10       	cpse	r7, r1
    1c98:	7a 94       	dec	r7
    1c9a:	57 fe       	sbrs	r5, 7
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <vfprintf+0x13a>
    1c9e:	5b e3       	ldi	r21, 0x3B	; 59
    1ca0:	57 15       	cp	r21, r7
    1ca2:	48 f0       	brcs	.+18     	; 0x1cb6 <vfprintf+0x144>
    1ca4:	47 2c       	mov	r4, r7
    1ca6:	43 94       	inc	r4
    1ca8:	27 e0       	ldi	r18, 0x07	; 7
    1caa:	0d c0       	rjmp	.+26     	; 0x1cc6 <vfprintf+0x154>
    1cac:	87 e0       	ldi	r24, 0x07	; 7
    1cae:	87 15       	cp	r24, r7
    1cb0:	30 f0       	brcs	.+12     	; 0x1cbe <vfprintf+0x14c>
    1cb2:	27 2d       	mov	r18, r7
    1cb4:	07 c0       	rjmp	.+14     	; 0x1cc4 <vfprintf+0x152>
    1cb6:	27 e0       	ldi	r18, 0x07	; 7
    1cb8:	ac e3       	ldi	r26, 0x3C	; 60
    1cba:	4a 2e       	mov	r4, r26
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <vfprintf+0x154>
    1cbe:	27 e0       	ldi	r18, 0x07	; 7
    1cc0:	f7 e0       	ldi	r31, 0x07	; 7
    1cc2:	7f 2e       	mov	r7, r31
    1cc4:	41 2c       	mov	r4, r1
    1cc6:	56 01       	movw	r10, r12
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
    1cca:	a9 0e       	add	r10, r25
    1ccc:	b1 1c       	adc	r11, r1
    1cce:	f6 01       	movw	r30, r12
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	04 2d       	mov	r16, r4
    1cda:	a4 01       	movw	r20, r8
    1cdc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__ftoa_engine>
    1ce0:	8c 01       	movw	r16, r24
    1ce2:	49 81       	ldd	r20, Y+1	; 0x01
    1ce4:	4c 87       	std	Y+12, r20	; 0x0c
    1ce6:	40 ff       	sbrs	r20, 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x17c>
    1cea:	43 ff       	sbrs	r20, 3
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <vfprintf+0x18a>
    1cee:	51 fc       	sbrc	r5, 1
    1cf0:	08 c0       	rjmp	.+16     	; 0x1d02 <vfprintf+0x190>
    1cf2:	52 fe       	sbrs	r5, 2
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <vfprintf+0x196>
    1cf6:	e0 e2       	ldi	r30, 0x20	; 32
    1cf8:	de 2e       	mov	r13, r30
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <vfprintf+0x198>
    1cfc:	7d e2       	ldi	r23, 0x2D	; 45
    1cfe:	d7 2e       	mov	r13, r23
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <vfprintf+0x198>
    1d02:	6b e2       	ldi	r22, 0x2B	; 43
    1d04:	d6 2e       	mov	r13, r22
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <vfprintf+0x198>
    1d08:	d1 2c       	mov	r13, r1
    1d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d0c:	8c 70       	andi	r24, 0x0C	; 12
    1d0e:	a1 f1       	breq	.+104    	; 0x1d78 <vfprintf+0x206>
    1d10:	dd 20       	and	r13, r13
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <vfprintf+0x1a6>
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <vfprintf+0x1a8>
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	86 15       	cp	r24, r6
    1d1c:	10 f0       	brcs	.+4      	; 0x1d22 <vfprintf+0x1b0>
    1d1e:	61 2c       	mov	r6, r1
    1d20:	0b c0       	rjmp	.+22     	; 0x1d38 <vfprintf+0x1c6>
    1d22:	68 1a       	sub	r6, r24
    1d24:	53 fc       	sbrc	r5, 3
    1d26:	08 c0       	rjmp	.+16     	; 0x1d38 <vfprintf+0x1c6>
    1d28:	b7 01       	movw	r22, r14
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1d32:	6a 94       	dec	r6
    1d34:	c9 f7       	brne	.-14     	; 0x1d28 <vfprintf+0x1b6>
    1d36:	f3 cf       	rjmp	.-26     	; 0x1d1e <vfprintf+0x1ac>
    1d38:	dd 20       	and	r13, r13
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <vfprintf+0x1d4>
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	8d 2d       	mov	r24, r13
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1d46:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d48:	53 fd       	sbrc	r21, 3
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x1e0>
    1d4c:	0c e6       	ldi	r16, 0x6C	; 108
    1d4e:	10 e0       	ldi	r17, 0x00	; 0
    1d50:	0c c0       	rjmp	.+24     	; 0x1d6a <vfprintf+0x1f8>
    1d52:	08 e6       	ldi	r16, 0x68	; 104
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <vfprintf+0x1f8>
    1d58:	51 10       	cpse	r5, r1
    1d5a:	80 52       	subi	r24, 0x20	; 32
    1d5c:	b7 01       	movw	r22, r14
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1d64:	0f 5f       	subi	r16, 0xFF	; 255
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x1fc>
    1d6a:	80 e1       	ldi	r24, 0x10	; 16
    1d6c:	58 22       	and	r5, r24
    1d6e:	f8 01       	movw	r30, r16
    1d70:	84 91       	lpm	r24, Z
    1d72:	81 11       	cpse	r24, r1
    1d74:	f1 cf       	rjmp	.-30     	; 0x1d58 <vfprintf+0x1e6>
    1d76:	71 c2       	rjmp	.+1250   	; 0x225a <vfprintf+0x6e8>
    1d78:	57 fe       	sbrs	r5, 7
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <vfprintf+0x226>
    1d7c:	40 0e       	add	r4, r16
    1d7e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d80:	44 ff       	sbrs	r20, 4
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <vfprintf+0x21a>
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	81 33       	cpi	r24, 0x31	; 49
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <vfprintf+0x21a>
    1d8a:	4a 94       	dec	r4
    1d8c:	14 14       	cp	r1, r4
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <vfprintf+0x270>
    1d90:	58 e0       	ldi	r21, 0x08	; 8
    1d92:	54 15       	cp	r21, r4
    1d94:	48 f1       	brcs	.+82     	; 0x1de8 <vfprintf+0x276>
    1d96:	2c c0       	rjmp	.+88     	; 0x1df0 <vfprintf+0x27e>
    1d98:	56 fc       	sbrc	r5, 6
    1d9a:	2a c0       	rjmp	.+84     	; 0x1df0 <vfprintf+0x27e>
    1d9c:	87 2d       	mov	r24, r7
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	80 17       	cp	r24, r16
    1da2:	91 07       	cpc	r25, r17
    1da4:	44 f0       	brlt	.+16     	; 0x1db6 <vfprintf+0x244>
    1da6:	0c 3f       	cpi	r16, 0xFC	; 252
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	18 07       	cpc	r17, r24
    1dac:	24 f0       	brlt	.+8      	; 0x1db6 <vfprintf+0x244>
    1dae:	90 e8       	ldi	r25, 0x80	; 128
    1db0:	59 2a       	or	r5, r25
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <vfprintf+0x244>
    1db4:	7a 94       	dec	r7
    1db6:	77 20       	and	r7, r7
    1db8:	49 f0       	breq	.+18     	; 0x1dcc <vfprintf+0x25a>
    1dba:	e2 e0       	ldi	r30, 0x02	; 2
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	ec 0f       	add	r30, r28
    1dc0:	fd 1f       	adc	r31, r29
    1dc2:	e7 0d       	add	r30, r7
    1dc4:	f1 1d       	adc	r31, r1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 33       	cpi	r24, 0x30	; 48
    1dca:	a1 f3       	breq	.-24     	; 0x1db4 <vfprintf+0x242>
    1dcc:	57 fe       	sbrs	r5, 7
    1dce:	10 c0       	rjmp	.+32     	; 0x1df0 <vfprintf+0x27e>
    1dd0:	47 2c       	mov	r4, r7
    1dd2:	43 94       	inc	r4
    1dd4:	87 2d       	mov	r24, r7
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	08 17       	cp	r16, r24
    1dda:	19 07       	cpc	r17, r25
    1ddc:	44 f4       	brge	.+16     	; 0x1dee <vfprintf+0x27c>
    1dde:	70 1a       	sub	r7, r16
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <vfprintf+0x27e>
    1de2:	44 24       	eor	r4, r4
    1de4:	43 94       	inc	r4
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <vfprintf+0x27e>
    1de8:	58 e0       	ldi	r21, 0x08	; 8
    1dea:	45 2e       	mov	r4, r21
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <vfprintf+0x27e>
    1dee:	71 2c       	mov	r7, r1
    1df0:	57 fe       	sbrs	r5, 7
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <vfprintf+0x290>
    1df4:	10 16       	cp	r1, r16
    1df6:	11 06       	cpc	r1, r17
    1df8:	3c f4       	brge	.+14     	; 0x1e08 <vfprintf+0x296>
    1dfa:	98 01       	movw	r18, r16
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <vfprintf+0x29a>
    1e02:	25 e0       	ldi	r18, 0x05	; 5
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <vfprintf+0x29a>
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	dd 20       	and	r13, r13
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <vfprintf+0x2a2>
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	77 20       	and	r7, r7
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <vfprintf+0x2b2>
    1e18:	47 2d       	mov	r20, r7
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	4f 5f       	subi	r20, 0xFF	; 255
    1e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e20:	24 0f       	add	r18, r20
    1e22:	35 1f       	adc	r19, r21
    1e24:	46 2d       	mov	r20, r6
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	24 17       	cp	r18, r20
    1e2a:	35 07       	cpc	r19, r21
    1e2c:	14 f4       	brge	.+4      	; 0x1e32 <vfprintf+0x2c0>
    1e2e:	62 1a       	sub	r6, r18
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <vfprintf+0x2c2>
    1e32:	61 2c       	mov	r6, r1
    1e34:	85 2d       	mov	r24, r5
    1e36:	89 70       	andi	r24, 0x09	; 9
    1e38:	49 f4       	brne	.+18     	; 0x1e4c <vfprintf+0x2da>
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <vfprintf+0x2d6>
    1e3c:	b7 01       	movw	r22, r14
    1e3e:	80 e2       	ldi	r24, 0x20	; 32
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1e46:	6a 94       	dec	r6
    1e48:	61 10       	cpse	r6, r1
    1e4a:	f8 cf       	rjmp	.-16     	; 0x1e3c <vfprintf+0x2ca>
    1e4c:	dd 20       	and	r13, r13
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <vfprintf+0x2e8>
    1e50:	b7 01       	movw	r22, r14
    1e52:	8d 2d       	mov	r24, r13
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1e5a:	53 fc       	sbrc	r5, 3
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <vfprintf+0x2fe>
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <vfprintf+0x2fa>
    1e60:	b7 01       	movw	r22, r14
    1e62:	80 e3       	ldi	r24, 0x30	; 48
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1e6a:	6a 94       	dec	r6
    1e6c:	61 10       	cpse	r6, r1
    1e6e:	f8 cf       	rjmp	.-16     	; 0x1e60 <vfprintf+0x2ee>
    1e70:	57 fe       	sbrs	r5, 7
    1e72:	56 c0       	rjmp	.+172    	; 0x1f20 <vfprintf+0x3ae>
    1e74:	68 01       	movw	r12, r16
    1e76:	17 ff       	sbrs	r17, 7
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <vfprintf+0x30c>
    1e7a:	c1 2c       	mov	r12, r1
    1e7c:	d1 2c       	mov	r13, r1
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	a8 01       	movw	r20, r16
    1e84:	44 19       	sub	r20, r4
    1e86:	51 09       	sbc	r21, r1
    1e88:	5e 87       	std	Y+14, r21	; 0x0e
    1e8a:	4d 87       	std	Y+13, r20	; 0x0d
    1e8c:	28 01       	movw	r4, r16
    1e8e:	4c 18       	sub	r4, r12
    1e90:	5d 08       	sbc	r5, r13
    1e92:	48 0c       	add	r4, r8
    1e94:	59 1c       	adc	r5, r9
    1e96:	87 2d       	mov	r24, r7
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	44 27       	eor	r20, r20
    1e9c:	55 27       	eor	r21, r21
    1e9e:	48 1b       	sub	r20, r24
    1ea0:	59 0b       	sbc	r21, r25
    1ea2:	58 8b       	std	Y+16, r21	; 0x10
    1ea4:	4f 87       	std	Y+15, r20	; 0x0f
    1ea6:	5f ef       	ldi	r21, 0xFF	; 255
    1ea8:	c5 16       	cp	r12, r21
    1eaa:	d5 06       	cpc	r13, r21
    1eac:	49 f4       	brne	.+18     	; 0x1ec0 <vfprintf+0x34e>
    1eae:	b7 01       	movw	r22, r14
    1eb0:	8e e2       	ldi	r24, 0x2E	; 46
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	2a 8b       	std	Y+18, r18	; 0x12
    1eb6:	39 8b       	std	Y+17, r19	; 0x11
    1eb8:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1ebc:	39 89       	ldd	r19, Y+17	; 0x11
    1ebe:	2a 89       	ldd	r18, Y+18	; 0x12
    1ec0:	0c 15       	cp	r16, r12
    1ec2:	1d 05       	cpc	r17, r13
    1ec4:	54 f0       	brlt	.+20     	; 0x1eda <vfprintf+0x368>
    1ec6:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ec8:	5e 85       	ldd	r21, Y+14	; 0x0e
    1eca:	4c 15       	cp	r20, r12
    1ecc:	5d 05       	cpc	r21, r13
    1ece:	2c f4       	brge	.+10     	; 0x1eda <vfprintf+0x368>
    1ed0:	f2 01       	movw	r30, r4
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <vfprintf+0x36a>
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	51 e0       	ldi	r21, 0x01	; 1
    1ede:	c5 1a       	sub	r12, r21
    1ee0:	d1 08       	sbc	r13, r1
    1ee2:	2f 5f       	subi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ee8:	58 89       	ldd	r21, Y+16	; 0x10
    1eea:	c4 16       	cp	r12, r20
    1eec:	d5 06       	cpc	r13, r21
    1eee:	4c f0       	brlt	.+18     	; 0x1f02 <vfprintf+0x390>
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2a 8b       	std	Y+18, r18	; 0x12
    1ef6:	39 8b       	std	Y+17, r19	; 0x11
    1ef8:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1efc:	2a 89       	ldd	r18, Y+18	; 0x12
    1efe:	39 89       	ldd	r19, Y+17	; 0x11
    1f00:	d2 cf       	rjmp	.-92     	; 0x1ea6 <vfprintf+0x334>
    1f02:	c0 16       	cp	r12, r16
    1f04:	d1 06       	cpc	r13, r17
    1f06:	49 f4       	brne	.+18     	; 0x1f1a <vfprintf+0x3a8>
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	96 33       	cpi	r25, 0x36	; 54
    1f0c:	28 f4       	brcc	.+10     	; 0x1f18 <vfprintf+0x3a6>
    1f0e:	95 33       	cpi	r25, 0x35	; 53
    1f10:	21 f4       	brne	.+8      	; 0x1f1a <vfprintf+0x3a8>
    1f12:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f14:	54 fd       	sbrc	r21, 4
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <vfprintf+0x3a8>
    1f18:	81 e3       	ldi	r24, 0x31	; 49
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	4a c0       	rjmp	.+148    	; 0x1fb4 <vfprintf+0x442>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	81 33       	cpi	r24, 0x31	; 49
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <vfprintf+0x3ba>
    1f26:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f28:	4f 7e       	andi	r20, 0xEF	; 239
    1f2a:	4c 87       	std	Y+12, r20	; 0x0c
    1f2c:	b7 01       	movw	r22, r14
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1f34:	71 10       	cpse	r7, r1
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <vfprintf+0x3d0>
    1f38:	54 fe       	sbrs	r5, 4
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <vfprintf+0x3f6>
    1f3c:	85 e4       	ldi	r24, 0x45	; 69
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	15 c0       	rjmp	.+42     	; 0x1f6c <vfprintf+0x3fa>
    1f42:	b7 01       	movw	r22, r14
    1f44:	8e e2       	ldi	r24, 0x2E	; 46
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1f4c:	42 e0       	ldi	r20, 0x02	; 2
    1f4e:	d4 2e       	mov	r13, r20
    1f50:	f4 01       	movw	r30, r8
    1f52:	ed 0d       	add	r30, r13
    1f54:	f1 1d       	adc	r31, r1
    1f56:	d3 94       	inc	r13
    1f58:	b7 01       	movw	r22, r14
    1f5a:	80 81       	ld	r24, Z
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1f62:	7a 94       	dec	r7
    1f64:	a9 f7       	brne	.-22     	; 0x1f50 <vfprintf+0x3de>
    1f66:	e8 cf       	rjmp	.-48     	; 0x1f38 <vfprintf+0x3c6>
    1f68:	85 e6       	ldi	r24, 0x65	; 101
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1f72:	17 fd       	sbrc	r17, 7
    1f74:	06 c0       	rjmp	.+12     	; 0x1f82 <vfprintf+0x410>
    1f76:	01 15       	cp	r16, r1
    1f78:	11 05       	cpc	r17, r1
    1f7a:	41 f4       	brne	.+16     	; 0x1f8c <vfprintf+0x41a>
    1f7c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f7e:	54 ff       	sbrs	r21, 4
    1f80:	05 c0       	rjmp	.+10     	; 0x1f8c <vfprintf+0x41a>
    1f82:	11 95       	neg	r17
    1f84:	01 95       	neg	r16
    1f86:	11 09       	sbc	r17, r1
    1f88:	8d e2       	ldi	r24, 0x2D	; 45
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <vfprintf+0x41c>
    1f8c:	8b e2       	ldi	r24, 0x2B	; 43
    1f8e:	b7 01       	movw	r22, r14
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1f96:	80 e3       	ldi	r24, 0x30	; 48
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <vfprintf+0x42e>
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	0a 50       	subi	r16, 0x0A	; 10
    1f9e:	11 09       	sbc	r17, r1
    1fa0:	0a 30       	cpi	r16, 0x0A	; 10
    1fa2:	11 05       	cpc	r17, r1
    1fa4:	d4 f7       	brge	.-12     	; 0x1f9a <vfprintf+0x428>
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1fae:	b7 01       	movw	r22, r14
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	c0 96       	adiw	r24, 0x30	; 48
    1fb4:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    1fb8:	50 c1       	rjmp	.+672    	; 0x225a <vfprintf+0x6e8>
    1fba:	83 36       	cpi	r24, 0x63	; 99
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <vfprintf+0x458>
    1fbe:	83 37       	cpi	r24, 0x73	; 115
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <vfprintf+0x470>
    1fc2:	83 35       	cpi	r24, 0x53	; 83
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <vfprintf+0x456>
    1fc6:	5e c0       	rjmp	.+188    	; 0x2084 <vfprintf+0x512>
    1fc8:	24 c0       	rjmp	.+72     	; 0x2012 <vfprintf+0x4a0>
    1fca:	56 01       	movw	r10, r12
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	a8 0e       	add	r10, r24
    1fd0:	b1 1c       	adc	r11, r1
    1fd2:	f6 01       	movw	r30, r12
    1fd4:	80 81       	ld	r24, Z
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	cc 24       	eor	r12, r12
    1fda:	c3 94       	inc	r12
    1fdc:	d1 2c       	mov	r13, r1
    1fde:	84 01       	movw	r16, r8
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <vfprintf+0x498>
    1fe2:	56 01       	movw	r10, r12
    1fe4:	f2 e0       	ldi	r31, 0x02	; 2
    1fe6:	af 0e       	add	r10, r31
    1fe8:	b1 1c       	adc	r11, r1
    1fea:	f6 01       	movw	r30, r12
    1fec:	00 81       	ld	r16, Z
    1fee:	11 81       	ldd	r17, Z+1	; 0x01
    1ff0:	26 ff       	sbrs	r18, 6
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <vfprintf+0x488>
    1ff4:	67 2d       	mov	r22, r7
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <vfprintf+0x48c>
    1ffa:	6f ef       	ldi	r22, 0xFF	; 255
    1ffc:	7f ef       	ldi	r23, 0xFF	; 255
    1ffe:	c8 01       	movw	r24, r16
    2000:	2a 8b       	std	Y+18, r18	; 0x12
    2002:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strnlen>
    2006:	6c 01       	movw	r12, r24
    2008:	2a 89       	ldd	r18, Y+18	; 0x12
    200a:	9f e7       	ldi	r25, 0x7F	; 127
    200c:	59 2e       	mov	r5, r25
    200e:	52 22       	and	r5, r18
    2010:	17 c0       	rjmp	.+46     	; 0x2040 <vfprintf+0x4ce>
    2012:	56 01       	movw	r10, r12
    2014:	f2 e0       	ldi	r31, 0x02	; 2
    2016:	af 0e       	add	r10, r31
    2018:	b1 1c       	adc	r11, r1
    201a:	f6 01       	movw	r30, r12
    201c:	00 81       	ld	r16, Z
    201e:	11 81       	ldd	r17, Z+1	; 0x01
    2020:	26 ff       	sbrs	r18, 6
    2022:	03 c0       	rjmp	.+6      	; 0x202a <vfprintf+0x4b8>
    2024:	67 2d       	mov	r22, r7
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <vfprintf+0x4bc>
    202a:	6f ef       	ldi	r22, 0xFF	; 255
    202c:	7f ef       	ldi	r23, 0xFF	; 255
    202e:	c8 01       	movw	r24, r16
    2030:	2a 8b       	std	Y+18, r18	; 0x12
    2032:	0e 94 4a 12 	call	0x2494	; 0x2494 <strnlen_P>
    2036:	6c 01       	movw	r12, r24
    2038:	2a 89       	ldd	r18, Y+18	; 0x12
    203a:	80 e8       	ldi	r24, 0x80	; 128
    203c:	58 2e       	mov	r5, r24
    203e:	52 2a       	or	r5, r18
    2040:	53 fc       	sbrc	r5, 3
    2042:	1c c0       	rjmp	.+56     	; 0x207c <vfprintf+0x50a>
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <vfprintf+0x4e0>
    2046:	b7 01       	movw	r22, r14
    2048:	80 e2       	ldi	r24, 0x20	; 32
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2050:	6a 94       	dec	r6
    2052:	86 2d       	mov	r24, r6
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	c8 16       	cp	r12, r24
    2058:	d9 06       	cpc	r13, r25
    205a:	a8 f3       	brcs	.-22     	; 0x2046 <vfprintf+0x4d4>
    205c:	0f c0       	rjmp	.+30     	; 0x207c <vfprintf+0x50a>
    205e:	f8 01       	movw	r30, r16
    2060:	57 fc       	sbrc	r5, 7
    2062:	85 91       	lpm	r24, Z+
    2064:	57 fe       	sbrs	r5, 7
    2066:	81 91       	ld	r24, Z+
    2068:	8f 01       	movw	r16, r30
    206a:	b7 01       	movw	r22, r14
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2072:	61 10       	cpse	r6, r1
    2074:	6a 94       	dec	r6
    2076:	f1 e0       	ldi	r31, 0x01	; 1
    2078:	cf 1a       	sub	r12, r31
    207a:	d1 08       	sbc	r13, r1
    207c:	c1 14       	cp	r12, r1
    207e:	d1 04       	cpc	r13, r1
    2080:	71 f7       	brne	.-36     	; 0x205e <vfprintf+0x4ec>
    2082:	eb c0       	rjmp	.+470    	; 0x225a <vfprintf+0x6e8>
    2084:	84 36       	cpi	r24, 0x64	; 100
    2086:	11 f0       	breq	.+4      	; 0x208c <vfprintf+0x51a>
    2088:	89 36       	cpi	r24, 0x69	; 105
    208a:	51 f5       	brne	.+84     	; 0x20e0 <vfprintf+0x56e>
    208c:	56 01       	movw	r10, r12
    208e:	27 ff       	sbrs	r18, 7
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <vfprintf+0x532>
    2092:	44 e0       	ldi	r20, 0x04	; 4
    2094:	a4 0e       	add	r10, r20
    2096:	b1 1c       	adc	r11, r1
    2098:	f6 01       	movw	r30, r12
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	0a c0       	rjmp	.+20     	; 0x20b8 <vfprintf+0x546>
    20a4:	f2 e0       	ldi	r31, 0x02	; 2
    20a6:	af 0e       	add	r10, r31
    20a8:	b1 1c       	adc	r11, r1
    20aa:	f6 01       	movw	r30, r12
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	88 27       	eor	r24, r24
    20b2:	77 fd       	sbrc	r23, 7
    20b4:	80 95       	com	r24
    20b6:	98 2f       	mov	r25, r24
    20b8:	12 2f       	mov	r17, r18
    20ba:	1f 76       	andi	r17, 0x6F	; 111
    20bc:	97 ff       	sbrs	r25, 7
    20be:	08 c0       	rjmp	.+16     	; 0x20d0 <vfprintf+0x55e>
    20c0:	90 95       	com	r25
    20c2:	80 95       	com	r24
    20c4:	70 95       	com	r23
    20c6:	61 95       	neg	r22
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	8f 4f       	sbci	r24, 0xFF	; 255
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	10 68       	ori	r17, 0x80	; 128
    20d0:	2a e0       	ldi	r18, 0x0A	; 10
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	a4 01       	movw	r20, r8
    20d6:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__ultoa_invert>
    20da:	d8 2e       	mov	r13, r24
    20dc:	d8 18       	sub	r13, r8
    20de:	40 c0       	rjmp	.+128    	; 0x2160 <vfprintf+0x5ee>
    20e0:	12 2f       	mov	r17, r18
    20e2:	85 37       	cpi	r24, 0x75	; 117
    20e4:	21 f4       	brne	.+8      	; 0x20ee <vfprintf+0x57c>
    20e6:	1f 7e       	andi	r17, 0xEF	; 239
    20e8:	2a e0       	ldi	r18, 0x0A	; 10
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	1f c0       	rjmp	.+62     	; 0x212c <vfprintf+0x5ba>
    20ee:	19 7f       	andi	r17, 0xF9	; 249
    20f0:	8f 36       	cpi	r24, 0x6F	; 111
    20f2:	a1 f0       	breq	.+40     	; 0x211c <vfprintf+0x5aa>
    20f4:	20 f4       	brcc	.+8      	; 0x20fe <vfprintf+0x58c>
    20f6:	88 35       	cpi	r24, 0x58	; 88
    20f8:	09 f0       	breq	.+2      	; 0x20fc <vfprintf+0x58a>
    20fa:	b2 c0       	rjmp	.+356    	; 0x2260 <vfprintf+0x6ee>
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <vfprintf+0x5a2>
    20fe:	80 37       	cpi	r24, 0x70	; 112
    2100:	21 f0       	breq	.+8      	; 0x210a <vfprintf+0x598>
    2102:	88 37       	cpi	r24, 0x78	; 120
    2104:	09 f0       	breq	.+2      	; 0x2108 <vfprintf+0x596>
    2106:	ac c0       	rjmp	.+344    	; 0x2260 <vfprintf+0x6ee>
    2108:	01 c0       	rjmp	.+2      	; 0x210c <vfprintf+0x59a>
    210a:	10 61       	ori	r17, 0x10	; 16
    210c:	14 ff       	sbrs	r17, 4
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <vfprintf+0x5b0>
    2110:	14 60       	ori	r17, 0x04	; 4
    2112:	07 c0       	rjmp	.+14     	; 0x2122 <vfprintf+0x5b0>
    2114:	24 ff       	sbrs	r18, 4
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <vfprintf+0x5b6>
    2118:	16 60       	ori	r17, 0x06	; 6
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <vfprintf+0x5b6>
    211c:	28 e0       	ldi	r18, 0x08	; 8
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	05 c0       	rjmp	.+10     	; 0x212c <vfprintf+0x5ba>
    2122:	20 e1       	ldi	r18, 0x10	; 16
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <vfprintf+0x5ba>
    2128:	20 e1       	ldi	r18, 0x10	; 16
    212a:	32 e0       	ldi	r19, 0x02	; 2
    212c:	56 01       	movw	r10, r12
    212e:	17 ff       	sbrs	r17, 7
    2130:	09 c0       	rjmp	.+18     	; 0x2144 <vfprintf+0x5d2>
    2132:	f4 e0       	ldi	r31, 0x04	; 4
    2134:	af 0e       	add	r10, r31
    2136:	b1 1c       	adc	r11, r1
    2138:	f6 01       	movw	r30, r12
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	08 c0       	rjmp	.+16     	; 0x2154 <vfprintf+0x5e2>
    2144:	f2 e0       	ldi	r31, 0x02	; 2
    2146:	af 0e       	add	r10, r31
    2148:	b1 1c       	adc	r11, r1
    214a:	f6 01       	movw	r30, r12
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a4 01       	movw	r20, r8
    2156:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__ultoa_invert>
    215a:	d8 2e       	mov	r13, r24
    215c:	d8 18       	sub	r13, r8
    215e:	1f 77       	andi	r17, 0x7F	; 127
    2160:	16 ff       	sbrs	r17, 6
    2162:	0b c0       	rjmp	.+22     	; 0x217a <vfprintf+0x608>
    2164:	21 2f       	mov	r18, r17
    2166:	2e 7f       	andi	r18, 0xFE	; 254
    2168:	d7 14       	cp	r13, r7
    216a:	50 f4       	brcc	.+20     	; 0x2180 <vfprintf+0x60e>
    216c:	14 ff       	sbrs	r17, 4
    216e:	0a c0       	rjmp	.+20     	; 0x2184 <vfprintf+0x612>
    2170:	12 fd       	sbrc	r17, 2
    2172:	08 c0       	rjmp	.+16     	; 0x2184 <vfprintf+0x612>
    2174:	21 2f       	mov	r18, r17
    2176:	2e 7e       	andi	r18, 0xEE	; 238
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <vfprintf+0x612>
    217a:	0d 2d       	mov	r16, r13
    217c:	21 2f       	mov	r18, r17
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <vfprintf+0x614>
    2180:	0d 2d       	mov	r16, r13
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <vfprintf+0x614>
    2184:	07 2d       	mov	r16, r7
    2186:	24 ff       	sbrs	r18, 4
    2188:	0c c0       	rjmp	.+24     	; 0x21a2 <vfprintf+0x630>
    218a:	fe 01       	movw	r30, r28
    218c:	ed 0d       	add	r30, r13
    218e:	f1 1d       	adc	r31, r1
    2190:	80 81       	ld	r24, Z
    2192:	80 33       	cpi	r24, 0x30	; 48
    2194:	11 f4       	brne	.+4      	; 0x219a <vfprintf+0x628>
    2196:	29 7e       	andi	r18, 0xE9	; 233
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <vfprintf+0x638>
    219a:	22 ff       	sbrs	r18, 2
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <vfprintf+0x636>
    219e:	0e 5f       	subi	r16, 0xFE	; 254
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <vfprintf+0x638>
    21a2:	82 2f       	mov	r24, r18
    21a4:	86 78       	andi	r24, 0x86	; 134
    21a6:	09 f0       	breq	.+2      	; 0x21aa <vfprintf+0x638>
    21a8:	0f 5f       	subi	r16, 0xFF	; 255
    21aa:	23 fd       	sbrc	r18, 3
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <vfprintf+0x664>
    21ae:	20 ff       	sbrs	r18, 0
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <vfprintf+0x65e>
    21b2:	7d 2c       	mov	r7, r13
    21b4:	06 15       	cp	r16, r6
    21b6:	60 f4       	brcc	.+24     	; 0x21d0 <vfprintf+0x65e>
    21b8:	76 0c       	add	r7, r6
    21ba:	70 1a       	sub	r7, r16
    21bc:	06 2d       	mov	r16, r6
    21be:	08 c0       	rjmp	.+16     	; 0x21d0 <vfprintf+0x65e>
    21c0:	b7 01       	movw	r22, r14
    21c2:	80 e2       	ldi	r24, 0x20	; 32
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	2a 8b       	std	Y+18, r18	; 0x12
    21c8:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    21cc:	0f 5f       	subi	r16, 0xFF	; 255
    21ce:	2a 89       	ldd	r18, Y+18	; 0x12
    21d0:	06 15       	cp	r16, r6
    21d2:	b0 f3       	brcs	.-20     	; 0x21c0 <vfprintf+0x64e>
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <vfprintf+0x66c>
    21d6:	06 15       	cp	r16, r6
    21d8:	10 f4       	brcc	.+4      	; 0x21de <vfprintf+0x66c>
    21da:	60 1a       	sub	r6, r16
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <vfprintf+0x66e>
    21de:	61 2c       	mov	r6, r1
    21e0:	24 ff       	sbrs	r18, 4
    21e2:	12 c0       	rjmp	.+36     	; 0x2208 <vfprintf+0x696>
    21e4:	b7 01       	movw	r22, r14
    21e6:	80 e3       	ldi	r24, 0x30	; 48
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	2a 8b       	std	Y+18, r18	; 0x12
    21ec:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    21f0:	2a 89       	ldd	r18, Y+18	; 0x12
    21f2:	22 ff       	sbrs	r18, 2
    21f4:	1e c0       	rjmp	.+60     	; 0x2232 <vfprintf+0x6c0>
    21f6:	21 ff       	sbrs	r18, 1
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <vfprintf+0x68e>
    21fa:	88 e5       	ldi	r24, 0x58	; 88
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <vfprintf+0x692>
    2200:	88 e7       	ldi	r24, 0x78	; 120
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	b7 01       	movw	r22, r14
    2206:	0c c0       	rjmp	.+24     	; 0x2220 <vfprintf+0x6ae>
    2208:	82 2f       	mov	r24, r18
    220a:	86 78       	andi	r24, 0x86	; 134
    220c:	91 f0       	breq	.+36     	; 0x2232 <vfprintf+0x6c0>
    220e:	21 fd       	sbrc	r18, 1
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <vfprintf+0x6a4>
    2212:	80 e2       	ldi	r24, 0x20	; 32
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <vfprintf+0x6a6>
    2216:	8b e2       	ldi	r24, 0x2B	; 43
    2218:	27 fd       	sbrc	r18, 7
    221a:	8d e2       	ldi	r24, 0x2D	; 45
    221c:	b7 01       	movw	r22, r14
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <vfprintf+0x6c0>
    2226:	b7 01       	movw	r22, r14
    2228:	80 e3       	ldi	r24, 0x30	; 48
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2230:	7a 94       	dec	r7
    2232:	d7 14       	cp	r13, r7
    2234:	c0 f3       	brcs	.-16     	; 0x2226 <vfprintf+0x6b4>
    2236:	da 94       	dec	r13
    2238:	f4 01       	movw	r30, r8
    223a:	ed 0d       	add	r30, r13
    223c:	f1 1d       	adc	r31, r1
    223e:	b7 01       	movw	r22, r14
    2240:	80 81       	ld	r24, Z
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2248:	d1 10       	cpse	r13, r1
    224a:	f5 cf       	rjmp	.-22     	; 0x2236 <vfprintf+0x6c4>
    224c:	06 c0       	rjmp	.+12     	; 0x225a <vfprintf+0x6e8>
    224e:	b7 01       	movw	r22, r14
    2250:	80 e2       	ldi	r24, 0x20	; 32
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 88 12 	call	0x2510	; 0x2510 <fputc>
    2258:	6a 94       	dec	r6
    225a:	61 10       	cpse	r6, r1
    225c:	f8 cf       	rjmp	.-16     	; 0x224e <vfprintf+0x6dc>
    225e:	99 cc       	rjmp	.-1742   	; 0x1b92 <vfprintf+0x20>
    2260:	f7 01       	movw	r30, r14
    2262:	26 81       	ldd	r18, Z+6	; 0x06
    2264:	37 81       	ldd	r19, Z+7	; 0x07
    2266:	02 c0       	rjmp	.+4      	; 0x226c <vfprintf+0x6fa>
    2268:	2f ef       	ldi	r18, 0xFF	; 255
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	c9 01       	movw	r24, r18
    226e:	62 96       	adiw	r28, 0x12	; 18
    2270:	e2 e1       	ldi	r30, 0x12	; 18
    2272:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__epilogue_restores__>

00002276 <__prologue_saves__>:
    2276:	2f 92       	push	r2
    2278:	3f 92       	push	r3
    227a:	4f 92       	push	r4
    227c:	5f 92       	push	r5
    227e:	6f 92       	push	r6
    2280:	7f 92       	push	r7
    2282:	8f 92       	push	r8
    2284:	9f 92       	push	r9
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	ca 1b       	sub	r28, r26
    22a0:	db 0b       	sbc	r29, r27
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	09 94       	ijmp

000022ae <__epilogue_restores__>:
    22ae:	2a 88       	ldd	r2, Y+18	; 0x12
    22b0:	39 88       	ldd	r3, Y+17	; 0x11
    22b2:	48 88       	ldd	r4, Y+16	; 0x10
    22b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    22b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    22bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    22be:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c0:	b9 84       	ldd	r11, Y+9	; 0x09
    22c2:	c8 84       	ldd	r12, Y+8	; 0x08
    22c4:	df 80       	ldd	r13, Y+7	; 0x07
    22c6:	ee 80       	ldd	r14, Y+6	; 0x06
    22c8:	fd 80       	ldd	r15, Y+5	; 0x05
    22ca:	0c 81       	ldd	r16, Y+4	; 0x04
    22cc:	1b 81       	ldd	r17, Y+3	; 0x03
    22ce:	aa 81       	ldd	r26, Y+2	; 0x02
    22d0:	b9 81       	ldd	r27, Y+1	; 0x01
    22d2:	ce 0f       	add	r28, r30
    22d4:	d1 1d       	adc	r29, r1
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	ed 01       	movw	r28, r26
    22e2:	08 95       	ret

000022e4 <__ftoa_engine>:
    22e4:	28 30       	cpi	r18, 0x08	; 8
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <__ftoa_engine+0x6>
    22e8:	27 e0       	ldi	r18, 0x07	; 7
    22ea:	33 27       	eor	r19, r19
    22ec:	da 01       	movw	r26, r20
    22ee:	99 0f       	add	r25, r25
    22f0:	31 1d       	adc	r19, r1
    22f2:	87 fd       	sbrc	r24, 7
    22f4:	91 60       	ori	r25, 0x01	; 1
    22f6:	00 96       	adiw	r24, 0x00	; 0
    22f8:	61 05       	cpc	r22, r1
    22fa:	71 05       	cpc	r23, r1
    22fc:	39 f4       	brne	.+14     	; 0x230c <__ftoa_engine+0x28>
    22fe:	32 60       	ori	r19, 0x02	; 2
    2300:	2e 5f       	subi	r18, 0xFE	; 254
    2302:	3d 93       	st	X+, r19
    2304:	30 e3       	ldi	r19, 0x30	; 48
    2306:	2a 95       	dec	r18
    2308:	e1 f7       	brne	.-8      	; 0x2302 <__ftoa_engine+0x1e>
    230a:	08 95       	ret
    230c:	9f 3f       	cpi	r25, 0xFF	; 255
    230e:	30 f0       	brcs	.+12     	; 0x231c <__ftoa_engine+0x38>
    2310:	80 38       	cpi	r24, 0x80	; 128
    2312:	71 05       	cpc	r23, r1
    2314:	61 05       	cpc	r22, r1
    2316:	09 f0       	breq	.+2      	; 0x231a <__ftoa_engine+0x36>
    2318:	3c 5f       	subi	r19, 0xFC	; 252
    231a:	3c 5f       	subi	r19, 0xFC	; 252
    231c:	3d 93       	st	X+, r19
    231e:	91 30       	cpi	r25, 0x01	; 1
    2320:	08 f0       	brcs	.+2      	; 0x2324 <__ftoa_engine+0x40>
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	91 1d       	adc	r25, r1
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	1f 93       	push	r17
    232c:	0f 93       	push	r16
    232e:	ff 92       	push	r15
    2330:	ef 92       	push	r14
    2332:	19 2f       	mov	r17, r25
    2334:	98 7f       	andi	r25, 0xF8	; 248
    2336:	96 95       	lsr	r25
    2338:	e9 2f       	mov	r30, r25
    233a:	96 95       	lsr	r25
    233c:	96 95       	lsr	r25
    233e:	e9 0f       	add	r30, r25
    2340:	ff 27       	eor	r31, r31
    2342:	e6 53       	subi	r30, 0x36	; 54
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	99 27       	eor	r25, r25
    2348:	33 27       	eor	r19, r19
    234a:	ee 24       	eor	r14, r14
    234c:	ff 24       	eor	r15, r15
    234e:	a7 01       	movw	r20, r14
    2350:	e7 01       	movw	r28, r14
    2352:	05 90       	lpm	r0, Z+
    2354:	08 94       	sec
    2356:	07 94       	ror	r0
    2358:	28 f4       	brcc	.+10     	; 0x2364 <__ftoa_engine+0x80>
    235a:	36 0f       	add	r19, r22
    235c:	e7 1e       	adc	r14, r23
    235e:	f8 1e       	adc	r15, r24
    2360:	49 1f       	adc	r20, r25
    2362:	51 1d       	adc	r21, r1
    2364:	66 0f       	add	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	06 94       	lsr	r0
    236e:	a1 f7       	brne	.-24     	; 0x2358 <__ftoa_engine+0x74>
    2370:	05 90       	lpm	r0, Z+
    2372:	07 94       	ror	r0
    2374:	28 f4       	brcc	.+10     	; 0x2380 <__ftoa_engine+0x9c>
    2376:	e7 0e       	add	r14, r23
    2378:	f8 1e       	adc	r15, r24
    237a:	49 1f       	adc	r20, r25
    237c:	56 1f       	adc	r21, r22
    237e:	c1 1d       	adc	r28, r1
    2380:	77 0f       	add	r23, r23
    2382:	88 1f       	adc	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	66 1f       	adc	r22, r22
    2388:	06 94       	lsr	r0
    238a:	a1 f7       	brne	.-24     	; 0x2374 <__ftoa_engine+0x90>
    238c:	05 90       	lpm	r0, Z+
    238e:	07 94       	ror	r0
    2390:	28 f4       	brcc	.+10     	; 0x239c <__ftoa_engine+0xb8>
    2392:	f8 0e       	add	r15, r24
    2394:	49 1f       	adc	r20, r25
    2396:	56 1f       	adc	r21, r22
    2398:	c7 1f       	adc	r28, r23
    239a:	d1 1d       	adc	r29, r1
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	66 1f       	adc	r22, r22
    23a2:	77 1f       	adc	r23, r23
    23a4:	06 94       	lsr	r0
    23a6:	a1 f7       	brne	.-24     	; 0x2390 <__ftoa_engine+0xac>
    23a8:	05 90       	lpm	r0, Z+
    23aa:	07 94       	ror	r0
    23ac:	20 f4       	brcc	.+8      	; 0x23b6 <__ftoa_engine+0xd2>
    23ae:	49 0f       	add	r20, r25
    23b0:	56 1f       	adc	r21, r22
    23b2:	c7 1f       	adc	r28, r23
    23b4:	d8 1f       	adc	r29, r24
    23b6:	99 0f       	add	r25, r25
    23b8:	66 1f       	adc	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	88 1f       	adc	r24, r24
    23be:	06 94       	lsr	r0
    23c0:	a9 f7       	brne	.-22     	; 0x23ac <__ftoa_engine+0xc8>
    23c2:	84 91       	lpm	r24, Z
    23c4:	10 95       	com	r17
    23c6:	17 70       	andi	r17, 0x07	; 7
    23c8:	41 f0       	breq	.+16     	; 0x23da <__ftoa_engine+0xf6>
    23ca:	d6 95       	lsr	r29
    23cc:	c7 95       	ror	r28
    23ce:	57 95       	ror	r21
    23d0:	47 95       	ror	r20
    23d2:	f7 94       	ror	r15
    23d4:	e7 94       	ror	r14
    23d6:	1a 95       	dec	r17
    23d8:	c1 f7       	brne	.-16     	; 0x23ca <__ftoa_engine+0xe6>
    23da:	e0 e7       	ldi	r30, 0x70	; 112
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	68 94       	set
    23e0:	15 90       	lpm	r1, Z+
    23e2:	15 91       	lpm	r17, Z+
    23e4:	35 91       	lpm	r19, Z+
    23e6:	65 91       	lpm	r22, Z+
    23e8:	95 91       	lpm	r25, Z+
    23ea:	05 90       	lpm	r0, Z+
    23ec:	7f e2       	ldi	r23, 0x2F	; 47
    23ee:	73 95       	inc	r23
    23f0:	e1 18       	sub	r14, r1
    23f2:	f1 0a       	sbc	r15, r17
    23f4:	43 0b       	sbc	r20, r19
    23f6:	56 0b       	sbc	r21, r22
    23f8:	c9 0b       	sbc	r28, r25
    23fa:	d0 09       	sbc	r29, r0
    23fc:	c0 f7       	brcc	.-16     	; 0x23ee <__ftoa_engine+0x10a>
    23fe:	e1 0c       	add	r14, r1
    2400:	f1 1e       	adc	r15, r17
    2402:	43 1f       	adc	r20, r19
    2404:	56 1f       	adc	r21, r22
    2406:	c9 1f       	adc	r28, r25
    2408:	d0 1d       	adc	r29, r0
    240a:	7e f4       	brtc	.+30     	; 0x242a <__ftoa_engine+0x146>
    240c:	70 33       	cpi	r23, 0x30	; 48
    240e:	11 f4       	brne	.+4      	; 0x2414 <__ftoa_engine+0x130>
    2410:	8a 95       	dec	r24
    2412:	e6 cf       	rjmp	.-52     	; 0x23e0 <__ftoa_engine+0xfc>
    2414:	e8 94       	clt
    2416:	01 50       	subi	r16, 0x01	; 1
    2418:	30 f0       	brcs	.+12     	; 0x2426 <__ftoa_engine+0x142>
    241a:	08 0f       	add	r16, r24
    241c:	0a f4       	brpl	.+2      	; 0x2420 <__ftoa_engine+0x13c>
    241e:	00 27       	eor	r16, r16
    2420:	02 17       	cp	r16, r18
    2422:	08 f4       	brcc	.+2      	; 0x2426 <__ftoa_engine+0x142>
    2424:	20 2f       	mov	r18, r16
    2426:	23 95       	inc	r18
    2428:	02 2f       	mov	r16, r18
    242a:	7a 33       	cpi	r23, 0x3A	; 58
    242c:	28 f0       	brcs	.+10     	; 0x2438 <__ftoa_engine+0x154>
    242e:	79 e3       	ldi	r23, 0x39	; 57
    2430:	7d 93       	st	X+, r23
    2432:	2a 95       	dec	r18
    2434:	e9 f7       	brne	.-6      	; 0x2430 <__ftoa_engine+0x14c>
    2436:	10 c0       	rjmp	.+32     	; 0x2458 <__ftoa_engine+0x174>
    2438:	7d 93       	st	X+, r23
    243a:	2a 95       	dec	r18
    243c:	89 f6       	brne	.-94     	; 0x23e0 <__ftoa_engine+0xfc>
    243e:	06 94       	lsr	r0
    2440:	97 95       	ror	r25
    2442:	67 95       	ror	r22
    2444:	37 95       	ror	r19
    2446:	17 95       	ror	r17
    2448:	17 94       	ror	r1
    244a:	e1 18       	sub	r14, r1
    244c:	f1 0a       	sbc	r15, r17
    244e:	43 0b       	sbc	r20, r19
    2450:	56 0b       	sbc	r21, r22
    2452:	c9 0b       	sbc	r28, r25
    2454:	d0 09       	sbc	r29, r0
    2456:	98 f0       	brcs	.+38     	; 0x247e <__ftoa_engine+0x19a>
    2458:	23 95       	inc	r18
    245a:	7e 91       	ld	r23, -X
    245c:	73 95       	inc	r23
    245e:	7a 33       	cpi	r23, 0x3A	; 58
    2460:	08 f0       	brcs	.+2      	; 0x2464 <__ftoa_engine+0x180>
    2462:	70 e3       	ldi	r23, 0x30	; 48
    2464:	7c 93       	st	X, r23
    2466:	20 13       	cpse	r18, r16
    2468:	b8 f7       	brcc	.-18     	; 0x2458 <__ftoa_engine+0x174>
    246a:	7e 91       	ld	r23, -X
    246c:	70 61       	ori	r23, 0x10	; 16
    246e:	7d 93       	st	X+, r23
    2470:	30 f0       	brcs	.+12     	; 0x247e <__ftoa_engine+0x19a>
    2472:	83 95       	inc	r24
    2474:	71 e3       	ldi	r23, 0x31	; 49
    2476:	7d 93       	st	X+, r23
    2478:	70 e3       	ldi	r23, 0x30	; 48
    247a:	2a 95       	dec	r18
    247c:	e1 f7       	brne	.-8      	; 0x2476 <__ftoa_engine+0x192>
    247e:	11 24       	eor	r1, r1
    2480:	ef 90       	pop	r14
    2482:	ff 90       	pop	r15
    2484:	0f 91       	pop	r16
    2486:	1f 91       	pop	r17
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	99 27       	eor	r25, r25
    248e:	87 fd       	sbrc	r24, 7
    2490:	90 95       	com	r25
    2492:	08 95       	ret

00002494 <strnlen_P>:
    2494:	fc 01       	movw	r30, r24
    2496:	05 90       	lpm	r0, Z+
    2498:	61 50       	subi	r22, 0x01	; 1
    249a:	70 40       	sbci	r23, 0x00	; 0
    249c:	01 10       	cpse	r0, r1
    249e:	d8 f7       	brcc	.-10     	; 0x2496 <strnlen_P+0x2>
    24a0:	80 95       	com	r24
    24a2:	90 95       	com	r25
    24a4:	8e 0f       	add	r24, r30
    24a6:	9f 1f       	adc	r25, r31
    24a8:	08 95       	ret

000024aa <strcat>:
    24aa:	fb 01       	movw	r30, r22
    24ac:	dc 01       	movw	r26, r24
    24ae:	0d 90       	ld	r0, X+
    24b0:	00 20       	and	r0, r0
    24b2:	e9 f7       	brne	.-6      	; 0x24ae <strcat+0x4>
    24b4:	11 97       	sbiw	r26, 0x01	; 1
    24b6:	01 90       	ld	r0, Z+
    24b8:	0d 92       	st	X+, r0
    24ba:	00 20       	and	r0, r0
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <strcat+0xc>
    24be:	08 95       	ret

000024c0 <strncmp>:
    24c0:	fb 01       	movw	r30, r22
    24c2:	dc 01       	movw	r26, r24
    24c4:	41 50       	subi	r20, 0x01	; 1
    24c6:	50 40       	sbci	r21, 0x00	; 0
    24c8:	30 f0       	brcs	.+12     	; 0x24d6 <strncmp+0x16>
    24ca:	8d 91       	ld	r24, X+
    24cc:	01 90       	ld	r0, Z+
    24ce:	80 19       	sub	r24, r0
    24d0:	19 f4       	brne	.+6      	; 0x24d8 <strncmp+0x18>
    24d2:	00 20       	and	r0, r0
    24d4:	b9 f7       	brne	.-18     	; 0x24c4 <strncmp+0x4>
    24d6:	88 1b       	sub	r24, r24
    24d8:	99 0b       	sbc	r25, r25
    24da:	08 95       	ret

000024dc <strncpy>:
    24dc:	fb 01       	movw	r30, r22
    24de:	dc 01       	movw	r26, r24
    24e0:	41 50       	subi	r20, 0x01	; 1
    24e2:	50 40       	sbci	r21, 0x00	; 0
    24e4:	48 f0       	brcs	.+18     	; 0x24f8 <strncpy+0x1c>
    24e6:	01 90       	ld	r0, Z+
    24e8:	0d 92       	st	X+, r0
    24ea:	00 20       	and	r0, r0
    24ec:	c9 f7       	brne	.-14     	; 0x24e0 <strncpy+0x4>
    24ee:	01 c0       	rjmp	.+2      	; 0x24f2 <strncpy+0x16>
    24f0:	1d 92       	st	X+, r1
    24f2:	41 50       	subi	r20, 0x01	; 1
    24f4:	50 40       	sbci	r21, 0x00	; 0
    24f6:	e0 f7       	brcc	.-8      	; 0x24f0 <strncpy+0x14>
    24f8:	08 95       	ret

000024fa <strnlen>:
    24fa:	fc 01       	movw	r30, r24
    24fc:	61 50       	subi	r22, 0x01	; 1
    24fe:	70 40       	sbci	r23, 0x00	; 0
    2500:	01 90       	ld	r0, Z+
    2502:	01 10       	cpse	r0, r1
    2504:	d8 f7       	brcc	.-10     	; 0x24fc <strnlen+0x2>
    2506:	80 95       	com	r24
    2508:	90 95       	com	r25
    250a:	8e 0f       	add	r24, r30
    250c:	9f 1f       	adc	r25, r31
    250e:	08 95       	ret

00002510 <fputc>:
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	8c 01       	movw	r16, r24
    251a:	eb 01       	movw	r28, r22
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	81 fd       	sbrc	r24, 1
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <fputc+0x18>
    2522:	0f ef       	ldi	r16, 0xFF	; 255
    2524:	1f ef       	ldi	r17, 0xFF	; 255
    2526:	1a c0       	rjmp	.+52     	; 0x255c <fputc+0x4c>
    2528:	82 ff       	sbrs	r24, 2
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <fputc+0x36>
    252c:	2e 81       	ldd	r18, Y+6	; 0x06
    252e:	3f 81       	ldd	r19, Y+7	; 0x07
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	28 17       	cp	r18, r24
    2536:	39 07       	cpc	r19, r25
    2538:	64 f4       	brge	.+24     	; 0x2552 <fputc+0x42>
    253a:	e8 81       	ld	r30, Y
    253c:	f9 81       	ldd	r31, Y+1	; 0x01
    253e:	01 93       	st	Z+, r16
    2540:	f9 83       	std	Y+1, r31	; 0x01
    2542:	e8 83       	st	Y, r30
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <fputc+0x42>
    2546:	e8 85       	ldd	r30, Y+8	; 0x08
    2548:	f9 85       	ldd	r31, Y+9	; 0x09
    254a:	80 2f       	mov	r24, r16
    254c:	09 95       	icall
    254e:	89 2b       	or	r24, r25
    2550:	41 f7       	brne	.-48     	; 0x2522 <fputc+0x12>
    2552:	8e 81       	ldd	r24, Y+6	; 0x06
    2554:	9f 81       	ldd	r25, Y+7	; 0x07
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	9f 83       	std	Y+7, r25	; 0x07
    255a:	8e 83       	std	Y+6, r24	; 0x06
    255c:	c8 01       	movw	r24, r16
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <sprintf>:
    2568:	ae e0       	ldi	r26, 0x0E	; 14
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea eb       	ldi	r30, 0xBA	; 186
    256e:	f2 e1       	ldi	r31, 0x12	; 18
    2570:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x1c>
    2574:	0d 89       	ldd	r16, Y+21	; 0x15
    2576:	1e 89       	ldd	r17, Y+22	; 0x16
    2578:	86 e0       	ldi	r24, 0x06	; 6
    257a:	8c 83       	std	Y+4, r24	; 0x04
    257c:	1a 83       	std	Y+2, r17	; 0x02
    257e:	09 83       	std	Y+1, r16	; 0x01
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	9f e7       	ldi	r25, 0x7F	; 127
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	ce 01       	movw	r24, r28
    258a:	49 96       	adiw	r24, 0x19	; 25
    258c:	ac 01       	movw	r20, r24
    258e:	6f 89       	ldd	r22, Y+23	; 0x17
    2590:	78 8d       	ldd	r23, Y+24	; 0x18
    2592:	ce 01       	movw	r24, r28
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <vfprintf>
    259a:	ef 81       	ldd	r30, Y+7	; 0x07
    259c:	f8 85       	ldd	r31, Y+8	; 0x08
    259e:	e0 0f       	add	r30, r16
    25a0:	f1 1f       	adc	r31, r17
    25a2:	10 82       	st	Z, r1
    25a4:	2e 96       	adiw	r28, 0x0e	; 14
    25a6:	e4 e0       	ldi	r30, 0x04	; 4
    25a8:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x1c>

000025ac <__ultoa_invert>:
    25ac:	fa 01       	movw	r30, r20
    25ae:	aa 27       	eor	r26, r26
    25b0:	28 30       	cpi	r18, 0x08	; 8
    25b2:	51 f1       	breq	.+84     	; 0x2608 <__ultoa_invert+0x5c>
    25b4:	20 31       	cpi	r18, 0x10	; 16
    25b6:	81 f1       	breq	.+96     	; 0x2618 <__ultoa_invert+0x6c>
    25b8:	e8 94       	clt
    25ba:	6f 93       	push	r22
    25bc:	6e 7f       	andi	r22, 0xFE	; 254
    25be:	6e 5f       	subi	r22, 0xFE	; 254
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	8f 4f       	sbci	r24, 0xFF	; 255
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	af 4f       	sbci	r26, 0xFF	; 255
    25c8:	b1 e0       	ldi	r27, 0x01	; 1
    25ca:	3e d0       	rcall	.+124    	; 0x2648 <__ultoa_invert+0x9c>
    25cc:	b4 e0       	ldi	r27, 0x04	; 4
    25ce:	3c d0       	rcall	.+120    	; 0x2648 <__ultoa_invert+0x9c>
    25d0:	67 0f       	add	r22, r23
    25d2:	78 1f       	adc	r23, r24
    25d4:	89 1f       	adc	r24, r25
    25d6:	9a 1f       	adc	r25, r26
    25d8:	a1 1d       	adc	r26, r1
    25da:	68 0f       	add	r22, r24
    25dc:	79 1f       	adc	r23, r25
    25de:	8a 1f       	adc	r24, r26
    25e0:	91 1d       	adc	r25, r1
    25e2:	a1 1d       	adc	r26, r1
    25e4:	6a 0f       	add	r22, r26
    25e6:	71 1d       	adc	r23, r1
    25e8:	81 1d       	adc	r24, r1
    25ea:	91 1d       	adc	r25, r1
    25ec:	a1 1d       	adc	r26, r1
    25ee:	20 d0       	rcall	.+64     	; 0x2630 <__ultoa_invert+0x84>
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <__ultoa_invert+0x48>
    25f2:	68 94       	set
    25f4:	3f 91       	pop	r19
    25f6:	2a e0       	ldi	r18, 0x0A	; 10
    25f8:	26 9f       	mul	r18, r22
    25fa:	11 24       	eor	r1, r1
    25fc:	30 19       	sub	r19, r0
    25fe:	30 5d       	subi	r19, 0xD0	; 208
    2600:	31 93       	st	Z+, r19
    2602:	de f6       	brtc	.-74     	; 0x25ba <__ultoa_invert+0xe>
    2604:	cf 01       	movw	r24, r30
    2606:	08 95       	ret
    2608:	46 2f       	mov	r20, r22
    260a:	47 70       	andi	r20, 0x07	; 7
    260c:	40 5d       	subi	r20, 0xD0	; 208
    260e:	41 93       	st	Z+, r20
    2610:	b3 e0       	ldi	r27, 0x03	; 3
    2612:	0f d0       	rcall	.+30     	; 0x2632 <__ultoa_invert+0x86>
    2614:	c9 f7       	brne	.-14     	; 0x2608 <__ultoa_invert+0x5c>
    2616:	f6 cf       	rjmp	.-20     	; 0x2604 <__ultoa_invert+0x58>
    2618:	46 2f       	mov	r20, r22
    261a:	4f 70       	andi	r20, 0x0F	; 15
    261c:	40 5d       	subi	r20, 0xD0	; 208
    261e:	4a 33       	cpi	r20, 0x3A	; 58
    2620:	18 f0       	brcs	.+6      	; 0x2628 <__ultoa_invert+0x7c>
    2622:	49 5d       	subi	r20, 0xD9	; 217
    2624:	31 fd       	sbrc	r19, 1
    2626:	40 52       	subi	r20, 0x20	; 32
    2628:	41 93       	st	Z+, r20
    262a:	02 d0       	rcall	.+4      	; 0x2630 <__ultoa_invert+0x84>
    262c:	a9 f7       	brne	.-22     	; 0x2618 <__ultoa_invert+0x6c>
    262e:	ea cf       	rjmp	.-44     	; 0x2604 <__ultoa_invert+0x58>
    2630:	b4 e0       	ldi	r27, 0x04	; 4
    2632:	a6 95       	lsr	r26
    2634:	97 95       	ror	r25
    2636:	87 95       	ror	r24
    2638:	77 95       	ror	r23
    263a:	67 95       	ror	r22
    263c:	ba 95       	dec	r27
    263e:	c9 f7       	brne	.-14     	; 0x2632 <__ultoa_invert+0x86>
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	61 05       	cpc	r22, r1
    2644:	71 05       	cpc	r23, r1
    2646:	08 95       	ret
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	0a 2e       	mov	r0, r26
    264e:	06 94       	lsr	r0
    2650:	57 95       	ror	r21
    2652:	47 95       	ror	r20
    2654:	37 95       	ror	r19
    2656:	27 95       	ror	r18
    2658:	ba 95       	dec	r27
    265a:	c9 f7       	brne	.-14     	; 0x264e <__ultoa_invert+0xa2>
    265c:	62 0f       	add	r22, r18
    265e:	73 1f       	adc	r23, r19
    2660:	84 1f       	adc	r24, r20
    2662:	95 1f       	adc	r25, r21
    2664:	a0 1d       	adc	r26, r0
    2666:	08 95       	ret

00002668 <_exit>:
    2668:	f8 94       	cli

0000266a <__stop_program>:
    266a:	ff cf       	rjmp	.-2      	; 0x266a <__stop_program>
