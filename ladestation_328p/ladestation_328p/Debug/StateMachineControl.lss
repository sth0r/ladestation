
StateMachineControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045a  00800100  00002726  000027ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  0080055a  0080055a  00002c14  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5b  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000073a7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  000073d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003087  00000000  00000000  000075f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d07  00000000  00000000  0000a67d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015da  00000000  00000000  0000b384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  0000c960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008bb  00000000  00000000  0000cef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c66  00000000  00000000  0000d7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  0000f415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_1>
       8:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.2006>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.2004>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	15 e0       	ldi	r17, 0x05	; 5
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e6 e2       	ldi	r30, 0x26	; 38
     17e:	f7 e2       	ldi	r31, 0x27	; 39
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	aa 35       	cpi	r26, 0x5A	; 90
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	26 e0       	ldi	r18, 0x06	; 6
     18e:	aa e5       	ldi	r26, 0x5A	; 90
     190:	b5 e0       	ldi	r27, 0x05	; 5
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a4 36       	cpi	r26, 0x64	; 100
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 94 09 	call	0x1328	; 0x1328 <main>
     1a0:	0c 94 91 13 	jmp	0x2722	; 0x2722 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:
 *  Author: T
 */ 
#include "Macroes.h"
void ADC_init()
{
	DDRC &= ~(1<<DDC5);
     1a8:	3d 98       	cbi	0x07, 5	; 7
	ADMUX |= (1<<MUX0)|(1<<MUX2); // External ref and adc5 selected (1<<REFS0)||(1<<MUX1)|(1<<MUX3)
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC5D); // Disable digital input buffer
     1b4:	ee e7       	ldi	r30, 0x7E	; 126
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	80 62       	ori	r24, 0x20	; 32
     1bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADIF)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //enable adc
     1be:	ea e7       	ldi	r30, 0x7A	; 122
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	87 69       	ori	r24, 0x97	; 151
     1c6:	80 83       	st	Z, r24
     1c8:	08 95       	ret

000001ca <ADC_Sample>:
}

uint16_t ADC_Sample()
{
	ADCSRA|=(1<<ADSC);
     1ca:	ea e7       	ldi	r30, 0x7A	; 122
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_Sample+0xa>
	return ADC;
     1da:	20 91 78 00 	lds	r18, 0x0078
     1de:	30 91 79 00 	lds	r19, 0x0079
     1e2:	82 2f       	mov	r24, r18
     1e4:	93 2f       	mov	r25, r19
     1e6:	08 95       	ret

000001e8 <GetUID>:
volatile unsigned int usedOere=0, usedKr=0;
char receiveBuffer[64] = "";
volatile unsigned int timeChargedInSeconds = 0;

void GetUID()
{
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
	PORTB &= ~(1<<PORTB2); // SS low to start transfer
     1f4:	2a 98       	cbi	0x05, 2	; 5
	SPI_MasterTransmit('U'); //0x55 Command get UID
     1f6:	85 e5       	ldi	r24, 0x55	; 85
     1f8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_MasterTransmit>
	PORTB |= (1<<PORTB2); // SS high to end transfer
     1fc:	2a 9a       	sbi	0x05, 2	; 5
	startComTimeout = true;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 58 06 	sts	0x0658, r24
	cardPresent = false;
     204:	10 92 5e 06 	sts	0x065E, r1
	while(1)//while((!dataReady) || (!comTimeout)); Virker ikke på denne måde?
	{
		if((dataReady) || (comTimeout)) break;
     208:	80 91 5d 06 	lds	r24, 0x065D
     20c:	81 11       	cpse	r24, r1
     20e:	04 c0       	rjmp	.+8      	; 0x218 <GetUID+0x30>
     210:	80 91 5a 06 	lds	r24, 0x065A
     214:	88 23       	and	r24, r24
     216:	c1 f3       	breq	.-16     	; 0x208 <GetUID+0x20>
	}
	startComTimeout = false;
     218:	10 92 58 06 	sts	0x0658, r1
	comTimeout = false;
     21c:	10 92 5a 06 	sts	0x065A, r1
	if (dataReady)
     220:	80 91 5d 06 	lds	r24, 0x065D
     224:	88 23       	and	r24, r24
     226:	09 f4       	brne	.+2      	; 0x22a <GetUID+0x42>
     228:	6f c0       	rjmp	.+222    	; 0x308 <GetUID+0x120>
	{
		UART_Transmit_String("Data Ready \n");
     22a:	8b e0       	ldi	r24, 0x0B	; 11
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		PORTB &= ~(1<<PORTB2); // SS low to start transfer
     232:	2a 98       	cbi	0x05, 2	; 5
		SPI_MasterTransmit(0xF5); // Send dummy data
     234:	85 ef       	ldi	r24, 0xF5	; 245
     236:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_MasterTransmit>
		PORTB |= (1<<PORTB2); // SS high to end transfer
     23a:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23c:	8f e8       	ldi	r24, 0x8F	; 143
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <GetUID+0x58>
     244:	00 c0       	rjmp	.+0      	; 0x246 <GetUID+0x5e>
     246:	00 00       	nop
		_delay_us(100);
		if (SPDR == ACK)
     248:	8e b5       	in	r24, 0x2e	; 46
     24a:	86 38       	cpi	r24, 0x86	; 134
     24c:	09 f0       	breq	.+2      	; 0x250 <GetUID+0x68>
     24e:	53 c0       	rjmp	.+166    	; 0x2f6 <GetUID+0x10e>
		{
			sprintf(displayBuffer, "UID = ");
     250:	87 e0       	ldi	r24, 0x07	; 7
     252:	e8 e1       	ldi	r30, 0x18	; 24
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	a1 e0       	ldi	r26, 0x01	; 1
     258:	b6 e0       	ldi	r27, 0x06	; 6
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	8a 95       	dec	r24
     260:	e1 f7       	brne	.-8      	; 0x25a <GetUID+0x72>
     262:	07 e0       	ldi	r16, 0x07	; 7
     264:	10 e0       	ldi	r17, 0x00	; 0
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
				SPI_MasterTransmit(0xF5); // Send dummy data
				PORTB |= (1<<PORTB2); // SS high to end transfer
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     266:	0f 2e       	mov	r0, r31
     268:	ff e1       	ldi	r31, 0x1F	; 31
     26a:	ef 2e       	mov	r14, r31
     26c:	f1 e0       	ldi	r31, 0x01	; 1
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
     272:	c1 ec       	ldi	r28, 0xC1	; 193
     274:	d5 e0       	ldi	r29, 0x05	; 5
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
     276:	2a 98       	cbi	0x05, 2	; 5
				SPI_MasterTransmit(0xF5); // Send dummy data
     278:	85 ef       	ldi	r24, 0xF5	; 245
     27a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_MasterTransmit>
				PORTB |= (1<<PORTB2); // SS high to end transfer
     27e:	2a 9a       	sbi	0x05, 2	; 5
     280:	8f e8       	ldi	r24, 0x8F	; 143
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <GetUID+0x9c>
     288:	00 c0       	rjmp	.+0      	; 0x28a <GetUID+0xa2>
     28a:	00 00       	nop
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     28c:	8e b5       	in	r24, 0x2e	; 46
     28e:	1f 92       	push	r1
     290:	8f 93       	push	r24
     292:	ff 92       	push	r15
     294:	ef 92       	push	r14
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
				strcat(displayBuffer,comBuffer);
     29e:	be 01       	movw	r22, r28
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	96 e0       	ldi	r25, 0x06	; 6
     2a4:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
     2a8:	01 50       	subi	r16, 0x01	; 1
     2aa:	11 09       	sbc	r17, r1
		PORTB |= (1<<PORTB2); // SS high to end transfer
		_delay_us(100);
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	f1 f6       	brne	.-68     	; 0x276 <GetUID+0x8e>
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
				strcat(displayBuffer,comBuffer);
				//Disp_char('0'+i);
			}
			strcat(displayBuffer,"\n");
     2ba:	e1 e0       	ldi	r30, 0x01	; 1
     2bc:	f6 e0       	ldi	r31, 0x06	; 6
     2be:	01 90       	ld	r0, Z+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <GetUID+0xd6>
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	91 83       	std	Z+1, r25	; 0x01
     2cc:	80 83       	st	Z, r24
			UART_Transmit_String(displayBuffer);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	96 e0       	ldi	r25, 0x06	; 6
     2d2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
			strncpy(uID, displayBuffer+6, 8);
     2d6:	48 e0       	ldi	r20, 0x08	; 8
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	67 e0       	ldi	r22, 0x07	; 7
     2dc:	76 e0       	ldi	r23, 0x06	; 6
     2de:	81 e4       	ldi	r24, 0x41	; 65
     2e0:	96 e0       	ldi	r25, 0x06	; 6
     2e2:	0e 94 cb 12 	call	0x2596	; 0x2596 <strncpy>
			UART_Transmit_String(uID);
     2e6:	81 e4       	ldi	r24, 0x41	; 65
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
			gotUID = true;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 5b 06 	sts	0x065B, r24
     2f4:	06 c0       	rjmp	.+12     	; 0x302 <GetUID+0x11a>
		}
		else
		{
			UART_Transmit_String("Command failed \n");
     2f6:	82 e2       	ldi	r24, 0x22	; 34
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
			gotUID = false;
     2fe:	10 92 5b 06 	sts	0x065B, r1
		}
		dataReady = false;
     302:	10 92 5d 06 	sts	0x065D, r1
     306:	08 c0       	rjmp	.+16     	; 0x318 <GetUID+0x130>
	}
	else
	{
		UART_Transmit_String("RFID reader timeout \n");
     308:	83 e3       	ldi	r24, 0x33	; 51
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		dataReady = false;
     310:	10 92 5d 06 	sts	0x065D, r1
		gotUID = false;
     314:	10 92 5b 06 	sts	0x065B, r1
	}
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	08 95       	ret

00000326 <SendCommand>:

void SendCommand(char command)
{
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	d8 2e       	mov	r13, r24
	char commandString[1];
	sprintf(commandString, "%c", command);
     33c:	1f 92       	push	r1
     33e:	8f 93       	push	r24
     340:	29 e4       	ldi	r18, 0x49	; 73
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	3f 93       	push	r19
     346:	2f 93       	push	r18
     348:	ee 24       	eor	r14, r14
     34a:	e3 94       	inc	r14
     34c:	f1 2c       	mov	r15, r1
     34e:	ec 0e       	add	r14, r28
     350:	fd 1e       	adc	r15, r29
     352:	ff 92       	push	r15
     354:	ef 92       	push	r14
     356:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	sprintf(comBuffer, START_CHAR);
     35a:	2c e4       	ldi	r18, 0x4C	; 76
     35c:	31 e0       	ldi	r19, 0x01	; 1
     35e:	3f 93       	push	r19
     360:	2f 93       	push	r18
     362:	01 ec       	ldi	r16, 0xC1	; 193
     364:	15 e0       	ldi	r17, 0x05	; 5
     366:	1f 93       	push	r17
     368:	0f 93       	push	r16
     36a:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	strcat(comBuffer, CLIENT_ID);
     36e:	f8 01       	movw	r30, r16
     370:	01 90       	ld	r0, Z+
     372:	00 20       	and	r0, r0
     374:	e9 f7       	brne	.-6      	; 0x370 <SendCommand+0x4a>
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	40 e3       	ldi	r20, 0x30	; 48
     37a:	50 e3       	ldi	r21, 0x30	; 48
     37c:	61 e3       	ldi	r22, 0x31	; 49
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	40 83       	st	Z, r20
     382:	51 83       	std	Z+1, r21	; 0x01
     384:	62 83       	std	Z+2, r22	; 0x02
     386:	73 83       	std	Z+3, r23	; 0x03
	strcat(comBuffer, commandString);
     388:	b7 01       	movw	r22, r14
     38a:	c8 01       	movw	r24, r16
     38c:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
	switch(command)
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	95 e4       	ldi	r25, 0x45	; 69
     39c:	d9 16       	cp	r13, r25
     39e:	09 f4       	brne	.+2      	; 0x3a2 <SendCommand+0x7c>
     3a0:	3f c0       	rjmp	.+126    	; 0x420 <SendCommand+0xfa>
     3a2:	9d 15       	cp	r25, r13
     3a4:	20 f0       	brcs	.+8      	; 0x3ae <SendCommand+0x88>
     3a6:	83 e4       	ldi	r24, 0x43	; 67
     3a8:	d8 12       	cpse	r13, r24
     3aa:	3e c0       	rjmp	.+124    	; 0x428 <SendCommand+0x102>
     3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <SendCommand+0xbc>
     3ae:	9c e4       	ldi	r25, 0x4C	; 76
     3b0:	d9 16       	cp	r13, r25
     3b2:	51 f0       	breq	.+20     	; 0x3c8 <SendCommand+0xa2>
     3b4:	86 e5       	ldi	r24, 0x56	; 86
     3b6:	d8 12       	cpse	r13, r24
     3b8:	37 c0       	rjmp	.+110    	; 0x428 <SendCommand+0x102>
	{
		case 'V': // Packet: % 001 V UID----- *
		{
			strcat(comBuffer, uID);
     3ba:	61 e4       	ldi	r22, 0x41	; 65
     3bc:	76 e0       	ldi	r23, 0x06	; 6
     3be:	81 ec       	ldi	r24, 0xC1	; 193
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
		}
		break;
     3c6:	30 c0       	rjmp	.+96     	; 0x428 <SendCommand+0x102>
		case 'L': // Packet: % 001 L UID----- PSWD *
		{
			strcat(comBuffer, uID);
     3c8:	61 e4       	ldi	r22, 0x41	; 65
     3ca:	76 e0       	ldi	r23, 0x06	; 6
     3cc:	81 ec       	ldi	r24, 0xC1	; 193
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
			strcat(comBuffer, password);
     3d4:	6c eb       	ldi	r22, 0xBC	; 188
     3d6:	75 e0       	ldi	r23, 0x05	; 5
     3d8:	81 ec       	ldi	r24, 0xC1	; 193
     3da:	95 e0       	ldi	r25, 0x05	; 5
     3dc:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
		}
		break;
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <SendCommand+0x102>
		case 'C': // Packet: % 001 C UID----- KR-- Oe Time- *
		{
			strcat(comBuffer, taID);
     3e2:	60 ea       	ldi	r22, 0xA0	; 160
     3e4:	75 e0       	ldi	r23, 0x05	; 5
     3e6:	81 ec       	ldi	r24, 0xC1	; 193
     3e8:	95 e0       	ldi	r25, 0x05	; 5
     3ea:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
			strcat(comBuffer, uID);
     3ee:	61 e4       	ldi	r22, 0x41	; 65
     3f0:	76 e0       	ldi	r23, 0x06	; 6
     3f2:	81 ec       	ldi	r24, 0xC1	; 193
     3f4:	95 e0       	ldi	r25, 0x05	; 5
     3f6:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
			strcat(comBuffer, amountKr);
     3fa:	62 eb       	ldi	r22, 0xB2	; 178
     3fc:	75 e0       	ldi	r23, 0x05	; 5
     3fe:	81 ec       	ldi	r24, 0xC1	; 193
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
			strcat(comBuffer, amountOere);
     406:	6f ea       	ldi	r22, 0xAF	; 175
     408:	75 e0       	ldi	r23, 0x05	; 5
     40a:	81 ec       	ldi	r24, 0xC1	; 193
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
			strcat(comBuffer, timeStamp);
     412:	69 ea       	ldi	r22, 0xA9	; 169
     414:	75 e0       	ldi	r23, 0x05	; 5
     416:	81 ec       	ldi	r24, 0xC1	; 193
     418:	95 e0       	ldi	r25, 0x05	; 5
     41a:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcat>
		}
		break;
     41e:	04 c0       	rjmp	.+8      	; 0x428 <SendCommand+0x102>
		case 'E': // Packet: % 001 L UID----- PSWD *
		{
			UART_Transmit_String("Error Command State");
     420:	8f e4       	ldi	r24, 0x4F	; 79
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		}
		break;
		default : command='E'; break;
	}
	strcat(comBuffer, STOP_CHAR);
     428:	e1 ec       	ldi	r30, 0xC1	; 193
     42a:	f5 e0       	ldi	r31, 0x05	; 5
     42c:	01 90       	ld	r0, Z+
     42e:	00 20       	and	r0, r0
     430:	e9 f7       	brne	.-6      	; 0x42c <SendCommand+0x106>
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	8a e2       	ldi	r24, 0x2A	; 42
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	91 83       	std	Z+1, r25	; 0x01
     43a:	80 83       	st	Z, r24
	UART_Transmit_String("Packet send\n");
     43c:	83 e6       	ldi	r24, 0x63	; 99
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	UART_Transmit_String(comBuffer);
     444:	81 ec       	ldi	r24, 0xC1	; 193
     446:	95 e0       	ldi	r25, 0x05	; 5
     448:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
}
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	08 95       	ret

0000045e <CardKnown>:

bool CardKnown()
{
	SendCommand(VALIDATE_CARD_COMMAND);
     45e:	86 e5       	ldi	r24, 0x56	; 86
     460:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     464:	10 92 56 06 	sts	0x0656, r1
	startComTimeout = true;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 58 06 	sts	0x0658, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     46e:	80 91 56 06 	lds	r24, 0x0656
     472:	81 11       	cpse	r24, r1
     474:	04 c0       	rjmp	.+8      	; 0x47e <CardKnown+0x20>
     476:	80 91 5a 06 	lds	r24, 0x065A
     47a:	88 23       	and	r24, r24
     47c:	c1 f3       	breq	.-16     	; 0x46e <CardKnown+0x10>
	}
	startComTimeout = false;
     47e:	10 92 58 06 	sts	0x0658, r1
	comTimeout = false;
     482:	10 92 5a 06 	sts	0x065A, r1
	if (packetReceived)
     486:	80 91 56 06 	lds	r24, 0x0656
     48a:	88 23       	and	r24, r24
     48c:	c1 f1       	breq	.+112    	; 0x4fe <CardKnown+0xa0>
	{
		UART_Transmit_String("receiveBuffer content\n");
     48e:	80 e7       	ldi	r24, 0x70	; 112
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
     496:	8c e5       	ldi	r24, 0x5C	; 92
     498:	95 e0       	ldi	r25, 0x05	; 5
     49a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		memcpy(passResult,receiveBuffer+5, 4);
     49e:	80 91 61 05 	lds	r24, 0x0561
     4a2:	90 91 62 05 	lds	r25, 0x0562
     4a6:	a0 91 63 05 	lds	r26, 0x0563
     4aa:	b0 91 64 05 	lds	r27, 0x0564
     4ae:	80 93 b7 05 	sts	0x05B7, r24
     4b2:	90 93 b8 05 	sts	0x05B8, r25
     4b6:	a0 93 b9 05 	sts	0x05B9, r26
     4ba:	b0 93 ba 05 	sts	0x05BA, r27
		passResult[4] = '\0';   /* null character manually added */
     4be:	10 92 bb 05 	sts	0x05BB, r1
		UART_Transmit_String("validate card passResult content\n");
     4c2:	87 e8       	ldi	r24, 0x87	; 135
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     4ca:	87 eb       	ldi	r24, 0xB7	; 183
     4cc:	95 e0       	ldi	r25, 0x05	; 5
     4ce:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     4d2:	80 e4       	ldi	r24, 0x40	; 64
     4d4:	ec e5       	ldi	r30, 0x5C	; 92
     4d6:	f5 e0       	ldi	r31, 0x05	; 5
     4d8:	df 01       	movw	r26, r30
     4da:	1d 92       	st	X+, r1
     4dc:	8a 95       	dec	r24
     4de:	e9 f7       	brne	.-6      	; 0x4da <CardKnown+0x7c>
		if (strncmp (passResult,"true",4) == 0)
     4e0:	44 e0       	ldi	r20, 0x04	; 4
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	69 ea       	ldi	r22, 0xA9	; 169
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	87 eb       	ldi	r24, 0xB7	; 183
     4ea:	95 e0       	ldi	r25, 0x05	; 5
     4ec:	0e 94 bd 12 	call	0x257a	; 0x257a <strncmp>
     4f0:	28 2f       	mov	r18, r24
     4f2:	39 2f       	mov	r19, r25
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	23 2b       	or	r18, r19
     4f8:	39 f0       	breq	.+14     	; 0x508 <CardKnown+0xaa>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Cardknown communication timeout\n");
     4fe:	8e ea       	ldi	r24, 0xAE	; 174
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		return false;
     506:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     508:	08 95       	ret

0000050a <ValidatePassword>:

bool ValidatePassword()
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	for (int i = 0; i < 4;)
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
	{
		char keyP = KBDchar(1);
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 21 08 	call	0x1042	; 0x1042 <KBDchar>
		if (keyP != 0 && keyP != 'C')
     518:	88 23       	and	r24, r24
     51a:	79 f0       	breq	.+30     	; 0x53a <ValidatePassword+0x30>
     51c:	83 34       	cpi	r24, 0x43	; 67
     51e:	41 f0       	breq	.+16     	; 0x530 <ValidatePassword+0x26>
		{
			password[i] = keyP;
     520:	fe 01       	movw	r30, r28
     522:	e4 54       	subi	r30, 0x44	; 68
     524:	fa 4f       	sbci	r31, 0xFA	; 250
     526:	80 83       	st	Z, r24
			Disp_char(keyP);
     528:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Disp_char>
			i++;
     52c:	21 96       	adiw	r28, 0x01	; 1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <ValidatePassword+0x30>
		}
		else if (keyP == 'C')
		{
			cancelPassword = true;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 55 06 	sts	0x0655, r24
			return false;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	73 c0       	rjmp	.+230    	; 0x620 <ValidatePassword+0x116>
	}
}

bool ValidatePassword()
{
	for (int i = 0; i < 4;)
     53a:	c4 30       	cpi	r28, 0x04	; 4
     53c:	d1 05       	cpc	r29, r1
     53e:	4c f3       	brlt	.-46     	; 0x512 <ValidatePassword+0x8>
		{
			cancelPassword = true;
			return false;
		}
	}
	UART_Transmit_String("Password typed\n");
     540:	8f ec       	ldi	r24, 0xCF	; 207
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	UART_Transmit_String(password);
     548:	8c eb       	ldi	r24, 0xBC	; 188
     54a:	95 e0       	ldi	r25, 0x05	; 5
     54c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	ec e5       	ldi	r30, 0x5C	; 92
     554:	f5 e0       	ldi	r31, 0x05	; 5
     556:	df 01       	movw	r26, r30
     558:	1d 92       	st	X+, r1
     55a:	8a 95       	dec	r24
     55c:	e9 f7       	brne	.-6      	; 0x558 <ValidatePassword+0x4e>
	SendCommand(LOGIN_COMMAND);
     55e:	8c e4       	ldi	r24, 0x4C	; 76
     560:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     564:	10 92 56 06 	sts	0x0656, r1
	startComTimeout = true;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 58 06 	sts	0x0658, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     56e:	80 91 56 06 	lds	r24, 0x0656
     572:	81 11       	cpse	r24, r1
     574:	04 c0       	rjmp	.+8      	; 0x57e <ValidatePassword+0x74>
     576:	80 91 5a 06 	lds	r24, 0x065A
     57a:	88 23       	and	r24, r24
     57c:	c1 f3       	breq	.-16     	; 0x56e <ValidatePassword+0x64>
	}
	startComTimeout = false;
     57e:	10 92 58 06 	sts	0x0658, r1
	comTimeout = false;
     582:	10 92 5a 06 	sts	0x065A, r1
	if (packetReceived)
     586:	80 91 56 06 	lds	r24, 0x0656
     58a:	88 23       	and	r24, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <ValidatePassword+0x86>
     58e:	43 c0       	rjmp	.+134    	; 0x616 <ValidatePassword+0x10c>
	{
		//UART_Transmit_String("receiveBuffer content\n");
		//UART_Transmit_String(receiveBuffer); //Packet expected: %001A00000001---UID--truexxxx*
		memcpy(passResult,receiveBuffer+21, 4);
     590:	80 91 71 05 	lds	r24, 0x0571
     594:	90 91 72 05 	lds	r25, 0x0572
     598:	a0 91 73 05 	lds	r26, 0x0573
     59c:	b0 91 74 05 	lds	r27, 0x0574
     5a0:	80 93 b7 05 	sts	0x05B7, r24
     5a4:	90 93 b8 05 	sts	0x05B8, r25
     5a8:	a0 93 b9 05 	sts	0x05B9, r26
     5ac:	b0 93 ba 05 	sts	0x05BA, r27
		passResult[4] = '\0';   /* null character manually added */
     5b0:	10 92 bb 05 	sts	0x05BB, r1
		memcpy(taID,receiveBuffer+5, 8);
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	e1 e6       	ldi	r30, 0x61	; 97
     5b8:	f5 e0       	ldi	r31, 0x05	; 5
     5ba:	a0 ea       	ldi	r26, 0xA0	; 160
     5bc:	b5 e0       	ldi	r27, 0x05	; 5
     5be:	01 90       	ld	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	8a 95       	dec	r24
     5c4:	e1 f7       	brne	.-8      	; 0x5be <ValidatePassword+0xb4>
		taID[9] = '\0';   /* null character manually added */
     5c6:	10 92 a9 05 	sts	0x05A9, r1
		UART_Transmit_String("TAID content\n");
     5ca:	8f ed       	ldi	r24, 0xDF	; 223
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(taID);
     5d2:	80 ea       	ldi	r24, 0xA0	; 160
     5d4:	95 e0       	ldi	r25, 0x05	; 5
     5d6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String("passwordResult content\n");
     5da:	8d ee       	ldi	r24, 0xED	; 237
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     5e2:	87 eb       	ldi	r24, 0xB7	; 183
     5e4:	95 e0       	ldi	r25, 0x05	; 5
     5e6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	ec e5       	ldi	r30, 0x5C	; 92
     5ee:	f5 e0       	ldi	r31, 0x05	; 5
     5f0:	df 01       	movw	r26, r30
     5f2:	1d 92       	st	X+, r1
     5f4:	8a 95       	dec	r24
     5f6:	e9 f7       	brne	.-6      	; 0x5f2 <ValidatePassword+0xe8>
		if (strncmp (passResult,"true",4) == 0)
     5f8:	44 e0       	ldi	r20, 0x04	; 4
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	69 ea       	ldi	r22, 0xA9	; 169
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	87 eb       	ldi	r24, 0xB7	; 183
     602:	95 e0       	ldi	r25, 0x05	; 5
     604:	0e 94 bd 12 	call	0x257a	; 0x257a <strncmp>
     608:	28 2f       	mov	r18, r24
     60a:	39 2f       	mov	r19, r25
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	23 2b       	or	r18, r19
     610:	39 f0       	breq	.+14     	; 0x620 <ValidatePassword+0x116>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	05 c0       	rjmp	.+10     	; 0x620 <ValidatePassword+0x116>
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Validate password communication timeout\n");
     616:	85 e0       	ldi	r24, 0x05	; 5
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		return false;
     61e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <UploadFinishedCharge>:

bool UploadFinishedCharge()
{
	SendCommand(UPLOAD_CHARGE_COMMAND);
     626:	83 e4       	ldi	r24, 0x43	; 67
     628:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     62c:	10 92 56 06 	sts	0x0656, r1
	startComTimeout = true;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 58 06 	sts	0x0658, r24
	//while(!packetReceived || !comTimeout); // Implement when com is working
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     636:	80 91 56 06 	lds	r24, 0x0656
     63a:	81 11       	cpse	r24, r1
     63c:	04 c0       	rjmp	.+8      	; 0x646 <UploadFinishedCharge+0x20>
     63e:	80 91 5a 06 	lds	r24, 0x065A
     642:	88 23       	and	r24, r24
     644:	c1 f3       	breq	.-16     	; 0x636 <UploadFinishedCharge+0x10>
	}
	startComTimeout = false;
     646:	10 92 58 06 	sts	0x0658, r1
	comTimeout = false;
     64a:	10 92 5a 06 	sts	0x065A, r1
	if (packetReceived)
     64e:	80 91 56 06 	lds	r24, 0x0656
     652:	88 23       	and	r24, r24
     654:	c1 f1       	breq	.+112    	; 0x6c6 <UploadFinishedCharge+0xa0>
	{
		UART_Transmit_String("receiveBuffer content. Expected: %001Atrue*\n");
     656:	8e e2       	ldi	r24, 0x2E	; 46
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
     65e:	8c e5       	ldi	r24, 0x5C	; 92
     660:	95 e0       	ldi	r25, 0x05	; 5
     662:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		memcpy(passResult,receiveBuffer+5, 4);
     666:	80 91 61 05 	lds	r24, 0x0561
     66a:	90 91 62 05 	lds	r25, 0x0562
     66e:	a0 91 63 05 	lds	r26, 0x0563
     672:	b0 91 64 05 	lds	r27, 0x0564
     676:	80 93 b7 05 	sts	0x05B7, r24
     67a:	90 93 b8 05 	sts	0x05B8, r25
     67e:	a0 93 b9 05 	sts	0x05B9, r26
     682:	b0 93 ba 05 	sts	0x05BA, r27
		passResult[4] = '\0';   /* null character manually added */
     686:	10 92 bb 05 	sts	0x05BB, r1
		UART_Transmit_String("Acknowledge passResult content\n");
     68a:	8b e5       	ldi	r24, 0x5B	; 91
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     692:	87 eb       	ldi	r24, 0xB7	; 183
     694:	95 e0       	ldi	r25, 0x05	; 5
     696:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	ec e5       	ldi	r30, 0x5C	; 92
     69e:	f5 e0       	ldi	r31, 0x05	; 5
     6a0:	df 01       	movw	r26, r30
     6a2:	1d 92       	st	X+, r1
     6a4:	8a 95       	dec	r24
     6a6:	e9 f7       	brne	.-6      	; 0x6a2 <UploadFinishedCharge+0x7c>
		if (strncmp (passResult,"true",4) == 0)
     6a8:	44 e0       	ldi	r20, 0x04	; 4
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	69 ea       	ldi	r22, 0xA9	; 169
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	87 eb       	ldi	r24, 0xB7	; 183
     6b2:	95 e0       	ldi	r25, 0x05	; 5
     6b4:	0e 94 bd 12 	call	0x257a	; 0x257a <strncmp>
     6b8:	28 2f       	mov	r18, r24
     6ba:	39 2f       	mov	r19, r25
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	23 2b       	or	r18, r19
     6c0:	39 f0       	breq	.+14     	; 0x6d0 <UploadFinishedCharge+0xaa>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Upload Charge Communication timeout\n");
     6c6:	8b e7       	ldi	r24, 0x7B	; 123
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		return false;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     6d0:	08 95       	ret

000006d2 <TryConnection>:

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
     6d2:	80 ea       	ldi	r24, 0xA0	; 160
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	noConnection = true;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 63 06 	sts	0x0663, r24
	while(noConnection)
     6e0:	80 91 63 06 	lds	r24, 0x0663
     6e4:	88 23       	and	r24, r24
     6e6:	99 f0       	breq	.+38     	; 0x70e <TryConnection+0x3c>
	{
		if (tryConnect)
     6e8:	80 91 62 06 	lds	r24, 0x0662
     6ec:	88 23       	and	r24, r24
     6ee:	49 f0       	breq	.+18     	; 0x702 <TryConnection+0x30>
		{
			UART_Transmit_String("try connect interval\n");
     6f0:	89 eb       	ldi	r24, 0xB9	; 185
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
			if (UploadFinishedCharge()) noConnection = false;
     6f8:	0e 94 13 03 	call	0x626	; 0x626 <UploadFinishedCharge>
     6fc:	81 11       	cpse	r24, r1
     6fe:	10 92 63 06 	sts	0x0663, r1
		}
		tryConnect = false;
     702:	10 92 62 06 	sts	0x0662, r1

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
	noConnection = true;
	while(noConnection)
     706:	80 91 63 06 	lds	r24, 0x0663
     70a:	81 11       	cpse	r24, r1
     70c:	ed cf       	rjmp	.-38     	; 0x6e8 <TryConnection+0x16>
     70e:	08 95       	ret

00000710 <CarConnected>:
	}
}

bool CarConnected()
{
	startConnectCarTimeout = true;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 57 06 	sts	0x0657, r24
	UART_Transmit_String("wait for timeout\n");
     716:	8f ec       	ldi	r24, 0xCF	; 207
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	while(1)
	{
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
     71e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     722:	0b 97       	sbiw	r24, 0x0b	; 11
     724:	20 f4       	brcc	.+8      	; 0x72e <CarConnected+0x1e>
     726:	80 91 59 06 	lds	r24, 0x0659
     72a:	88 23       	and	r24, r24
     72c:	c1 f3       	breq	.-16     	; 0x71e <CarConnected+0xe>
	}
	startConnectCarTimeout = false;
     72e:	10 92 57 06 	sts	0x0657, r1
	if (!connectCarTimeout)
     732:	80 91 59 06 	lds	r24, 0x0659
     736:	88 23       	and	r24, r24
     738:	41 f0       	breq	.+16     	; 0x74a <CarConnected+0x3a>
	{
		return true;
	}
	else
	{
		UART_Transmit_String("connect car timeout\n");
     73a:	81 ee       	ldi	r24, 0xE1	; 225
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
		connectCarTimeout = false;
     742:	10 92 59 06 	sts	0x0659, r1
		return false;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
	}
	startConnectCarTimeout = false;
	if (!connectCarTimeout)
	{
		return true;
     74a:	81 e0       	ldi	r24, 0x01	; 1
	{
		UART_Transmit_String("connect car timeout\n");
		connectCarTimeout = false;
		return false;
	}
}
     74c:	08 95       	ret

0000074e <BeginCharging>:

void BeginCharging()
{
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 5c 06 	sts	0x065C, r24
	chargingActive = true;
     778:	80 93 60 06 	sts	0x0660, r24

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	10 e0       	ldi	r17, 0x00	; 0
}

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
     780:	41 2c       	mov	r4, r1
     782:	51 2c       	mov	r5, r1
     784:	e1 2c       	mov	r14, r1
     786:	f1 2c       	mov	r15, r1
     788:	61 2c       	mov	r6, r1
     78a:	71 2c       	mov	r7, r1
     78c:	81 2c       	mov	r8, r1
     78e:	91 2c       	mov	r9, r1
     790:	a1 2c       	mov	r10, r1
     792:	b1 2c       	mov	r11, r1
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     798:	64 c1       	rjmp	.+712    	; 0xa62 <__stack+0x163>
	{
		if (takeSample)
     79a:	80 91 61 06 	lds	r24, 0x0661
     79e:	88 23       	and	r24, r24
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <BeginCharging+0x56>
     7a2:	2a c1       	rjmp	.+596    	; 0x9f8 <__stack+0xf9>
		{
			data=ADC_Sample();
     7a4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     7a8:	ec 01       	movw	r28, r24
			if((lastData!=data) && data > 0) //Only update display if needed (any change)
     7aa:	08 17       	cp	r16, r24
     7ac:	19 07       	cpc	r17, r25
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <BeginCharging+0x64>
     7b0:	4a c0       	rjmp	.+148    	; 0x846 <BeginCharging+0xf8>
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <BeginCharging+0x6a>
     7b6:	4a c0       	rjmp	.+148    	; 0x84c <BeginCharging+0xfe>
			{
				Disp_GotoXY(13,1);
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	8d e0       	ldi	r24, 0x0D	; 13
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
				sprintf(displayBuffer, "%4u", data);
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	86 ef       	ldi	r24, 0xF6	; 246
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	01 e0       	ldi	r16, 0x01	; 1
     7d2:	16 e0       	ldi	r17, 0x06	; 6
     7d4:	1f 93       	push	r17
     7d6:	0f 93       	push	r16
     7d8:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
				Disp_printString(displayBuffer);
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
				power = (double)data/409.2; //((2/5)*1023);   //mW 0.4*1023 = 409.2 // uW 0.4*1.023
     7e2:	be 01       	movw	r22, r28
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 ae 0c 	call	0x195c	; 0x195c <__floatunsisf>
     7ec:	2a e9       	ldi	r18, 0x9A	; 154
     7ee:	39 e9       	ldi	r19, 0x99	; 153
     7f0:	4c ec       	ldi	r20, 0xCC	; 204
     7f2:	53 e4       	ldi	r21, 0x43	; 67
     7f4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__divsf3>
     7f8:	f6 2e       	mov	r15, r22
     7fa:	e7 2e       	mov	r14, r23
     7fc:	58 2e       	mov	r5, r24
     7fe:	49 2e       	mov	r4, r25
     800:	66 2e       	mov	r6, r22
     802:	77 2e       	mov	r7, r23
     804:	88 2e       	mov	r8, r24
     806:	99 2e       	mov	r9, r25
				Disp_GotoXY(3,1);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
				sprintf(displayBuffer, "%.2f", power);
     814:	4f 92       	push	r4
     816:	5f 92       	push	r5
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	8a ef       	ldi	r24, 0xFA	; 250
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	1f 93       	push	r17
     826:	0f 93       	push	r16
     828:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
				Disp_printString(displayBuffer);
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
				lastData=data;
     832:	8d b7       	in	r24, 0x3d	; 61
     834:	9e b7       	in	r25, 0x3e	; 62
     836:	0e 96       	adiw	r24, 0x0e	; 14
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	9e bf       	out	0x3e, r25	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	8d bf       	out	0x3d, r24	; 61
     842:	8e 01       	movw	r16, r28
     844:	2d c0       	rjmp	.+90     	; 0x8a0 <BeginCharging+0x152>
			}
			else if (data == 0)
     846:	01 15       	cp	r16, r1
     848:	11 05       	cpc	r17, r1
     84a:	51 f5       	brne	.+84     	; 0x8a0 <BeginCharging+0x152>
			{
				usedKr = floor(price);
     84c:	64 2d       	mov	r22, r4
     84e:	75 2d       	mov	r23, r5
     850:	8e 2d       	mov	r24, r14
     852:	9f 2d       	mov	r25, r15
     854:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <floor>
     858:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixunssfsi>
     85c:	70 93 9d 05 	sts	0x059D, r23
     860:	60 93 9c 05 	sts	0x059C, r22
				usedOere = (price-usedKr)*100;
     864:	60 91 9c 05 	lds	r22, 0x059C
     868:	70 91 9d 05 	lds	r23, 0x059D
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 ae 0c 	call	0x195c	; 0x195c <__floatunsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	64 2d       	mov	r22, r4
     87a:	75 2d       	mov	r23, r5
     87c:	8e 2d       	mov	r24, r14
     87e:	9f 2d       	mov	r25, r15
     880:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__subsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	48 ec       	ldi	r20, 0xC8	; 200
     88a:	52 e4       	ldi	r21, 0x42	; 66
     88c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     890:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixunssfsi>
     894:	70 93 9f 05 	sts	0x059F, r23
     898:	60 93 9e 05 	sts	0x059E, r22
				chargingActive = false;
     89c:	10 92 60 06 	sts	0x0660, r1
			}
			energy += power;
     8a0:	26 2d       	mov	r18, r6
     8a2:	37 2d       	mov	r19, r7
     8a4:	48 2d       	mov	r20, r8
     8a6:	59 2d       	mov	r21, r9
     8a8:	6a 2d       	mov	r22, r10
     8aa:	7b 2d       	mov	r23, r11
     8ac:	8c 2d       	mov	r24, r12
     8ae:	9d 2d       	mov	r25, r13
     8b0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__addsf3>
     8b4:	e6 2e       	mov	r14, r22
     8b6:	f7 2e       	mov	r15, r23
     8b8:	d8 2f       	mov	r29, r24
     8ba:	c9 2f       	mov	r28, r25
     8bc:	a6 2e       	mov	r10, r22
     8be:	b7 2e       	mov	r11, r23
     8c0:	c8 2e       	mov	r12, r24
     8c2:	d9 2e       	mov	r13, r25
			Disp_GotoXY(3,2);
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			if (energy < 9999) sprintf(displayBuffer, "%.1f", energy);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	3c e3       	ldi	r19, 0x3C	; 60
     8d4:	4c e1       	ldi	r20, 0x1C	; 28
     8d6:	56 e4       	ldi	r21, 0x46	; 70
     8d8:	6e 2d       	mov	r22, r14
     8da:	7f 2d       	mov	r23, r15
     8dc:	8d 2f       	mov	r24, r29
     8de:	9c 2f       	mov	r25, r28
     8e0:	0e 94 16 0c 	call	0x182c	; 0x182c <__cmpsf2>
     8e4:	88 23       	and	r24, r24
     8e6:	bc f4       	brge	.+46     	; 0x916 <__stack+0x17>
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ff 92       	push	r15
     8ee:	ef 92       	push	r14
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	96 e0       	ldi	r25, 0x06	; 6
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
     904:	8d b7       	in	r24, 0x3d	; 61
     906:	9e b7       	in	r25, 0x3e	; 62
     908:	08 96       	adiw	r24, 0x08	; 8
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	9e bf       	out	0x3e, r25	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	8d bf       	out	0x3d, r24	; 61
     914:	16 c0       	rjmp	.+44     	; 0x942 <__stack+0x43>
			else sprintf(displayBuffer, "%5.f", energy);
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ff 92       	push	r15
     91c:	ef 92       	push	r14
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	93 e0       	ldi	r25, 0x03	; 3
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	96 e0       	ldi	r25, 0x06	; 6
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
     932:	8d b7       	in	r24, 0x3d	; 61
     934:	9e b7       	in	r25, 0x3e	; 62
     936:	08 96       	adiw	r24, 0x08	; 8
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	9e bf       	out	0x3e, r25	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	8d bf       	out	0x3d, r24	; 61
			Disp_printString(displayBuffer);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	96 e0       	ldi	r25, 0x06	; 6
     946:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			price = energy*KR_PR_MWS;
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	5f e3       	ldi	r21, 0x3F	; 63
     952:	6e 2d       	mov	r22, r14
     954:	7f 2d       	mov	r23, r15
     956:	8d 2f       	mov	r24, r29
     958:	9c 2f       	mov	r25, r28
     95a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     95e:	c6 2f       	mov	r28, r22
     960:	d7 2f       	mov	r29, r23
     962:	38 2e       	mov	r3, r24
     964:	29 2e       	mov	r2, r25
     966:	46 2e       	mov	r4, r22
     968:	57 2e       	mov	r5, r23
     96a:	e8 2e       	mov	r14, r24
     96c:	f9 2e       	mov	r15, r25
			Disp_GotoXY(11,2);
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	8b e0       	ldi	r24, 0x0B	; 11
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			if (price < 99) sprintf(displayBuffer, "%.1f", price);
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	46 ec       	ldi	r20, 0xC6	; 198
     980:	52 e4       	ldi	r21, 0x42	; 66
     982:	6c 2f       	mov	r22, r28
     984:	7d 2f       	mov	r23, r29
     986:	83 2d       	mov	r24, r3
     988:	92 2d       	mov	r25, r2
     98a:	0e 94 16 0c 	call	0x182c	; 0x182c <__cmpsf2>
     98e:	88 23       	and	r24, r24
     990:	bc f4       	brge	.+46     	; 0x9c0 <__stack+0xc1>
     992:	2f 92       	push	r2
     994:	3f 92       	push	r3
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	9f 93       	push	r25
     9a0:	8f 93       	push	r24
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	96 e0       	ldi	r25, 0x06	; 6
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
     9ae:	8d b7       	in	r24, 0x3d	; 61
     9b0:	9e b7       	in	r25, 0x3e	; 62
     9b2:	08 96       	adiw	r24, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	9e bf       	out	0x3e, r25	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	8d bf       	out	0x3d, r24	; 61
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <__stack+0xed>
			else sprintf(displayBuffer, "%4.f", price);
     9c0:	2f 92       	push	r2
     9c2:	3f 92       	push	r3
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	96 e0       	ldi	r25, 0x06	; 6
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
     9dc:	8d b7       	in	r24, 0x3d	; 61
     9de:	9e b7       	in	r25, 0x3e	; 62
     9e0:	08 96       	adiw	r24, 0x08	; 8
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	9e bf       	out	0x3e, r25	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	8d bf       	out	0x3d, r24	; 61
			//sprintf(displayBuffer, "%.1f", price);
			Disp_printString(displayBuffer);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	96 e0       	ldi	r25, 0x06	; 6
     9f0:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			takeSample = false;
     9f4:	10 92 61 06 	sts	0x0661, r1
		}
		if (readKeys)
     9f8:	80 91 5f 06 	lds	r24, 0x065F
     9fc:	88 23       	and	r24, r24
     9fe:	89 f1       	breq	.+98     	; 0xa62 <__stack+0x163>
		{
			char keyP = KBDchar(1);
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 21 08 	call	0x1042	; 0x1042 <KBDchar>
			if (keyP == 'C')
     a06:	83 34       	cpi	r24, 0x43	; 67
     a08:	51 f5       	brne	.+84     	; 0xa5e <__stack+0x15f>
			{
				usedKr = floor(price);
     a0a:	64 2d       	mov	r22, r4
     a0c:	75 2d       	mov	r23, r5
     a0e:	8e 2d       	mov	r24, r14
     a10:	9f 2d       	mov	r25, r15
     a12:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <floor>
     a16:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixunssfsi>
     a1a:	70 93 9d 05 	sts	0x059D, r23
     a1e:	60 93 9c 05 	sts	0x059C, r22
				usedOere = (price-usedKr)*100;
     a22:	60 91 9c 05 	lds	r22, 0x059C
     a26:	70 91 9d 05 	lds	r23, 0x059D
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 ae 0c 	call	0x195c	; 0x195c <__floatunsisf>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	64 2d       	mov	r22, r4
     a38:	75 2d       	mov	r23, r5
     a3a:	8e 2d       	mov	r24, r14
     a3c:	9f 2d       	mov	r25, r15
     a3e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__subsf3>
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	48 ec       	ldi	r20, 0xC8	; 200
     a48:	52 e4       	ldi	r21, 0x42	; 66
     a4a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__mulsf3>
     a4e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixunssfsi>
     a52:	70 93 9f 05 	sts	0x059F, r23
     a56:	60 93 9e 05 	sts	0x059E, r22
				chargingActive = false;
     a5a:	10 92 60 06 	sts	0x0660, r1
			}
			readKeys = false;
     a5e:	10 92 5f 06 	sts	0x065F, r1
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     a62:	80 91 60 06 	lds	r24, 0x0660
     a66:	81 11       	cpse	r24, r1
     a68:	98 ce       	rjmp	.-720    	; 0x79a <BeginCharging+0x4c>
				chargingActive = false;
			}
			readKeys = false;
		}
	}
	keypadActive = false;
     a6a:	10 92 5c 06 	sts	0x065C, r1
	UART_Transmit_String("\nKr ");
     a6e:	8e e0       	ldi	r24, 0x0E	; 14
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	sprintf(amountKr, "%04u", usedKr);
     a76:	80 91 9c 05 	lds	r24, 0x059C
     a7a:	90 91 9d 05 	lds	r25, 0x059D
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	83 e1       	ldi	r24, 0x13	; 19
     a84:	93 e0       	ldi	r25, 0x03	; 3
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	82 eb       	ldi	r24, 0xB2	; 178
     a8c:	95 e0       	ldi	r25, 0x05	; 5
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	UART_Transmit_String(amountKr);
     a96:	82 eb       	ldi	r24, 0xB2	; 178
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	UART_Transmit_String("\nOere ");
     a9e:	88 e1       	ldi	r24, 0x18	; 24
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	sprintf(amountOere, "%02u", usedOere);
     aa6:	80 91 9e 05 	lds	r24, 0x059E
     aaa:	90 91 9f 05 	lds	r25, 0x059F
     aae:	9f 93       	push	r25
     ab0:	8f 93       	push	r24
     ab2:	8f e1       	ldi	r24, 0x1F	; 31
     ab4:	93 e0       	ldi	r25, 0x03	; 3
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	8f ea       	ldi	r24, 0xAF	; 175
     abc:	95 e0       	ldi	r25, 0x05	; 5
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	UART_Transmit_String(amountOere);
     ac6:	8f ea       	ldi	r24, 0xAF	; 175
     ac8:	95 e0       	ldi	r25, 0x05	; 5
     aca:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	UART_Transmit_String("\nTime in seconds");
     ace:	84 e2       	ldi	r24, 0x24	; 36
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	sprintf(timeStamp, "%05u", timeChargedInSeconds);
     ad6:	80 91 5a 05 	lds	r24, 0x055A
     ada:	90 91 5b 05 	lds	r25, 0x055B
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	85 e3       	ldi	r24, 0x35	; 53
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	89 ea       	ldi	r24, 0xA9	; 169
     aec:	95 e0       	ldi	r25, 0x05	; 5
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	UART_Transmit_String(timeStamp);
     af6:	89 ea       	ldi	r24, 0xA9	; 169
     af8:	95 e0       	ldi	r25, 0x05	; 5
     afa:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
     afe:	8d b7       	in	r24, 0x3d	; 61
     b00:	9e b7       	in	r25, 0x3e	; 62
     b02:	42 96       	adiw	r24, 0x12	; 18
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	9e bf       	out	0x3e, r25	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	8d bf       	out	0x3d, r24	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	bf 90       	pop	r11
     b20:	af 90       	pop	r10
     b22:	9f 90       	pop	r9
     b24:	8f 90       	pop	r8
     b26:	7f 90       	pop	r7
     b28:	6f 90       	pop	r6
     b2a:	5f 90       	pop	r5
     b2c:	4f 90       	pop	r4
     b2e:	3f 90       	pop	r3
     b30:	2f 90       	pop	r2
     b32:	08 95       	ret

00000b34 <Disp_command>:
	displayAddress++;
}

void Disp_command(char command)
{
	SPCR |= (1<<DORD); // Send LSB first
     b34:	9c b5       	in	r25, 0x2c	; 44
     b36:	90 62       	ori	r25, 0x20	; 32
     b38:	9c bd       	out	0x2c, r25	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     b3a:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     b3c:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     b3e:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     b40:	28 98       	cbi	0x05, 0	; 5
	DDRC |= (1<<DDC4); // RS output
     b42:	3c 9a       	sbi	0x07, 4	; 7
	PORTC &= ~(1<<PORTC4); // RS low = instruction
     b44:	44 98       	cbi	0x08, 4	; 8
	SPI_MasterTransmit(command);
     b46:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB first
     b4a:	8c b5       	in	r24, 0x2c	; 44
     b4c:	8f 7d       	andi	r24, 0xDF	; 223
     b4e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     b50:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1); // Shift register Output Enable low (active low)
     b52:	29 98       	cbi	0x05, 1	; 5
     b54:	87 ec       	ldi	r24, 0xC7	; 199
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <Disp_command+0x24>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <Disp_command+0x2a>
     b5e:	00 00       	nop
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     b60:	28 98       	cbi	0x05, 0	; 5
     b62:	8f e7       	ldi	r24, 0x7F	; 127
     b64:	9c e0       	ldi	r25, 0x0C	; 12
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <Disp_command+0x32>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <Disp_command+0x38>
     b6c:	00 00       	nop
     b6e:	08 95       	ret

00000b70 <Disp_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	80 e7       	ldi	r24, 0x70	; 112
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <Disp_init+0x6>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <Disp_init+0x10>
     b80:	00 00       	nop
}

void Disp_init()
{
	_delay_ms(50);
	Disp_command(0b00111000); // 0b00111000
     b82:	88 e3       	ldi	r24, 0x38	; 56
     b84:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b88:	87 ec       	ldi	r24, 0xC7	; 199
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <Disp_init+0x1c>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <Disp_init+0x22>
     b92:	00 00       	nop
	_delay_us(50);
	Disp_command(0b00001111); // 0b00001111
     b94:	8f e0       	ldi	r24, 0x0F	; 15
     b96:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
     b9a:	8f ec       	ldi	r24, 0xCF	; 207
     b9c:	97 e0       	ldi	r25, 0x07	; 7
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <Disp_init+0x2e>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <Disp_init+0x34>
     ba4:	00 00       	nop
	_delay_us(500);
	Disp_command(0b00000001); // 0b00000001
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
     bac:	8f e8       	ldi	r24, 0x8F	; 143
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <Disp_init+0x40>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <Disp_init+0x46>
     bb6:	00 00       	nop
	_delay_us(100);
	Disp_command(0b00000110); // 0b00000111
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
     bbe:	8f e9       	ldi	r24, 0x9F	; 159
     bc0:	9f e0       	ldi	r25, 0x0F	; 15
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <Disp_init+0x52>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <Disp_init+0x58>
     bc8:	00 00       	nop
     bca:	08 95       	ret

00000bcc <Disp_GotoXY>:
	_delay_us(1000);
}

void Disp_GotoXY (int x,int y)   // Go to position x (max 16) in line y (max 2).
{
	if (y == 2) displayAddress = x + 16;
     bcc:	62 30       	cpi	r22, 0x02	; 2
     bce:	71 05       	cpc	r23, r1
     bd0:	29 f4       	brne	.+10     	; 0xbdc <Disp_GotoXY+0x10>
     bd2:	98 2f       	mov	r25, r24
     bd4:	90 5f       	subi	r25, 0xF0	; 240
     bd6:	90 93 00 01 	sts	0x0100, r25
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <Disp_GotoXY+0x14>
	else displayAddress = x;
     bdc:	80 93 00 01 	sts	0x0100, r24
	char lineaddr = ((y-1) * 0x40 + (x-1)) | 0x80;// Put the x position
     be0:	90 e4       	ldi	r25, 0x40	; 64
     be2:	69 9f       	mul	r22, r25
     be4:	80 0d       	add	r24, r0
     be6:	11 24       	eor	r1, r1
     be8:	81 54       	subi	r24, 0x41	; 65
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
     bf0:	08 95       	ret

00000bf2 <Disp_char>:
#include "Macroes.h"
static uint8_t displayAddress = 1;
enum state {stateIdle, stateCarConnected, stateCardSwiped, stateTypePassword, stateWrongPassword, stateCharging, stateChargingStopped, stateDisconnectCar, stateUploadToDB, stateDBoffline, stateUnknownCard, stateDisableCard,stateCardReadError,stateConnectCar,stateErrorState};

void Disp_char(char data)
{
     bf2:	cf 93       	push	r28
     bf4:	c8 2f       	mov	r28, r24
	//static uint8_t displayAddress = 1;
	if (displayAddress == 17) Disp_GotoXY(1,2);
     bf6:	90 91 00 01 	lds	r25, 0x0100
     bfa:	91 31       	cpi	r25, 0x11	; 17
     bfc:	39 f4       	brne	.+14     	; 0xc0c <Disp_char+0x1a>
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <Disp_char+0x30>
	else if (displayAddress == 33)
     c0c:	91 32       	cpi	r25, 0x21	; 33
     c0e:	49 f4       	brne	.+18     	; 0xc22 <Disp_char+0x30>
	{
		 Disp_GotoXY(1,1);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
		 displayAddress = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 00 01 	sts	0x0100, r24
	}
	DDRC |= (1<<DDC4); // RS output
     c22:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4); // RS high = data
     c24:	44 9a       	sbi	0x08, 4	; 8
	SPCR |= (1<<DORD); // Send LSB first
     c26:	8c b5       	in	r24, 0x2c	; 44
     c28:	80 62       	ori	r24, 0x20	; 32
     c2a:	8c bd       	out	0x2c, r24	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     c2c:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     c2e:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     c30:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     c32:	28 98       	cbi	0x05, 0	; 5

	SPI_MasterTransmit(data);
     c34:	8c 2f       	mov	r24, r28
     c36:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB
     c3a:	8c b5       	in	r24, 0x2c	; 44
     c3c:	8f 7d       	andi	r24, 0xDF	; 223
     c3e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     c40:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     c42:	29 98       	cbi	0x05, 1	; 5
     c44:	87 ec       	ldi	r24, 0xC7	; 199
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <Disp_char+0x56>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <Disp_char+0x5c>
     c4e:	00 00       	nop
	//PORTB |= (1<<PORTB0); // Enable display high
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     c50:	28 98       	cbi	0x05, 0	; 5
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
	displayAddress++;
     c52:	80 91 00 01 	lds	r24, 0x0100
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	80 93 00 01 	sts	0x0100, r24
}
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <Disp_printString>:
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
     c66:	88 81       	ld	r24, Y
     c68:	88 23       	and	r24, r24
     c6a:	31 f0       	breq	.+12     	; 0xc78 <Disp_printString+0x18>
	_delay_us(800);
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
     c6c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
     c6e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Disp_char>
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
     c72:	89 91       	ld	r24, Y+
     c74:	81 11       	cpse	r24, r1
     c76:	fb cf       	rjmp	.-10     	; 0xc6e <Disp_printString+0xe>
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
		str++;                     // Increment pointer
	}
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <Disp_clear>:
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
}

void Disp_clear (void)
{
	Disp_command(0x01);      // Send command '0x01' (Display Clear)
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 9a 05 	call	0xb34	; 0xb34 <Disp_command>
     c84:	08 95       	ret

00000c86 <Disp_printState>:
}


void Disp_printState(int state)
{
	switch(state)
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <Disp_printState+0x8>
     c8c:	25 c1       	rjmp	.+586    	; 0xed8 <Disp_printState+0x252>
     c8e:	94 f4       	brge	.+36     	; 0xcb4 <Disp_printState+0x2e>
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	91 05       	cpc	r25, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <Disp_printState+0x12>
     c96:	6f c0       	rjmp	.+222    	; 0xd76 <Disp_printState+0xf0>
     c98:	34 f4       	brge	.+12     	; 0xca6 <Disp_printState+0x20>
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	11 f1       	breq	.+68     	; 0xce2 <Disp_printState+0x5c>
     c9e:	03 97       	sbiw	r24, 0x03	; 3
     ca0:	09 f0       	breq	.+2      	; 0xca4 <Disp_printState+0x1e>
     ca2:	49 c1       	rjmp	.+658    	; 0xf36 <Disp_printState+0x2b0>
     ca4:	35 c0       	rjmp	.+106    	; 0xd10 <Disp_printState+0x8a>
     ca6:	86 30       	cpi	r24, 0x06	; 6
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <Disp_printState+0x28>
     cac:	db c0       	rjmp	.+438    	; 0xe64 <Disp_printState+0x1de>
     cae:	0c f0       	brlt	.+2      	; 0xcb2 <Disp_printState+0x2c>
     cb0:	06 c1       	rjmp	.+524    	; 0xebe <Disp_printState+0x238>
     cb2:	c1 c0       	rjmp	.+386    	; 0xe36 <Disp_printState+0x1b0>
     cb4:	8b 30       	cpi	r24, 0x0B	; 11
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <Disp_printState+0x36>
     cba:	7d c0       	rjmp	.+250    	; 0xdb6 <Disp_printState+0x130>
     cbc:	44 f4       	brge	.+16     	; 0xcce <Disp_printState+0x48>
     cbe:	89 30       	cpi	r24, 0x09	; 9
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Disp_printState+0x40>
     cc4:	16 c1       	rjmp	.+556    	; 0xef2 <Disp_printState+0x26c>
     cc6:	0a 97       	sbiw	r24, 0x0a	; 10
     cc8:	09 f0       	breq	.+2      	; 0xccc <Disp_printState+0x46>
     cca:	35 c1       	rjmp	.+618    	; 0xf36 <Disp_printState+0x2b0>
     ccc:	3e c0       	rjmp	.+124    	; 0xd4a <Disp_printState+0xc4>
     cce:	8d 30       	cpi	r24, 0x0D	; 13
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <Disp_printState+0x50>
     cd4:	dd c0       	rjmp	.+442    	; 0xe90 <Disp_printState+0x20a>
     cd6:	0c f4       	brge	.+2      	; 0xcda <Disp_printState+0x54>
     cd8:	8e c0       	rjmp	.+284    	; 0xdf6 <Disp_printState+0x170>
     cda:	0e 97       	sbiw	r24, 0x0e	; 14
     cdc:	09 f0       	breq	.+2      	; 0xce0 <Disp_printState+0x5a>
     cde:	2b c1       	rjmp	.+598    	; 0xf36 <Disp_printState+0x2b0>
     ce0:	15 c1       	rjmp	.+554    	; 0xf0c <Disp_printState+0x286>
	{
		case stateIdle :
		{
			Disp_clear();
     ce2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Welcome");
     cf2:	8a e3       	ldi	r24, 0x3A	; 58
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Swipe Card");
     d06:	82 e4       	ldi	r24, 0x42	; 66
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     d0e:	08 95       	ret
		case stateTypePassword :
		{
			Disp_clear();
     d10:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Type Password");
     d20:	8d e4       	ldi	r24, 0x4D	; 77
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(7,2);
     d28:	62 e0       	ldi	r22, 0x02	; 2
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	87 e0       	ldi	r24, 0x07	; 7
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("C = cancel");
     d34:	8b e5       	ldi	r24, 0x5B	; 91
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     d3c:	62 e0       	ldi	r22, 0x02	; 2
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
		}
		break;
     d48:	08 95       	ret
		case stateUnknownCard :
		{
			Disp_clear();
     d4a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("card unknown");
     d5a:	86 e6       	ldi	r24, 0x66	; 102
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	87 ea       	ldi	r24, 0xA7	; 167
     d66:	91 e6       	ldi	r25, 0x61	; 97
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	90 40       	sbci	r25, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <Disp_printState+0xe2>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <Disp_printState+0xec>
     d72:	00 00       	nop
     d74:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateWrongPassword :
		{
			Disp_clear();
     d76:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("wrong password");
     d86:	83 e7       	ldi	r24, 0x73	; 115
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("try again");
     d9a:	82 e8       	ldi	r24, 0x82	; 130
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	87 ea       	ldi	r24, 0xA7	; 167
     da6:	91 e6       	ldi	r25, 0x61	; 97
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <Disp_printState+0x122>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <Disp_printState+0x12c>
     db2:	00 00       	nop
     db4:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateDisableCard :
		{
			Disp_clear();
     db6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("card blocked");
     dc6:	8c e8       	ldi	r24, 0x8C	; 140
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("contact service");
     dda:	89 e9       	ldi	r24, 0x99	; 153
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	87 ea       	ldi	r24, 0xA7	; 167
     de6:	91 e6       	ldi	r25, 0x61	; 97
     de8:	21 50       	subi	r18, 0x01	; 1
     dea:	80 40       	sbci	r24, 0x00	; 0
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <Disp_printState+0x162>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <Disp_printState+0x16c>
     df2:	00 00       	nop
     df4:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCardReadError :
		{
			Disp_clear();
     df6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("card read error");
     e06:	89 ea       	ldi	r24, 0xA9	; 169
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("swipe again");
     e1a:	89 eb       	ldi	r24, 0xB9	; 185
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	87 ea       	ldi	r24, 0xA7	; 167
     e26:	91 e6       	ldi	r25, 0x61	; 97
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	80 40       	sbci	r24, 0x00	; 0
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <Disp_printState+0x1a2>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <Disp_printState+0x1ac>
     e32:	00 00       	nop
     e34:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCharging:
		{
			Disp_clear();
     e36:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("P:     mW A:");
     e46:	85 ec       	ldi	r24, 0xC5	; 197
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("E:     mWS    kr");
     e5a:	82 ed       	ldi	r24, 0xD2	; 210
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     e62:	08 95       	ret
		case stateChargingStopped:
		{
			Disp_clear();
     e64:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Charging stopped");
     e74:	83 ee       	ldi	r24, 0xE3	; 227
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
     e7c:	2f ef       	ldi	r18, 0xFF	; 255
     e7e:	87 ea       	ldi	r24, 0xA7	; 167
     e80:	91 e6       	ldi	r25, 0x61	; 97
     e82:	21 50       	subi	r18, 0x01	; 1
     e84:	80 40       	sbci	r24, 0x00	; 0
     e86:	90 40       	sbci	r25, 0x00	; 0
     e88:	e1 f7       	brne	.-8      	; 0xe82 <Disp_printState+0x1fc>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <Disp_printState+0x206>
     e8c:	00 00       	nop
     e8e:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateConnectCar:
		{
			Disp_clear();
     e90:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Connect Car");
     ea0:	84 ef       	ldi	r24, 0xF4	; 244
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
			Disp_GotoXY(1,2);
     ea8:	62 e0       	ldi	r22, 0x02	; 2
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("to continue");
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	94 e0       	ldi	r25, 0x04	; 4
     eb8:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     ebc:	08 95       	ret
		case stateDisconnectCar:
		{
			Disp_clear();
     ebe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Disconnect Car");
     ece:	8c e0       	ldi	r24, 0x0C	; 12
     ed0:	94 e0       	ldi	r25, 0x04	; 4
     ed2:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     ed6:	08 95       	ret
		case stateUploadToDB:
		{
			Disp_clear();
     ed8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Uploading data");
     ee8:	8b e1       	ldi	r24, 0x1B	; 27
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     ef0:	08 95       	ret
		case stateDBoffline :
		{
			Disp_clear();
     ef2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Charger Offline");
     f02:	8a e2       	ldi	r24, 0x2A	; 42
     f04:	94 e0       	ldi	r25, 0x04	; 4
     f06:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
		}
		break;
     f0a:	08 95       	ret
		case stateErrorState :
		{
			Disp_clear();
     f0c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
			Disp_GotoXY(1,1);
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Disp_GotoXY>
			Disp_printString("Error State");
     f1c:	8a e3       	ldi	r24, 0x3A	; 58
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	0e 94 30 06 	call	0xc60	; 0xc60 <Disp_printString>
     f24:	2f ef       	ldi	r18, 0xFF	; 255
     f26:	87 ea       	ldi	r24, 0xA7	; 167
     f28:	91 e6       	ldi	r25, 0x61	; 97
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	80 40       	sbci	r24, 0x00	; 0
     f2e:	90 40       	sbci	r25, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <Disp_printState+0x2a4>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <Disp_printState+0x2ae>
     f34:	00 00       	nop
     f36:	08 95       	ret

00000f38 <KeyTranslate>:
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
	switch  (keyData)
     f38:	8e 3c       	cpi	r24, 0xCE	; 206
     f3a:	09 f4       	brne	.+2      	; 0xf3e <KeyTranslate+0x6>
     f3c:	63 c0       	rjmp	.+198    	; 0x1004 <KeyTranslate+0xcc>
     f3e:	08 f5       	brcc	.+66     	; 0xf82 <KeyTranslate+0x4a>
     f40:	8d 37       	cpi	r24, 0x7D	; 125
     f42:	09 f4       	brne	.+2      	; 0xf46 <KeyTranslate+0xe>
     f44:	43 c0       	rjmp	.+134    	; 0xfcc <KeyTranslate+0x94>
     f46:	70 f4       	brcc	.+28     	; 0xf64 <KeyTranslate+0x2c>
     f48:	8f 30       	cpi	r24, 0x0F	; 15
     f4a:	09 f4       	brne	.+2      	; 0xf4e <KeyTranslate+0x16>
     f4c:	57 c0       	rjmp	.+174    	; 0xffc <KeyTranslate+0xc4>
     f4e:	20 f4       	brcc	.+8      	; 0xf58 <KeyTranslate+0x20>
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <KeyTranslate+0x1e>
     f54:	4f c0       	rjmp	.+158    	; 0xff4 <KeyTranslate+0xbc>
     f56:	5a c0       	rjmp	.+180    	; 0x100c <KeyTranslate+0xd4>
     f58:	87 37       	cpi	r24, 0x77	; 119
     f5a:	71 f1       	breq	.+92     	; 0xfb8 <KeyTranslate+0x80>
     f5c:	8b 37       	cpi	r24, 0x7B	; 123
     f5e:	09 f0       	breq	.+2      	; 0xf62 <KeyTranslate+0x2a>
     f60:	55 c0       	rjmp	.+170    	; 0x100c <KeyTranslate+0xd4>
     f62:	2e c0       	rjmp	.+92     	; 0xfc0 <KeyTranslate+0x88>
     f64:	8b 3b       	cpi	r24, 0xBB	; 187
     f66:	71 f1       	breq	.+92     	; 0xfc4 <KeyTranslate+0x8c>
     f68:	30 f4       	brcc	.+12     	; 0xf76 <KeyTranslate+0x3e>
     f6a:	8e 37       	cpi	r24, 0x7E	; 126
     f6c:	b9 f1       	breq	.+110    	; 0xfdc <KeyTranslate+0xa4>
     f6e:	87 3b       	cpi	r24, 0xB7	; 183
     f70:	09 f0       	breq	.+2      	; 0xf74 <KeyTranslate+0x3c>
     f72:	4c c0       	rjmp	.+152    	; 0x100c <KeyTranslate+0xd4>
     f74:	4d c0       	rjmp	.+154    	; 0x1010 <KeyTranslate+0xd8>
     f76:	8d 3b       	cpi	r24, 0xBD	; 189
     f78:	59 f1       	breq	.+86     	; 0xfd0 <KeyTranslate+0x98>
     f7a:	8e 3b       	cpi	r24, 0xBE	; 190
     f7c:	09 f0       	breq	.+2      	; 0xf80 <KeyTranslate+0x48>
     f7e:	46 c0       	rjmp	.+140    	; 0x100c <KeyTranslate+0xd4>
     f80:	2b c0       	rjmp	.+86     	; 0xfd8 <KeyTranslate+0xa0>
     f82:	87 3e       	cpi	r24, 0xE7	; 231
     f84:	a9 f1       	breq	.+106    	; 0xff0 <KeyTranslate+0xb8>
     f86:	58 f4       	brcc	.+22     	; 0xf9e <KeyTranslate+0x66>
     f88:	8b 3d       	cpi	r24, 0xDB	; 219
     f8a:	f1 f0       	breq	.+60     	; 0xfc8 <KeyTranslate+0x90>
     f8c:	18 f4       	brcc	.+6      	; 0xf94 <KeyTranslate+0x5c>
     f8e:	87 3d       	cpi	r24, 0xD7	; 215
     f90:	e9 f5       	brne	.+122    	; 0x100c <KeyTranslate+0xd4>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <KeyTranslate+0x84>
     f94:	8d 3d       	cpi	r24, 0xDD	; 221
     f96:	f1 f0       	breq	.+60     	; 0xfd4 <KeyTranslate+0x9c>
     f98:	8e 3d       	cpi	r24, 0xDE	; 222
     f9a:	c1 f5       	brne	.+112    	; 0x100c <KeyTranslate+0xd4>
     f9c:	21 c0       	rjmp	.+66     	; 0xfe0 <KeyTranslate+0xa8>
     f9e:	8e 3e       	cpi	r24, 0xEE	; 238
     fa0:	09 f1       	breq	.+66     	; 0xfe4 <KeyTranslate+0xac>
     fa2:	28 f4       	brcc	.+10     	; 0xfae <KeyTranslate+0x76>
     fa4:	8b 3e       	cpi	r24, 0xEB	; 235
     fa6:	11 f1       	breq	.+68     	; 0xfec <KeyTranslate+0xb4>
     fa8:	8d 3e       	cpi	r24, 0xED	; 237
     faa:	81 f5       	brne	.+96     	; 0x100c <KeyTranslate+0xd4>
     fac:	1d c0       	rjmp	.+58     	; 0xfe8 <KeyTranslate+0xb0>
     fae:	80 3f       	cpi	r24, 0xF0	; 240
     fb0:	39 f1       	breq	.+78     	; 0x1000 <KeyTranslate+0xc8>
     fb2:	8f 3f       	cpi	r24, 0xFF	; 255
     fb4:	59 f5       	brne	.+86     	; 0x100c <KeyTranslate+0xd4>
     fb6:	20 c0       	rjmp	.+64     	; 0xff8 <KeyTranslate+0xc0>
	{
		case 0b01110111: kbdChar='1'; break;
     fb8:	81 e3       	ldi	r24, 0x31	; 49
     fba:	08 95       	ret
		case 0b10110111: kbdChar='2'; break;
		case 0b11010111: kbdChar='3'; break;
     fbc:	83 e3       	ldi	r24, 0x33	; 51
     fbe:	08 95       	ret
		case 0b01111011: kbdChar='4'; break;
     fc0:	84 e3       	ldi	r24, 0x34	; 52
     fc2:	08 95       	ret
		case 0b10111011: kbdChar='5'; break;
     fc4:	85 e3       	ldi	r24, 0x35	; 53
     fc6:	08 95       	ret
		case 0b11011011: kbdChar='6'; break;
     fc8:	86 e3       	ldi	r24, 0x36	; 54
     fca:	08 95       	ret
		case 0b01111101: kbdChar='7'; break;
     fcc:	87 e3       	ldi	r24, 0x37	; 55
     fce:	08 95       	ret
		case 0b10111101: kbdChar='8'; break;
     fd0:	88 e3       	ldi	r24, 0x38	; 56
     fd2:	08 95       	ret
		case 0b11011101: kbdChar='9'; break;
     fd4:	89 e3       	ldi	r24, 0x39	; 57
     fd6:	08 95       	ret
		case 0b10111110: kbdChar='0'; break;
     fd8:	80 e3       	ldi	r24, 0x30	; 48
     fda:	08 95       	ret
		case 0b01111110: kbdChar='A'; break;
     fdc:	81 e4       	ldi	r24, 0x41	; 65
     fde:	08 95       	ret
		case 0b11011110: kbdChar='B'; break;
     fe0:	82 e4       	ldi	r24, 0x42	; 66
     fe2:	08 95       	ret
		case 0b11101110: kbdChar='C'; break;
     fe4:	83 e4       	ldi	r24, 0x43	; 67
     fe6:	08 95       	ret
		case 0b11101101: kbdChar='D'; break;
     fe8:	84 e4       	ldi	r24, 0x44	; 68
     fea:	08 95       	ret
		case 0b11101011: kbdChar='E'; break;
     fec:	85 e4       	ldi	r24, 0x45	; 69
     fee:	08 95       	ret
		case 0b11100111: kbdChar='F'; break;
     ff0:	86 e4       	ldi	r24, 0x46	; 70
     ff2:	08 95       	ret
		case 0b00000000: kbdChar='L'; break;
     ff4:	8c e4       	ldi	r24, 0x4C	; 76
     ff6:	08 95       	ret
		case 0b11111111: kbdChar='H'; break;
     ff8:	88 e4       	ldi	r24, 0x48	; 72
     ffa:	08 95       	ret
		case 0b00001111: kbdChar='Q'; break;
     ffc:	81 e5       	ldi	r24, 0x51	; 81
     ffe:	08 95       	ret
		case 0b11110000: kbdChar='P'; break;
    1000:	80 e5       	ldi	r24, 0x50	; 80
    1002:	08 95       	ret
		case 0b11001110: Disp_clear(); break;
    1004:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Disp_clear>
#include <avr/io.h>
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
    1008:	80 e0       	ldi	r24, 0x00	; 0
		case 0b11100111: kbdChar='F'; break;
		case 0b00000000: kbdChar='L'; break;
		case 0b11111111: kbdChar='H'; break;
		case 0b00001111: kbdChar='Q'; break;
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
    100a:	08 95       	ret
		default:		 kbdChar='X'; break;
    100c:	88 e5       	ldi	r24, 0x58	; 88
    100e:	08 95       	ret
{
	char kbdChar = 0;
	switch  (keyData)
	{
		case 0b01110111: kbdChar='1'; break;
		case 0b10110111: kbdChar='2'; break;
    1010:	82 e3       	ldi	r24, 0x32	; 50
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
		default:		 kbdChar='X'; break;
	}
	return kbdChar;
}
    1012:	08 95       	ret

00001014 <DebounceKBD>:
uint8_t static lastKey = 0;
uint8_t static dbCount = 0;
uint8_t static dbLimit = 5;	//Debounce "depth"
bool debounced = false;

	if (keyData == lastKey)
    1014:	90 91 4d 06 	lds	r25, 0x064D
    1018:	89 13       	cpse	r24, r25
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <DebounceKBD+0x22>
	{
		if (dbCount==dbLimit)
    101c:	80 91 4e 06 	lds	r24, 0x064E
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	21 f4       	brne	.+8      	; 0x102c <DebounceKBD+0x18>
		{
			dbCount=0;
    1024:	10 92 4e 06 	sts	0x064E, r1
			return debounced = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	08 95       	ret
		}
		else
		{
			dbCount++;
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 4e 06 	sts	0x064E, r24
			return debounced = false;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	08 95       	ret
		}
	}
	else
	{
		lastKey = keyData;
    1036:	80 93 4d 06 	sts	0x064D, r24
		dbCount=0;
    103a:	10 92 4e 06 	sts	0x064E, r1
		return debounced = false;
    103e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return debounced;
}
    1040:	08 95       	ret

00001042 <KBDchar>:

char KBDchar (uint8_t charReturn)
{
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	18 2f       	mov	r17, r24
	uint8_t keyData;
	static char keyPrevious = 0, keyPressed = 0;

	DDRC  |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C udgang
    104a:	97 b1       	in	r25, 0x07	; 7
    104c:	9f 60       	ori	r25, 0x0F	; 15
    104e:	97 b9       	out	0x07, r25	; 7
	PORTC &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C lav
    1050:	88 b1       	in	r24, 0x08	; 8
    1052:	18 b8       	out	0x08, r1	; 8
	DDRD  &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D indgang
    1054:	8a b1       	in	r24, 0x0a	; 10
    1056:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D pullup
    1058:	9b b1       	in	r25, 0x0b	; 11
    105a:	90 6f       	ori	r25, 0xF0	; 240
    105c:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105e:	87 ec       	ldi	r24, 0xC7	; 199
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <KBDchar+0x20>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <KBDchar+0x26>
    1068:	00 00       	nop
	_delay_us(50);
	keyData = PIND & 0b11110000; // Coloum
    106a:	c9 b1       	in	r28, 0x09	; 9
    106c:	c0 7f       	andi	r28, 0xF0	; 240
	
	DDRC  &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C indgang
    106e:	87 b1       	in	r24, 0x07	; 7
    1070:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C pullup
    1072:	98 b1       	in	r25, 0x08	; 8
    1074:	9f 60       	ori	r25, 0x0F	; 15
    1076:	98 b9       	out	0x08, r25	; 8
	DDRD  |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D udgang
    1078:	9a b1       	in	r25, 0x0a	; 10
    107a:	90 6f       	ori	r25, 0xF0	; 240
    107c:	9a b9       	out	0x0a, r25	; 10
	PORTD &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D lav
    107e:	8b b1       	in	r24, 0x0b	; 11
    1080:	1b b8       	out	0x0b, r1	; 11
    1082:	87 ec       	ldi	r24, 0xC7	; 199
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <KBDchar+0x44>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <KBDchar+0x4a>
    108c:	00 00       	nop
	_delay_us(50);
	keyData |= (PINC & 0b00001111); // Row
    108e:	96 b1       	in	r25, 0x06	; 6
    1090:	9f 70       	andi	r25, 0x0F	; 15
    1092:	c9 2b       	or	r28, r25
	if (keyData != 0xFF)
    1094:	cf 3f       	cpi	r28, 0xFF	; 255
    1096:	a9 f0       	breq	.+42     	; 0x10c2 <KBDchar+0x80>
	{
		keyPressed = KeyTranslate(keyData);
    1098:	8c 2f       	mov	r24, r28
    109a:	0e 94 9c 07 	call	0xf38	; 0xf38 <KeyTranslate>
    109e:	d8 2f       	mov	r29, r24
    10a0:	80 93 4f 06 	sts	0x064F, r24
		if ((keyPressed != keyPrevious) && DebounceKBD(keyData))
    10a4:	80 91 50 06 	lds	r24, 0x0650
    10a8:	d8 17       	cp	r29, r24
    10aa:	79 f0       	breq	.+30     	; 0x10ca <KBDchar+0x88>
    10ac:	8c 2f       	mov	r24, r28
    10ae:	0e 94 0a 08 	call	0x1014	; 0x1014 <DebounceKBD>
    10b2:	88 23       	and	r24, r24
    10b4:	61 f0       	breq	.+24     	; 0x10ce <KBDchar+0x8c>
		{
			keyPrevious = keyPressed;
    10b6:	d0 93 50 06 	sts	0x0650, r29
			if (charReturn != 0)
    10ba:	11 23       	and	r17, r17
    10bc:	49 f0       	breq	.+18     	; 0x10d0 <KBDchar+0x8e>
			{
				return keyPressed;
    10be:	cd 2f       	mov	r28, r29
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <KBDchar+0x8e>
		else
		{
			return 0;
		}		
	}
	keyPrevious = 0;
    10c2:	10 92 50 06 	sts	0x0650, r1
	return 0;
    10c6:	c0 e0       	ldi	r28, 0x00	; 0
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <KBDchar+0x8e>
			}
			else return keyData;
		}
		else
		{
			return 0;
    10ca:	c0 e0       	ldi	r28, 0x00	; 0
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <KBDchar+0x8e>
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
		}		
	}
	keyPrevious = 0;
	return 0;
    10d0:	8c 2f       	mov	r24, r28
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	08 95       	ret

000010da <SPI_MasterInit>:
#include "Macroes.h"

void SPI_MasterInit()
{
	// Set MOSI and SCK  & SS output, all others input
	DDRB |= (1<<DDB5)|(1<<DDB3)|(1<<DDB2);// PB5 = SCK, PB3 = MOSI, PB2 = SS(No effect when output)
    10da:	84 b1       	in	r24, 0x04	; 4
    10dc:	8c 62       	ori	r24, 0x2C	; 44
    10de:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PORTB2); //Pull up resistor on SS input to ensure Master mode
	// Enable SPI, Master, set clock rate fck/64
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    10e0:	82 e5       	ldi	r24, 0x52	; 82
    10e2:	8c bd       	out	0x2c, r24	; 44
    10e4:	08 95       	ret

000010e6 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
    10e6:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    10e8:	0d b4       	in	r0, 0x2d	; 45
    10ea:	07 fe       	sbrs	r0, 7
    10ec:	fd cf       	rjmp	.-6      	; 0x10e8 <SPI_MasterTransmit+0x2>
}
    10ee:	08 95       	ret

000010f0 <RFID_init>:
int state = stateIdle;
unsigned int dataIndex = 0;

void RFID_init()
{
	EICRA |= (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00); // Get interrupt on rising edge
    10f0:	e9 e6       	ldi	r30, 0x69	; 105
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 60       	ori	r24, 0x0F	; 15
    10f8:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1)|(1<<INT0); // Enable external interrupts
    10fa:	8d b3       	in	r24, 0x1d	; 29
    10fc:	83 60       	ori	r24, 0x03	; 3
    10fe:	8d bb       	out	0x1d, r24	; 29
	DDRD &= ~(1<<DDD3)&~(1<<DDD2); //Set external interrupts INT0 & INT1 as inputs
    1100:	8a b1       	in	r24, 0x0a	; 10
    1102:	83 7f       	andi	r24, 0xF3	; 243
    1104:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB2); //Set SS as output. RFID
    1106:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2); //Set SS high (Active low)
    1108:	2a 9a       	sbi	0x05, 2	; 5
    110a:	08 95       	ret

0000110c <Timer_init>:
}

void Timer_init()
{
	TCCR1B = (1<<CS10)|(1<<WGM12);  // Set clock no prescaler(16Mhz) & mode 4 CTC
    110c:	89 e0       	ldi	r24, 0x09	; 9
    110e:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15999;                  // Get interrupt at 15999 = every 1mS
    1112:	8f e7       	ldi	r24, 0x7F	; 127
    1114:	9e e3       	ldi	r25, 0x3E	; 62
    1116:	90 93 89 00 	sts	0x0089, r25
    111a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A);            // Enable interrupt compare match
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	80 93 6f 00 	sts	0x006F, r24
    1124:	08 95       	ret

00001126 <__vector_18>:
}

ISR(USART_RX_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	2f 93       	push	r18
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
	receiveBuffer[dataIndex] = UDR0;
    113a:	80 91 51 06 	lds	r24, 0x0651
    113e:	90 91 52 06 	lds	r25, 0x0652
    1142:	20 91 c6 00 	lds	r18, 0x00C6
    1146:	fc 01       	movw	r30, r24
    1148:	e4 5a       	subi	r30, 0xA4	; 164
    114a:	fa 4f       	sbci	r31, 0xFA	; 250
    114c:	20 83       	st	Z, r18
	if (receiveBuffer[dataIndex] == '*')
    114e:	2a 32       	cpi	r18, 0x2A	; 42
    1150:	41 f4       	brne	.+16     	; 0x1162 <__vector_18+0x3c>
	{
		dataIndex = 0;
    1152:	10 92 52 06 	sts	0x0652, r1
    1156:	10 92 51 06 	sts	0x0651, r1
		packetReceived = true;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 56 06 	sts	0x0656, r24
    1160:	05 c0       	rjmp	.+10     	; 0x116c <__vector_18+0x46>
	}
	else dataIndex++;
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	90 93 52 06 	sts	0x0652, r25
    1168:	80 93 51 06 	sts	0x0651, r24
}
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_11>:

ISR(TIMER1_COMPA_vect) // Comes every 1ms
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
	volatile static uint16_t count1Min = INTERVAL_MIN, count1Sec = INTERVAL_SEC,count9ms = INTERVAL_READKEYS, count100ms = INTERVAL_COM_TIMEOUT,count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
	if (chargingActive)
    118e:	80 91 60 06 	lds	r24, 0x0660
    1192:	88 23       	and	r24, r24
    1194:	f1 f0       	breq	.+60     	; 0x11d2 <__vector_11+0x52>
	{
		if ((--count1Sec) ==0)  // Do if 1 minus countSec = 0
    1196:	80 91 09 01 	lds	r24, 0x0109
    119a:	90 91 0a 01 	lds	r25, 0x010A
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	90 93 0a 01 	sts	0x010A, r25
    11a4:	80 93 09 01 	sts	0x0109, r24
    11a8:	89 2b       	or	r24, r25
    11aa:	c9 f4       	brne	.+50     	; 0x11de <__vector_11+0x5e>
		{
			timeChargedInSeconds++;
    11ac:	80 91 5a 05 	lds	r24, 0x055A
    11b0:	90 91 5b 05 	lds	r25, 0x055B
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	90 93 5b 05 	sts	0x055B, r25
    11ba:	80 93 5a 05 	sts	0x055A, r24
			count1Sec = INTERVAL_SEC; // 1000
    11be:	88 ee       	ldi	r24, 0xE8	; 232
    11c0:	93 e0       	ldi	r25, 0x03	; 3
    11c2:	90 93 0a 01 	sts	0x010A, r25
    11c6:	80 93 09 01 	sts	0x0109, r24
			takeSample = true;      // Set runSec to 1. Activating this function to be run next time
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 61 06 	sts	0x0661, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <__vector_11+0x5e>
		}
	}
	else count1Sec = INTERVAL_SEC;
    11d2:	88 ee       	ldi	r24, 0xE8	; 232
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	90 93 0a 01 	sts	0x010A, r25
    11da:	80 93 09 01 	sts	0x0109, r24
	
	if (keypadActive)
    11de:	80 91 5c 06 	lds	r24, 0x065C
    11e2:	88 23       	and	r24, r24
    11e4:	a9 f0       	breq	.+42     	; 0x1210 <__vector_11+0x90>
	{
		if ((--count9ms) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    11e6:	80 91 07 01 	lds	r24, 0x0107
    11ea:	90 91 08 01 	lds	r25, 0x0108
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	90 93 08 01 	sts	0x0108, r25
    11f4:	80 93 07 01 	sts	0x0107, r24
    11f8:	89 2b       	or	r24, r25
    11fa:	81 f4       	brne	.+32     	; 0x121c <__vector_11+0x9c>
		{
			count9ms = INTERVAL_READKEYS; //
    11fc:	89 e0       	ldi	r24, 0x09	; 9
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	90 93 08 01 	sts	0x0108, r25
    1204:	80 93 07 01 	sts	0x0107, r24
			readKeys = true;      // Set readKeys to 1. Activating this function to be run next time
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 5f 06 	sts	0x065F, r24
    120e:	06 c0       	rjmp	.+12     	; 0x121c <__vector_11+0x9c>
		}
	}
	else count9ms = INTERVAL_READKEYS;
    1210:	89 e0       	ldi	r24, 0x09	; 9
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	90 93 08 01 	sts	0x0108, r25
    1218:	80 93 07 01 	sts	0x0107, r24
	
	if (startComTimeout)
    121c:	80 91 58 06 	lds	r24, 0x0658
    1220:	88 23       	and	r24, r24
    1222:	a9 f0       	breq	.+42     	; 0x124e <__vector_11+0xce>
	{
		if ((--count100ms) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    1224:	80 91 05 01 	lds	r24, 0x0105
    1228:	90 91 06 01 	lds	r25, 0x0106
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	90 93 06 01 	sts	0x0106, r25
    1232:	80 93 05 01 	sts	0x0105, r24
    1236:	89 2b       	or	r24, r25
    1238:	81 f4       	brne	.+32     	; 0x125a <__vector_11+0xda>
		{
			count100ms = INTERVAL_COM_TIMEOUT; //
    123a:	80 e1       	ldi	r24, 0x10	; 16
    123c:	97 e2       	ldi	r25, 0x27	; 39
    123e:	90 93 06 01 	sts	0x0106, r25
    1242:	80 93 05 01 	sts	0x0105, r24
			comTimeout = true;      // Set readKeys to 1. Activating this function to be run next time
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 5a 06 	sts	0x065A, r24
    124c:	06 c0       	rjmp	.+12     	; 0x125a <__vector_11+0xda>
		}
	}
	else count100ms = INTERVAL_COM_TIMEOUT;
    124e:	80 e1       	ldi	r24, 0x10	; 16
    1250:	97 e2       	ldi	r25, 0x27	; 39
    1252:	90 93 06 01 	sts	0x0106, r25
    1256:	80 93 05 01 	sts	0x0105, r24

	if (startConnectCarTimeout)
    125a:	80 91 57 06 	lds	r24, 0x0657
    125e:	88 23       	and	r24, r24
    1260:	a9 f0       	breq	.+42     	; 0x128c <__vector_11+0x10c>
	{
		if ((--count10Sec) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    1262:	80 91 03 01 	lds	r24, 0x0103
    1266:	90 91 04 01 	lds	r25, 0x0104
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	90 93 04 01 	sts	0x0104, r25
    1270:	80 93 03 01 	sts	0x0103, r24
    1274:	89 2b       	or	r24, r25
    1276:	81 f4       	brne	.+32     	; 0x1298 <__vector_11+0x118>
		{
			count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT; //
    1278:	80 e1       	ldi	r24, 0x10	; 16
    127a:	97 e2       	ldi	r25, 0x27	; 39
    127c:	90 93 04 01 	sts	0x0104, r25
    1280:	80 93 03 01 	sts	0x0103, r24
			connectCarTimeout = true;      // Set readKeys to 1. Activating this function to be run next time
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 59 06 	sts	0x0659, r24
    128a:	06 c0       	rjmp	.+12     	; 0x1298 <__vector_11+0x118>
		}
	}
	else count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
    128c:	80 e1       	ldi	r24, 0x10	; 16
    128e:	97 e2       	ldi	r25, 0x27	; 39
    1290:	90 93 04 01 	sts	0x0104, r25
    1294:	80 93 03 01 	sts	0x0103, r24
	
	if (noConnection)
    1298:	80 91 63 06 	lds	r24, 0x0663
    129c:	88 23       	and	r24, r24
    129e:	a9 f0       	breq	.+42     	; 0x12ca <__vector_11+0x14a>
	{
		if ((--count1Min) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    12a0:	80 91 01 01 	lds	r24, 0x0101
    12a4:	90 91 02 01 	lds	r25, 0x0102
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	90 93 02 01 	sts	0x0102, r25
    12ae:	80 93 01 01 	sts	0x0101, r24
    12b2:	89 2b       	or	r24, r25
    12b4:	81 f4       	brne	.+32     	; 0x12d6 <__vector_11+0x156>
		{
			count1Min = INTERVAL_MIN; //
    12b6:	80 e6       	ldi	r24, 0x60	; 96
    12b8:	9a ee       	ldi	r25, 0xEA	; 234
    12ba:	90 93 02 01 	sts	0x0102, r25
    12be:	80 93 01 01 	sts	0x0101, r24
			tryConnect = true;      // Set readKeys to 1. Activating this function to be run next time
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 62 06 	sts	0x0662, r24
    12c8:	06 c0       	rjmp	.+12     	; 0x12d6 <__vector_11+0x156>
		}
	}
	else count1Min = INTERVAL_MIN;
    12ca:	80 e6       	ldi	r24, 0x60	; 96
    12cc:	9a ee       	ldi	r25, 0xEA	; 234
    12ce:	90 93 02 01 	sts	0x0102, r25
    12d2:	80 93 01 01 	sts	0x0101, r24
}
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_1>:

ISR(INT0_vect)
{
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	8f 93       	push	r24
	if (!dataReady) cardPresent = true;
    12f0:	80 91 5d 06 	lds	r24, 0x065D
    12f4:	81 11       	cpse	r24, r1
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <__vector_1+0x1a>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 5e 06 	sts	0x065E, r24
	//UART_Transmit_String("card present");
}
    12fe:	8f 91       	pop	r24
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_2>:

ISR(INT1_vect)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	8f 93       	push	r24
	dataReady = true;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 5d 06 	sts	0x065D, r24
	//UART_Transmit_String("data ready");
}
    131c:	8f 91       	pop	r24
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <main>:

int main(void)
{
	int preState = 99;
	SPI_MasterInit();
    1328:	0e 94 6d 08 	call	0x10da	; 0x10da <SPI_MasterInit>
	UART_Init();
    132c:	0e 94 8d 0b 	call	0x171a	; 0x171a <UART_Init>
	RFID_init();
    1330:	0e 94 78 08 	call	0x10f0	; 0x10f0 <RFID_init>
	Timer_init();
    1334:	0e 94 86 08 	call	0x110c	; 0x110c <Timer_init>
	Disp_init();
    1338:	0e 94 b8 05 	call	0xb70	; 0xb70 <Disp_init>
	ADC_init();
    133c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	sei();
    1340:	78 94       	sei
	UART_Transmit_String("Card test \n");
    1342:	86 e4       	ldi	r24, 0x46	; 70
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
	//UART_Transmit_String("data ready");
}

int main(void)
{
	int preState = 99;
    134a:	23 e6       	ldi	r18, 0x63	; 99
    134c:	30 e0       	ldi	r19, 0x00	; 0
				{
					UART_Transmit_String("stateDisconnectCar \n");
					Disp_printState(state);
					while (ADC_Sample() > 5);
					preState = state;
					state = stateUploadToDB;
    134e:	c8 e0       	ldi	r28, 0x08	; 8
    1350:	d0 e0       	ldi	r29, 0x00	; 0
					preState = state;
					//state = stateIdle;
				}
				break;
				
				default : state=stateErrorState; break;
    1352:	0f 2e       	mov	r0, r31
    1354:	fe e0       	ldi	r31, 0x0E	; 14
    1356:	cf 2e       	mov	r12, r31
    1358:	d1 2c       	mov	r13, r1
    135a:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateConnectCar \n");
					Disp_printState(state);
					if (CarConnected())
					{
						preState = state;
						state = stateCharging;
    135c:	0f 2e       	mov	r0, r31
    135e:	f5 e0       	ldi	r31, 0x05	; 5
    1360:	8f 2e       	mov	r8, r31
    1362:	91 2c       	mov	r9, r1
    1364:	f0 2d       	mov	r31, r0
						state = stateIdle;
					} 
					else
					{
						preState = state;
						state = stateDBoffline;
    1366:	0f 2e       	mov	r0, r31
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	6f 2e       	mov	r6, r31
    136c:	71 2c       	mov	r7, r1
    136e:	f0 2d       	mov	r31, r0
							state = stateIdle;
						} 
						else
						{
							preState = state;
							state = stateWrongPassword;
    1370:	68 94       	set
    1372:	22 24       	eor	r2, r2
    1374:	22 f8       	bld	r2, 2
    1376:	31 2c       	mov	r3, r1
				{
					UART_Transmit_String("stateCharging \n");
					Disp_printState(state);
					BeginCharging();
					preState = state;
					state = stateChargingStopped;
    1378:	0f 2e       	mov	r0, r31
    137a:	f6 e0       	ldi	r31, 0x06	; 6
    137c:	ef 2e       	mov	r14, r31
    137e:	f1 2c       	mov	r15, r1
    1380:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateChargingStopped \n");
					Disp_printState(state);
					if (ADC_Sample() > 5)
					{
						preState = state;
						state = stateDisconnectCar;
    1382:	0f 2e       	mov	r0, r31
    1384:	f7 e0       	ldi	r31, 0x07	; 7
    1386:	4f 2e       	mov	r4, r31
    1388:	51 2c       	mov	r5, r1
    138a:	f0 2d       	mov	r31, r0
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
					Disp_printState(state);
					preState = state;
					state = stateTypePassword;
    138c:	03 e0       	ldi	r16, 0x03	; 3
    138e:	10 e0       	ldi	r17, 0x00	; 0
						gotUID = false;
					}
					else
					{
						preState = state;
						state = stateCardReadError;
    1390:	0f 2e       	mov	r0, r31
    1392:	fc e0       	ldi	r31, 0x0C	; 12
    1394:	af 2e       	mov	r10, r31
    1396:	b1 2c       	mov	r11, r1
    1398:	f0 2d       	mov	r31, r0
    139a:	01 c0       	rjmp	.+2      	; 0x139e <main+0x76>
	ADC_init();
	sei();
	UART_Transmit_String("Card test \n");
	while(1)
	{
		if ((state != preState) || (cardPresent && (state == stateIdle)))
    139c:	9c 01       	movw	r18, r24
    139e:	80 91 53 06 	lds	r24, 0x0653
    13a2:	90 91 54 06 	lds	r25, 0x0654
    13a6:	82 17       	cp	r24, r18
    13a8:	93 07       	cpc	r25, r19
    13aa:	41 f4       	brne	.+16     	; 0x13bc <main+0x94>
    13ac:	20 91 5e 06 	lds	r18, 0x065E
    13b0:	22 23       	and	r18, r18
    13b2:	a1 f3       	breq	.-24     	; 0x139c <main+0x74>
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	91 f1       	breq	.+100    	; 0x141c <main+0xf4>
    13b8:	9c 01       	movw	r18, r24
    13ba:	f1 cf       	rjmp	.-30     	; 0x139e <main+0x76>
		{
			switch(state)
    13bc:	87 30       	cpi	r24, 0x07	; 7
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <main+0x9c>
    13c2:	4b c1       	rjmp	.+662    	; 0x165a <main+0x332>
    13c4:	94 f4       	brge	.+36     	; 0x13ea <main+0xc2>
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <main+0xa6>
    13cc:	8d c0       	rjmp	.+282    	; 0x14e8 <main+0x1c0>
    13ce:	34 f4       	brge	.+12     	; 0x13dc <main+0xb4>
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	21 f1       	breq	.+72     	; 0x141c <main+0xf4>
    13d4:	02 97       	sbiw	r24, 0x02	; 2
    13d6:	09 f0       	breq	.+2      	; 0x13da <main+0xb2>
    13d8:	9b c1       	rjmp	.+822    	; 0x1710 <main+0x3e8>
    13da:	44 c0       	rjmp	.+136    	; 0x1464 <main+0x13c>
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <main+0xbc>
    13e2:	06 c1       	rjmp	.+524    	; 0x15f0 <main+0x2c8>
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <main+0xc0>
    13e6:	19 c1       	rjmp	.+562    	; 0x161a <main+0x2f2>
    13e8:	d0 c0       	rjmp	.+416    	; 0x158a <main+0x262>
    13ea:	8a 30       	cpi	r24, 0x0A	; 10
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <main+0xca>
    13f0:	b9 c0       	rjmp	.+370    	; 0x1564 <main+0x23c>
    13f2:	44 f4       	brge	.+16     	; 0x1404 <main+0xdc>
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <main+0xd4>
    13fa:	46 c1       	rjmp	.+652    	; 0x1688 <main+0x360>
    13fc:	09 97       	sbiw	r24, 0x09	; 9
    13fe:	09 f0       	breq	.+2      	; 0x1402 <main+0xda>
    1400:	87 c1       	rjmp	.+782    	; 0x1710 <main+0x3e8>
    1402:	62 c1       	rjmp	.+708    	; 0x16c8 <main+0x3a0>
    1404:	8d 30       	cpi	r24, 0x0D	; 13
    1406:	91 05       	cpc	r25, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <main+0xe4>
    140a:	d2 c0       	rjmp	.+420    	; 0x15b0 <main+0x288>
    140c:	8e 30       	cpi	r24, 0x0E	; 14
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <main+0xec>
    1412:	6f c1       	rjmp	.+734    	; 0x16f2 <main+0x3ca>
    1414:	0c 97       	sbiw	r24, 0x0c	; 12
    1416:	09 f0       	breq	.+2      	; 0x141a <main+0xf2>
    1418:	7b c1       	rjmp	.+758    	; 0x1710 <main+0x3e8>
    141a:	53 c0       	rjmp	.+166    	; 0x14c2 <main+0x19a>
			{
				case stateIdle :
				{
					UART_Transmit_String("stateIdle \n");
    141c:	82 e5       	ldi	r24, 0x52	; 82
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    1424:	80 91 53 06 	lds	r24, 0x0653
    1428:	90 91 54 06 	lds	r25, 0x0654
    142c:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					if(cardPresent)
    1430:	80 91 5e 06 	lds	r24, 0x065E
    1434:	88 23       	and	r24, r24
    1436:	89 f0       	breq	.+34     	; 0x145a <main+0x132>
					{
						UART_Transmit_String("Card Present \n");
    1438:	8e e5       	ldi	r24, 0x5E	; 94
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
						GetUID();
    1440:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetUID>
						preState = state;
    1444:	20 91 53 06 	lds	r18, 0x0653
    1448:	30 91 54 06 	lds	r19, 0x0654
						state=stateCardSwiped;
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 54 06 	sts	0x0654, r25
    1454:	80 93 53 06 	sts	0x0653, r24
    1458:	a2 cf       	rjmp	.-188    	; 0x139e <main+0x76>
					}
					else preState = state;
    145a:	20 91 53 06 	lds	r18, 0x0653
    145e:	30 91 54 06 	lds	r19, 0x0654
    1462:	9d cf       	rjmp	.-198    	; 0x139e <main+0x76>
				}
				break;
				
				case stateCardSwiped :
				{
					UART_Transmit_String("stateCardSwiped \n");
    1464:	8d e6       	ldi	r24, 0x6D	; 109
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					if (gotUID)
    146c:	80 91 5b 06 	lds	r24, 0x065B
    1470:	88 23       	and	r24, r24
    1472:	f1 f0       	breq	.+60     	; 0x14b0 <main+0x188>
					{
						UART_Transmit_String("got UID \n");
    1474:	8f e7       	ldi	r24, 0x7F	; 127
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
						if (CardKnown()) // Find card ID in database
    147c:	0e 94 2f 02 	call	0x45e	; 0x45e <CardKnown>
    1480:	88 23       	and	r24, r24
    1482:	49 f0       	breq	.+18     	; 0x1496 <main+0x16e>
						{
							preState = state;
    1484:	20 91 53 06 	lds	r18, 0x0653
    1488:	30 91 54 06 	lds	r19, 0x0654
							state = stateTypePassword;
    148c:	10 93 54 06 	sts	0x0654, r17
    1490:	00 93 53 06 	sts	0x0653, r16
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <main+0x182>
						}
						else
						{
							preState = state;
    1496:	20 91 53 06 	lds	r18, 0x0653
    149a:	30 91 54 06 	lds	r19, 0x0654
							state = stateUnknownCard;
    149e:	8a e0       	ldi	r24, 0x0A	; 10
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	90 93 54 06 	sts	0x0654, r25
    14a6:	80 93 53 06 	sts	0x0653, r24
						}
						gotUID = false;
    14aa:	10 92 5b 06 	sts	0x065B, r1
    14ae:	77 cf       	rjmp	.-274    	; 0x139e <main+0x76>
					}
					else
					{
						preState = state;
    14b0:	20 91 53 06 	lds	r18, 0x0653
    14b4:	30 91 54 06 	lds	r19, 0x0654
						state = stateCardReadError;
    14b8:	b0 92 54 06 	sts	0x0654, r11
    14bc:	a0 92 53 06 	sts	0x0653, r10
    14c0:	6e cf       	rjmp	.-292    	; 0x139e <main+0x76>
				}
				break;
				
				case stateCardReadError:
				{
					UART_Transmit_String("Did not get UID \n");
    14c2:	89 e8       	ldi	r24, 0x89	; 137
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    14ca:	80 91 53 06 	lds	r24, 0x0653
    14ce:	90 91 54 06 	lds	r25, 0x0654
    14d2:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					preState = state;
    14d6:	20 91 53 06 	lds	r18, 0x0653
    14da:	30 91 54 06 	lds	r19, 0x0654
					state = stateIdle;
    14de:	10 92 54 06 	sts	0x0654, r1
    14e2:	10 92 53 06 	sts	0x0653, r1
				}
				break;
    14e6:	5b cf       	rjmp	.-330    	; 0x139e <main+0x76>
				
				case stateTypePassword:
				{
					UART_Transmit_String("stateTypePassword \n");
    14e8:	8b e9       	ldi	r24, 0x9B	; 155
    14ea:	94 e0       	ldi	r25, 0x04	; 4
    14ec:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    14f0:	80 91 53 06 	lds	r24, 0x0653
    14f4:	90 91 54 06 	lds	r25, 0x0654
    14f8:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					if (ValidatePassword())// Get typed password and validate in database
    14fc:	0e 94 85 02 	call	0x50a	; 0x50a <ValidatePassword>
    1500:	88 23       	and	r24, r24
    1502:	c1 f0       	breq	.+48     	; 0x1534 <main+0x20c>
					{
						if (ADC_Sample() < 5)
    1504:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1508:	05 97       	sbiw	r24, 0x05	; 5
    150a:	58 f4       	brcc	.+22     	; 0x1522 <main+0x1fa>
						{
							preState = state;
    150c:	20 91 53 06 	lds	r18, 0x0653
    1510:	30 91 54 06 	lds	r19, 0x0654
							state = stateConnectCar;
    1514:	8d e0       	ldi	r24, 0x0D	; 13
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	90 93 54 06 	sts	0x0654, r25
    151c:	80 93 53 06 	sts	0x0653, r24
    1520:	3e cf       	rjmp	.-388    	; 0x139e <main+0x76>
						}
						else
						{
							preState = state;
    1522:	20 91 53 06 	lds	r18, 0x0653
    1526:	30 91 54 06 	lds	r19, 0x0654
							state = stateCharging;
    152a:	90 92 54 06 	sts	0x0654, r9
    152e:	80 92 53 06 	sts	0x0653, r8
    1532:	35 cf       	rjmp	.-406    	; 0x139e <main+0x76>
						}
					}
					else
					{
						if (cancelPassword)
    1534:	80 91 55 06 	lds	r24, 0x0655
    1538:	88 23       	and	r24, r24
    153a:	59 f0       	breq	.+22     	; 0x1552 <main+0x22a>
						{
							cancelPassword = false;
    153c:	10 92 55 06 	sts	0x0655, r1
							preState = state;
    1540:	20 91 53 06 	lds	r18, 0x0653
    1544:	30 91 54 06 	lds	r19, 0x0654
							state = stateIdle;
    1548:	10 92 54 06 	sts	0x0654, r1
    154c:	10 92 53 06 	sts	0x0653, r1
    1550:	26 cf       	rjmp	.-436    	; 0x139e <main+0x76>
						} 
						else
						{
							preState = state;
    1552:	20 91 53 06 	lds	r18, 0x0653
    1556:	30 91 54 06 	lds	r19, 0x0654
							state = stateWrongPassword;
    155a:	30 92 54 06 	sts	0x0654, r3
    155e:	20 92 53 06 	sts	0x0653, r2
    1562:	1d cf       	rjmp	.-454    	; 0x139e <main+0x76>
				}
				break;
				
				case stateUnknownCard:
				{
					UART_Transmit_String("stateUnknownCard \n");
    1564:	8f ea       	ldi	r24, 0xAF	; 175
    1566:	94 e0       	ldi	r25, 0x04	; 4
    1568:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    156c:	80 91 53 06 	lds	r24, 0x0653
    1570:	90 91 54 06 	lds	r25, 0x0654
    1574:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					preState = state;
    1578:	20 91 53 06 	lds	r18, 0x0653
    157c:	30 91 54 06 	lds	r19, 0x0654
					state = stateIdle;
    1580:	10 92 54 06 	sts	0x0654, r1
    1584:	10 92 53 06 	sts	0x0653, r1
				}
				break;
    1588:	0a cf       	rjmp	.-492    	; 0x139e <main+0x76>
				
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
    158a:	82 ec       	ldi	r24, 0xC2	; 194
    158c:	94 e0       	ldi	r25, 0x04	; 4
    158e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    1592:	80 91 53 06 	lds	r24, 0x0653
    1596:	90 91 54 06 	lds	r25, 0x0654
    159a:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					preState = state;
    159e:	20 91 53 06 	lds	r18, 0x0653
    15a2:	30 91 54 06 	lds	r19, 0x0654
					state = stateTypePassword;
    15a6:	10 93 54 06 	sts	0x0654, r17
    15aa:	00 93 53 06 	sts	0x0653, r16
				}
				break;
    15ae:	f7 ce       	rjmp	.-530    	; 0x139e <main+0x76>
				
				case stateConnectCar:
				{
					UART_Transmit_String("stateConnectCar \n");
    15b0:	87 ed       	ldi	r24, 0xD7	; 215
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    15b8:	80 91 53 06 	lds	r24, 0x0653
    15bc:	90 91 54 06 	lds	r25, 0x0654
    15c0:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					if (CarConnected())
    15c4:	0e 94 88 03 	call	0x710	; 0x710 <CarConnected>
    15c8:	88 23       	and	r24, r24
    15ca:	49 f0       	breq	.+18     	; 0x15de <main+0x2b6>
					{
						preState = state;
    15cc:	20 91 53 06 	lds	r18, 0x0653
    15d0:	30 91 54 06 	lds	r19, 0x0654
						state = stateCharging;
    15d4:	90 92 54 06 	sts	0x0654, r9
    15d8:	80 92 53 06 	sts	0x0653, r8
    15dc:	e0 ce       	rjmp	.-576    	; 0x139e <main+0x76>
					}
					else
					{
						preState = state;
    15de:	20 91 53 06 	lds	r18, 0x0653
    15e2:	30 91 54 06 	lds	r19, 0x0654
						state = stateIdle;
    15e6:	10 92 54 06 	sts	0x0654, r1
    15ea:	10 92 53 06 	sts	0x0653, r1
    15ee:	d7 ce       	rjmp	.-594    	; 0x139e <main+0x76>
				}
				break;
				
				case stateCharging:
				{
					UART_Transmit_String("stateCharging \n");
    15f0:	89 ee       	ldi	r24, 0xE9	; 233
    15f2:	94 e0       	ldi	r25, 0x04	; 4
    15f4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    15f8:	80 91 53 06 	lds	r24, 0x0653
    15fc:	90 91 54 06 	lds	r25, 0x0654
    1600:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					BeginCharging();
    1604:	0e 94 a7 03 	call	0x74e	; 0x74e <BeginCharging>
					preState = state;
    1608:	20 91 53 06 	lds	r18, 0x0653
    160c:	30 91 54 06 	lds	r19, 0x0654
					state = stateChargingStopped;
    1610:	f0 92 54 06 	sts	0x0654, r15
    1614:	e0 92 53 06 	sts	0x0653, r14
				}
				break;
    1618:	c2 ce       	rjmp	.-636    	; 0x139e <main+0x76>
				
				case stateChargingStopped:
				{
					UART_Transmit_String("stateChargingStopped \n");
    161a:	89 ef       	ldi	r24, 0xF9	; 249
    161c:	94 e0       	ldi	r25, 0x04	; 4
    161e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    1622:	80 91 53 06 	lds	r24, 0x0653
    1626:	90 91 54 06 	lds	r25, 0x0654
    162a:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					if (ADC_Sample() > 5)
    162e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1632:	06 97       	sbiw	r24, 0x06	; 6
    1634:	48 f0       	brcs	.+18     	; 0x1648 <main+0x320>
					{
						preState = state;
    1636:	20 91 53 06 	lds	r18, 0x0653
    163a:	30 91 54 06 	lds	r19, 0x0654
						state = stateDisconnectCar;
    163e:	50 92 54 06 	sts	0x0654, r5
    1642:	40 92 53 06 	sts	0x0653, r4
    1646:	ab ce       	rjmp	.-682    	; 0x139e <main+0x76>
					} 
					else
					{
						preState = state;
    1648:	20 91 53 06 	lds	r18, 0x0653
    164c:	30 91 54 06 	lds	r19, 0x0654
						state = stateUploadToDB;
    1650:	d0 93 54 06 	sts	0x0654, r29
    1654:	c0 93 53 06 	sts	0x0653, r28
    1658:	a2 ce       	rjmp	.-700    	; 0x139e <main+0x76>
				}
				break;
				
				case stateDisconnectCar:
				{
					UART_Transmit_String("stateDisconnectCar \n");
    165a:	80 e1       	ldi	r24, 0x10	; 16
    165c:	95 e0       	ldi	r25, 0x05	; 5
    165e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    1662:	80 91 53 06 	lds	r24, 0x0653
    1666:	90 91 54 06 	lds	r25, 0x0654
    166a:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					while (ADC_Sample() > 5);
    166e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1672:	06 97       	sbiw	r24, 0x06	; 6
    1674:	e0 f7       	brcc	.-8      	; 0x166e <main+0x346>
					preState = state;
    1676:	20 91 53 06 	lds	r18, 0x0653
    167a:	30 91 54 06 	lds	r19, 0x0654
					state = stateUploadToDB;
    167e:	d0 93 54 06 	sts	0x0654, r29
    1682:	c0 93 53 06 	sts	0x0653, r28
				}
				break;
    1686:	8b ce       	rjmp	.-746    	; 0x139e <main+0x76>
				
				case stateUploadToDB:
				{
					UART_Transmit_String("stateUploadToDB \n");
    1688:	85 e2       	ldi	r24, 0x25	; 37
    168a:	95 e0       	ldi	r25, 0x05	; 5
    168c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    1690:	80 91 53 06 	lds	r24, 0x0653
    1694:	90 91 54 06 	lds	r25, 0x0654
    1698:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					if (UploadFinishedCharge())
    169c:	0e 94 13 03 	call	0x626	; 0x626 <UploadFinishedCharge>
    16a0:	88 23       	and	r24, r24
    16a2:	49 f0       	breq	.+18     	; 0x16b6 <main+0x38e>
					{
						preState = state;
    16a4:	20 91 53 06 	lds	r18, 0x0653
    16a8:	30 91 54 06 	lds	r19, 0x0654
						state = stateIdle;
    16ac:	10 92 54 06 	sts	0x0654, r1
    16b0:	10 92 53 06 	sts	0x0653, r1
    16b4:	74 ce       	rjmp	.-792    	; 0x139e <main+0x76>
					} 
					else
					{
						preState = state;
    16b6:	20 91 53 06 	lds	r18, 0x0653
    16ba:	30 91 54 06 	lds	r19, 0x0654
						state = stateDBoffline;
    16be:	70 92 54 06 	sts	0x0654, r7
    16c2:	60 92 53 06 	sts	0x0653, r6
    16c6:	6b ce       	rjmp	.-810    	; 0x139e <main+0x76>
				}
				break;
				
				case stateDBoffline:
				{
					UART_Transmit_String("stateDBoffline \n");
    16c8:	87 e3       	ldi	r24, 0x37	; 55
    16ca:	95 e0       	ldi	r25, 0x05	; 5
    16cc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    16d0:	80 91 53 06 	lds	r24, 0x0653
    16d4:	90 91 54 06 	lds	r25, 0x0654
    16d8:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					TryConnection();
    16dc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <TryConnection>
					preState = state;
    16e0:	20 91 53 06 	lds	r18, 0x0653
    16e4:	30 91 54 06 	lds	r19, 0x0654
					state = stateIdle;
    16e8:	10 92 54 06 	sts	0x0654, r1
    16ec:	10 92 53 06 	sts	0x0653, r1
				}
				break;
    16f0:	56 ce       	rjmp	.-852    	; 0x139e <main+0x76>
				
				case stateErrorState:
				{
					UART_Transmit_String("stateErrorState \n");
    16f2:	88 e4       	ldi	r24, 0x48	; 72
    16f4:	95 e0       	ldi	r25, 0x05	; 5
    16f6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <UART_Transmit_String>
					Disp_printState(state);
    16fa:	80 91 53 06 	lds	r24, 0x0653
    16fe:	90 91 54 06 	lds	r25, 0x0654
    1702:	0e 94 43 06 	call	0xc86	; 0xc86 <Disp_printState>
					preState = state;
    1706:	20 91 53 06 	lds	r18, 0x0653
    170a:	30 91 54 06 	lds	r19, 0x0654
					//state = stateIdle;
				}
				break;
    170e:	47 ce       	rjmp	.-882    	; 0x139e <main+0x76>
				
				default : state=stateErrorState; break;
    1710:	d0 92 54 06 	sts	0x0654, r13
    1714:	c0 92 53 06 	sts	0x0653, r12
    1718:	42 ce       	rjmp	.-892    	; 0x139e <main+0x76>

0000171a <UART_Init>:

void UART_Init()
{
	//SREG = (1<<I); //Enable global interrupts // Same as: sei();
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    171a:	88 e9       	ldi	r24, 0x98	; 152
    171c:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1720:	86 e0       	ldi	r24, 0x06	; 6
    1722:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = (1<<U2X0);//Double the USART Transmission Speed
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	80 93 c0 00 	sts	0x00C0, r24
	/* Set baud rate */
	//UBRR0H = (unsigned char)(baud>>8);
	UBRR0L = 0x67; // 19200
    172c:	87 e6       	ldi	r24, 0x67	; 103
    172e:	80 93 c4 00 	sts	0x00C4, r24
    1732:	08 95       	ret

00001734 <UART_Transmit>:
}

void UART_Transmit(char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1734:	e0 ec       	ldi	r30, 0xC0	; 192
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	90 81       	ld	r25, Z
    173a:	95 ff       	sbrs	r25, 5
    173c:	fd cf       	rjmp	.-6      	; 0x1738 <UART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    173e:	80 93 c6 00 	sts	0x00C6, r24
    1742:	08 95       	ret

00001744 <UART_Transmit_String>:
}

void UART_Transmit_String(char *str)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
    174a:	88 81       	ld	r24, Y
    174c:	88 23       	and	r24, r24
    174e:	31 f0       	breq	.+12     	; 0x175c <UART_Transmit_String+0x18>
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

void UART_Transmit_String(char *str)
    1750:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
    1752:	0e 94 9a 0b 	call	0x1734	; 0x1734 <UART_Transmit>
	UDR0 = data;
}

void UART_Transmit_String(char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
    1756:	89 91       	ld	r24, Y+
    1758:	81 11       	cpse	r24, r1
    175a:	fb cf       	rjmp	.-10     	; 0x1752 <UART_Transmit_String+0xe>
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
		str++;                    // Increment pointer
	}
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <__subsf3>:
    1762:	50 58       	subi	r21, 0x80	; 128

00001764 <__addsf3>:
    1764:	bb 27       	eor	r27, r27
    1766:	aa 27       	eor	r26, r26
    1768:	0e d0       	rcall	.+28     	; 0x1786 <__addsf3x>
    176a:	ac c1       	rjmp	.+856    	; 0x1ac4 <__fp_round>
    176c:	9d d1       	rcall	.+826    	; 0x1aa8 <__fp_pscA>
    176e:	30 f0       	brcs	.+12     	; 0x177c <__addsf3+0x18>
    1770:	a2 d1       	rcall	.+836    	; 0x1ab6 <__fp_pscB>
    1772:	20 f0       	brcs	.+8      	; 0x177c <__addsf3+0x18>
    1774:	31 f4       	brne	.+12     	; 0x1782 <__addsf3+0x1e>
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	11 f4       	brne	.+4      	; 0x177e <__addsf3+0x1a>
    177a:	1e f4       	brtc	.+6      	; 0x1782 <__addsf3+0x1e>
    177c:	92 c1       	rjmp	.+804    	; 0x1aa2 <__fp_nan>
    177e:	0e f4       	brtc	.+2      	; 0x1782 <__addsf3+0x1e>
    1780:	e0 95       	com	r30
    1782:	e7 fb       	bst	r30, 7
    1784:	5f c1       	rjmp	.+702    	; 0x1a44 <__fp_inf>

00001786 <__addsf3x>:
    1786:	e9 2f       	mov	r30, r25
    1788:	ae d1       	rcall	.+860    	; 0x1ae6 <__fp_split3>
    178a:	80 f3       	brcs	.-32     	; 0x176c <__addsf3+0x8>
    178c:	ba 17       	cp	r27, r26
    178e:	62 07       	cpc	r22, r18
    1790:	73 07       	cpc	r23, r19
    1792:	84 07       	cpc	r24, r20
    1794:	95 07       	cpc	r25, r21
    1796:	18 f0       	brcs	.+6      	; 0x179e <__addsf3x+0x18>
    1798:	71 f4       	brne	.+28     	; 0x17b6 <__addsf3x+0x30>
    179a:	9e f5       	brtc	.+102    	; 0x1802 <__addsf3x+0x7c>
    179c:	dd c1       	rjmp	.+954    	; 0x1b58 <__fp_zero>
    179e:	0e f4       	brtc	.+2      	; 0x17a2 <__addsf3x+0x1c>
    17a0:	e0 95       	com	r30
    17a2:	0b 2e       	mov	r0, r27
    17a4:	ba 2f       	mov	r27, r26
    17a6:	a0 2d       	mov	r26, r0
    17a8:	0b 01       	movw	r0, r22
    17aa:	b9 01       	movw	r22, r18
    17ac:	90 01       	movw	r18, r0
    17ae:	0c 01       	movw	r0, r24
    17b0:	ca 01       	movw	r24, r20
    17b2:	a0 01       	movw	r20, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	ff 27       	eor	r31, r31
    17b8:	59 1b       	sub	r21, r25
    17ba:	99 f0       	breq	.+38     	; 0x17e2 <__addsf3x+0x5c>
    17bc:	59 3f       	cpi	r21, 0xF9	; 249
    17be:	50 f4       	brcc	.+20     	; 0x17d4 <__addsf3x+0x4e>
    17c0:	50 3e       	cpi	r21, 0xE0	; 224
    17c2:	68 f1       	brcs	.+90     	; 0x181e <__addsf3x+0x98>
    17c4:	1a 16       	cp	r1, r26
    17c6:	f0 40       	sbci	r31, 0x00	; 0
    17c8:	a2 2f       	mov	r26, r18
    17ca:	23 2f       	mov	r18, r19
    17cc:	34 2f       	mov	r19, r20
    17ce:	44 27       	eor	r20, r20
    17d0:	58 5f       	subi	r21, 0xF8	; 248
    17d2:	f3 cf       	rjmp	.-26     	; 0x17ba <__addsf3x+0x34>
    17d4:	46 95       	lsr	r20
    17d6:	37 95       	ror	r19
    17d8:	27 95       	ror	r18
    17da:	a7 95       	ror	r26
    17dc:	f0 40       	sbci	r31, 0x00	; 0
    17de:	53 95       	inc	r21
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__addsf3x+0x4e>
    17e2:	7e f4       	brtc	.+30     	; 0x1802 <__addsf3x+0x7c>
    17e4:	1f 16       	cp	r1, r31
    17e6:	ba 0b       	sbc	r27, r26
    17e8:	62 0b       	sbc	r22, r18
    17ea:	73 0b       	sbc	r23, r19
    17ec:	84 0b       	sbc	r24, r20
    17ee:	ba f0       	brmi	.+46     	; 0x181e <__addsf3x+0x98>
    17f0:	91 50       	subi	r25, 0x01	; 1
    17f2:	a1 f0       	breq	.+40     	; 0x181c <__addsf3x+0x96>
    17f4:	ff 0f       	add	r31, r31
    17f6:	bb 1f       	adc	r27, r27
    17f8:	66 1f       	adc	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	c2 f7       	brpl	.-16     	; 0x17f0 <__addsf3x+0x6a>
    1800:	0e c0       	rjmp	.+28     	; 0x181e <__addsf3x+0x98>
    1802:	ba 0f       	add	r27, r26
    1804:	62 1f       	adc	r22, r18
    1806:	73 1f       	adc	r23, r19
    1808:	84 1f       	adc	r24, r20
    180a:	48 f4       	brcc	.+18     	; 0x181e <__addsf3x+0x98>
    180c:	87 95       	ror	r24
    180e:	77 95       	ror	r23
    1810:	67 95       	ror	r22
    1812:	b7 95       	ror	r27
    1814:	f7 95       	ror	r31
    1816:	9e 3f       	cpi	r25, 0xFE	; 254
    1818:	08 f0       	brcs	.+2      	; 0x181c <__addsf3x+0x96>
    181a:	b3 cf       	rjmp	.-154    	; 0x1782 <__addsf3+0x1e>
    181c:	93 95       	inc	r25
    181e:	88 0f       	add	r24, r24
    1820:	08 f0       	brcs	.+2      	; 0x1824 <__addsf3x+0x9e>
    1822:	99 27       	eor	r25, r25
    1824:	ee 0f       	add	r30, r30
    1826:	97 95       	ror	r25
    1828:	87 95       	ror	r24
    182a:	08 95       	ret

0000182c <__cmpsf2>:
    182c:	e7 d0       	rcall	.+462    	; 0x19fc <__fp_cmp>
    182e:	08 f4       	brcc	.+2      	; 0x1832 <__cmpsf2+0x6>
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	08 95       	ret

00001834 <__divsf3>:
    1834:	0c d0       	rcall	.+24     	; 0x184e <__divsf3x>
    1836:	46 c1       	rjmp	.+652    	; 0x1ac4 <__fp_round>
    1838:	3e d1       	rcall	.+636    	; 0x1ab6 <__fp_pscB>
    183a:	40 f0       	brcs	.+16     	; 0x184c <__divsf3+0x18>
    183c:	35 d1       	rcall	.+618    	; 0x1aa8 <__fp_pscA>
    183e:	30 f0       	brcs	.+12     	; 0x184c <__divsf3+0x18>
    1840:	21 f4       	brne	.+8      	; 0x184a <__divsf3+0x16>
    1842:	5f 3f       	cpi	r21, 0xFF	; 255
    1844:	19 f0       	breq	.+6      	; 0x184c <__divsf3+0x18>
    1846:	fe c0       	rjmp	.+508    	; 0x1a44 <__fp_inf>
    1848:	51 11       	cpse	r21, r1
    184a:	87 c1       	rjmp	.+782    	; 0x1b5a <__fp_szero>
    184c:	2a c1       	rjmp	.+596    	; 0x1aa2 <__fp_nan>

0000184e <__divsf3x>:
    184e:	4b d1       	rcall	.+662    	; 0x1ae6 <__fp_split3>
    1850:	98 f3       	brcs	.-26     	; 0x1838 <__divsf3+0x4>

00001852 <__divsf3_pse>:
    1852:	99 23       	and	r25, r25
    1854:	c9 f3       	breq	.-14     	; 0x1848 <__divsf3+0x14>
    1856:	55 23       	and	r21, r21
    1858:	b1 f3       	breq	.-20     	; 0x1846 <__divsf3+0x12>
    185a:	95 1b       	sub	r25, r21
    185c:	55 0b       	sbc	r21, r21
    185e:	bb 27       	eor	r27, r27
    1860:	aa 27       	eor	r26, r26
    1862:	62 17       	cp	r22, r18
    1864:	73 07       	cpc	r23, r19
    1866:	84 07       	cpc	r24, r20
    1868:	38 f0       	brcs	.+14     	; 0x1878 <__divsf3_pse+0x26>
    186a:	9f 5f       	subi	r25, 0xFF	; 255
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	44 1f       	adc	r20, r20
    1874:	aa 1f       	adc	r26, r26
    1876:	a9 f3       	breq	.-22     	; 0x1862 <__divsf3_pse+0x10>
    1878:	33 d0       	rcall	.+102    	; 0x18e0 <__divsf3_pse+0x8e>
    187a:	0e 2e       	mov	r0, r30
    187c:	3a f0       	brmi	.+14     	; 0x188c <__divsf3_pse+0x3a>
    187e:	e0 e8       	ldi	r30, 0x80	; 128
    1880:	30 d0       	rcall	.+96     	; 0x18e2 <__divsf3_pse+0x90>
    1882:	91 50       	subi	r25, 0x01	; 1
    1884:	50 40       	sbci	r21, 0x00	; 0
    1886:	e6 95       	lsr	r30
    1888:	00 1c       	adc	r0, r0
    188a:	ca f7       	brpl	.-14     	; 0x187e <__divsf3_pse+0x2c>
    188c:	29 d0       	rcall	.+82     	; 0x18e0 <__divsf3_pse+0x8e>
    188e:	fe 2f       	mov	r31, r30
    1890:	27 d0       	rcall	.+78     	; 0x18e0 <__divsf3_pse+0x8e>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	bb 1f       	adc	r27, r27
    189a:	26 17       	cp	r18, r22
    189c:	37 07       	cpc	r19, r23
    189e:	48 07       	cpc	r20, r24
    18a0:	ab 07       	cpc	r26, r27
    18a2:	b0 e8       	ldi	r27, 0x80	; 128
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <__divsf3_pse+0x56>
    18a6:	bb 0b       	sbc	r27, r27
    18a8:	80 2d       	mov	r24, r0
    18aa:	bf 01       	movw	r22, r30
    18ac:	ff 27       	eor	r31, r31
    18ae:	93 58       	subi	r25, 0x83	; 131
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255
    18b2:	2a f0       	brmi	.+10     	; 0x18be <__divsf3_pse+0x6c>
    18b4:	9e 3f       	cpi	r25, 0xFE	; 254
    18b6:	51 05       	cpc	r21, r1
    18b8:	68 f0       	brcs	.+26     	; 0x18d4 <__divsf3_pse+0x82>
    18ba:	c4 c0       	rjmp	.+392    	; 0x1a44 <__fp_inf>
    18bc:	4e c1       	rjmp	.+668    	; 0x1b5a <__fp_szero>
    18be:	5f 3f       	cpi	r21, 0xFF	; 255
    18c0:	ec f3       	brlt	.-6      	; 0x18bc <__divsf3_pse+0x6a>
    18c2:	98 3e       	cpi	r25, 0xE8	; 232
    18c4:	dc f3       	brlt	.-10     	; 0x18bc <__divsf3_pse+0x6a>
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	9f 5f       	subi	r25, 0xFF	; 255
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__divsf3_pse+0x74>
    18d4:	88 0f       	add	r24, r24
    18d6:	91 1d       	adc	r25, r1
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret
    18e0:	e1 e0       	ldi	r30, 0x01	; 1
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	bb 1f       	adc	r27, r27
    18ea:	62 17       	cp	r22, r18
    18ec:	73 07       	cpc	r23, r19
    18ee:	84 07       	cpc	r24, r20
    18f0:	ba 07       	cpc	r27, r26
    18f2:	20 f0       	brcs	.+8      	; 0x18fc <__divsf3_pse+0xaa>
    18f4:	62 1b       	sub	r22, r18
    18f6:	73 0b       	sbc	r23, r19
    18f8:	84 0b       	sbc	r24, r20
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	ee 1f       	adc	r30, r30
    18fe:	88 f7       	brcc	.-30     	; 0x18e2 <__divsf3_pse+0x90>
    1900:	e0 95       	com	r30
    1902:	08 95       	ret

00001904 <__fixunssfsi>:
    1904:	f8 d0       	rcall	.+496    	; 0x1af6 <__fp_splitA>
    1906:	88 f0       	brcs	.+34     	; 0x192a <__fixunssfsi+0x26>
    1908:	9f 57       	subi	r25, 0x7F	; 127
    190a:	90 f0       	brcs	.+36     	; 0x1930 <__fixunssfsi+0x2c>
    190c:	b9 2f       	mov	r27, r25
    190e:	99 27       	eor	r25, r25
    1910:	b7 51       	subi	r27, 0x17	; 23
    1912:	a0 f0       	brcs	.+40     	; 0x193c <__fixunssfsi+0x38>
    1914:	d1 f0       	breq	.+52     	; 0x194a <__fixunssfsi+0x46>
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	1a f0       	brmi	.+6      	; 0x1926 <__fixunssfsi+0x22>
    1920:	ba 95       	dec	r27
    1922:	c9 f7       	brne	.-14     	; 0x1916 <__fixunssfsi+0x12>
    1924:	12 c0       	rjmp	.+36     	; 0x194a <__fixunssfsi+0x46>
    1926:	b1 30       	cpi	r27, 0x01	; 1
    1928:	81 f0       	breq	.+32     	; 0x194a <__fixunssfsi+0x46>
    192a:	16 d1       	rcall	.+556    	; 0x1b58 <__fp_zero>
    192c:	b1 e0       	ldi	r27, 0x01	; 1
    192e:	08 95       	ret
    1930:	13 c1       	rjmp	.+550    	; 0x1b58 <__fp_zero>
    1932:	67 2f       	mov	r22, r23
    1934:	78 2f       	mov	r23, r24
    1936:	88 27       	eor	r24, r24
    1938:	b8 5f       	subi	r27, 0xF8	; 248
    193a:	39 f0       	breq	.+14     	; 0x194a <__fixunssfsi+0x46>
    193c:	b9 3f       	cpi	r27, 0xF9	; 249
    193e:	cc f3       	brlt	.-14     	; 0x1932 <__fixunssfsi+0x2e>
    1940:	86 95       	lsr	r24
    1942:	77 95       	ror	r23
    1944:	67 95       	ror	r22
    1946:	b3 95       	inc	r27
    1948:	d9 f7       	brne	.-10     	; 0x1940 <__fixunssfsi+0x3c>
    194a:	3e f4       	brtc	.+14     	; 0x195a <__fixunssfsi+0x56>
    194c:	90 95       	com	r25
    194e:	80 95       	com	r24
    1950:	70 95       	com	r23
    1952:	61 95       	neg	r22
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	08 95       	ret

0000195c <__floatunsisf>:
    195c:	e8 94       	clt
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <__floatsisf+0x12>

00001960 <__floatsisf>:
    1960:	97 fb       	bst	r25, 7
    1962:	3e f4       	brtc	.+14     	; 0x1972 <__floatsisf+0x12>
    1964:	90 95       	com	r25
    1966:	80 95       	com	r24
    1968:	70 95       	com	r23
    196a:	61 95       	neg	r22
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	8f 4f       	sbci	r24, 0xFF	; 255
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	99 23       	and	r25, r25
    1974:	a9 f0       	breq	.+42     	; 0x19a0 <__floatsisf+0x40>
    1976:	f9 2f       	mov	r31, r25
    1978:	96 e9       	ldi	r25, 0x96	; 150
    197a:	bb 27       	eor	r27, r27
    197c:	93 95       	inc	r25
    197e:	f6 95       	lsr	r31
    1980:	87 95       	ror	r24
    1982:	77 95       	ror	r23
    1984:	67 95       	ror	r22
    1986:	b7 95       	ror	r27
    1988:	f1 11       	cpse	r31, r1
    198a:	f8 cf       	rjmp	.-16     	; 0x197c <__floatsisf+0x1c>
    198c:	fa f4       	brpl	.+62     	; 0x19cc <__floatsisf+0x6c>
    198e:	bb 0f       	add	r27, r27
    1990:	11 f4       	brne	.+4      	; 0x1996 <__floatsisf+0x36>
    1992:	60 ff       	sbrs	r22, 0
    1994:	1b c0       	rjmp	.+54     	; 0x19cc <__floatsisf+0x6c>
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <__floatsisf+0x6c>
    19a0:	88 23       	and	r24, r24
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <__floatsisf+0x48>
    19a4:	96 e9       	ldi	r25, 0x96	; 150
    19a6:	11 c0       	rjmp	.+34     	; 0x19ca <__floatsisf+0x6a>
    19a8:	77 23       	and	r23, r23
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <__floatsisf+0x54>
    19ac:	9e e8       	ldi	r25, 0x8E	; 142
    19ae:	87 2f       	mov	r24, r23
    19b0:	76 2f       	mov	r23, r22
    19b2:	05 c0       	rjmp	.+10     	; 0x19be <__floatsisf+0x5e>
    19b4:	66 23       	and	r22, r22
    19b6:	71 f0       	breq	.+28     	; 0x19d4 <__floatsisf+0x74>
    19b8:	96 e8       	ldi	r25, 0x86	; 134
    19ba:	86 2f       	mov	r24, r22
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	2a f0       	brmi	.+10     	; 0x19cc <__floatsisf+0x6c>
    19c2:	9a 95       	dec	r25
    19c4:	66 0f       	add	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	88 1f       	adc	r24, r24
    19ca:	da f7       	brpl	.-10     	; 0x19c2 <__floatsisf+0x62>
    19cc:	88 0f       	add	r24, r24
    19ce:	96 95       	lsr	r25
    19d0:	87 95       	ror	r24
    19d2:	97 f9       	bld	r25, 7
    19d4:	08 95       	ret

000019d6 <floor>:
    19d6:	a9 d0       	rcall	.+338    	; 0x1b2a <__fp_trunc>
    19d8:	80 f0       	brcs	.+32     	; 0x19fa <floor+0x24>
    19da:	9f 37       	cpi	r25, 0x7F	; 127
    19dc:	40 f4       	brcc	.+16     	; 0x19ee <floor+0x18>
    19de:	91 11       	cpse	r25, r1
    19e0:	0e f0       	brts	.+2      	; 0x19e4 <floor+0xe>
    19e2:	bb c0       	rjmp	.+374    	; 0x1b5a <__fp_szero>
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	9f eb       	ldi	r25, 0xBF	; 191
    19ec:	08 95       	ret
    19ee:	26 f4       	brtc	.+8      	; 0x19f8 <floor+0x22>
    19f0:	1b 16       	cp	r1, r27
    19f2:	61 1d       	adc	r22, r1
    19f4:	71 1d       	adc	r23, r1
    19f6:	81 1d       	adc	r24, r1
    19f8:	2b c0       	rjmp	.+86     	; 0x1a50 <__fp_mintl>
    19fa:	45 c0       	rjmp	.+138    	; 0x1a86 <__fp_mpack>

000019fc <__fp_cmp>:
    19fc:	99 0f       	add	r25, r25
    19fe:	00 08       	sbc	r0, r0
    1a00:	55 0f       	add	r21, r21
    1a02:	aa 0b       	sbc	r26, r26
    1a04:	e0 e8       	ldi	r30, 0x80	; 128
    1a06:	fe ef       	ldi	r31, 0xFE	; 254
    1a08:	16 16       	cp	r1, r22
    1a0a:	17 06       	cpc	r1, r23
    1a0c:	e8 07       	cpc	r30, r24
    1a0e:	f9 07       	cpc	r31, r25
    1a10:	c0 f0       	brcs	.+48     	; 0x1a42 <__fp_cmp+0x46>
    1a12:	12 16       	cp	r1, r18
    1a14:	13 06       	cpc	r1, r19
    1a16:	e4 07       	cpc	r30, r20
    1a18:	f5 07       	cpc	r31, r21
    1a1a:	98 f0       	brcs	.+38     	; 0x1a42 <__fp_cmp+0x46>
    1a1c:	62 1b       	sub	r22, r18
    1a1e:	73 0b       	sbc	r23, r19
    1a20:	84 0b       	sbc	r24, r20
    1a22:	95 0b       	sbc	r25, r21
    1a24:	39 f4       	brne	.+14     	; 0x1a34 <__fp_cmp+0x38>
    1a26:	0a 26       	eor	r0, r26
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <__fp_cmp+0x46>
    1a2a:	23 2b       	or	r18, r19
    1a2c:	24 2b       	or	r18, r20
    1a2e:	25 2b       	or	r18, r21
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <__fp_cmp+0x3e>
    1a32:	08 95       	ret
    1a34:	0a 26       	eor	r0, r26
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <__fp_cmp+0x3e>
    1a38:	a1 40       	sbci	r26, 0x01	; 1
    1a3a:	a6 95       	lsr	r26
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	81 1d       	adc	r24, r1
    1a40:	81 1d       	adc	r24, r1
    1a42:	08 95       	ret

00001a44 <__fp_inf>:
    1a44:	97 f9       	bld	r25, 7
    1a46:	9f 67       	ori	r25, 0x7F	; 127
    1a48:	80 e8       	ldi	r24, 0x80	; 128
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	08 95       	ret

00001a50 <__fp_mintl>:
    1a50:	88 23       	and	r24, r24
    1a52:	71 f4       	brne	.+28     	; 0x1a70 <__fp_mintl+0x20>
    1a54:	77 23       	and	r23, r23
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <__fp_mintl+0x10>
    1a58:	98 50       	subi	r25, 0x08	; 8
    1a5a:	87 2b       	or	r24, r23
    1a5c:	76 2f       	mov	r23, r22
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <__fp_mintl+0x1e>
    1a60:	66 23       	and	r22, r22
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <__fp_mintl+0x18>
    1a64:	99 27       	eor	r25, r25
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <__fp_mintl+0x32>
    1a68:	90 51       	subi	r25, 0x10	; 16
    1a6a:	86 2b       	or	r24, r22
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	2a f0       	brmi	.+10     	; 0x1a7c <__fp_mintl+0x2c>
    1a72:	9a 95       	dec	r25
    1a74:	66 0f       	add	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	88 1f       	adc	r24, r24
    1a7a:	da f7       	brpl	.-10     	; 0x1a72 <__fp_mintl+0x22>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	96 95       	lsr	r25
    1a80:	87 95       	ror	r24
    1a82:	97 f9       	bld	r25, 7
    1a84:	08 95       	ret

00001a86 <__fp_mpack>:
    1a86:	9f 3f       	cpi	r25, 0xFF	; 255
    1a88:	31 f0       	breq	.+12     	; 0x1a96 <__fp_mpack_finite+0xc>

00001a8a <__fp_mpack_finite>:
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	20 f4       	brcc	.+8      	; 0x1a96 <__fp_mpack_finite+0xc>
    1a8e:	87 95       	ror	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b7 95       	ror	r27
    1a96:	88 0f       	add	r24, r24
    1a98:	91 1d       	adc	r25, r1
    1a9a:	96 95       	lsr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	97 f9       	bld	r25, 7
    1aa0:	08 95       	ret

00001aa2 <__fp_nan>:
    1aa2:	9f ef       	ldi	r25, 0xFF	; 255
    1aa4:	80 ec       	ldi	r24, 0xC0	; 192
    1aa6:	08 95       	ret

00001aa8 <__fp_pscA>:
    1aa8:	00 24       	eor	r0, r0
    1aaa:	0a 94       	dec	r0
    1aac:	16 16       	cp	r1, r22
    1aae:	17 06       	cpc	r1, r23
    1ab0:	18 06       	cpc	r1, r24
    1ab2:	09 06       	cpc	r0, r25
    1ab4:	08 95       	ret

00001ab6 <__fp_pscB>:
    1ab6:	00 24       	eor	r0, r0
    1ab8:	0a 94       	dec	r0
    1aba:	12 16       	cp	r1, r18
    1abc:	13 06       	cpc	r1, r19
    1abe:	14 06       	cpc	r1, r20
    1ac0:	05 06       	cpc	r0, r21
    1ac2:	08 95       	ret

00001ac4 <__fp_round>:
    1ac4:	09 2e       	mov	r0, r25
    1ac6:	03 94       	inc	r0
    1ac8:	00 0c       	add	r0, r0
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__fp_round+0xc>
    1acc:	88 23       	and	r24, r24
    1ace:	52 f0       	brmi	.+20     	; 0x1ae4 <__fp_round+0x20>
    1ad0:	bb 0f       	add	r27, r27
    1ad2:	40 f4       	brcc	.+16     	; 0x1ae4 <__fp_round+0x20>
    1ad4:	bf 2b       	or	r27, r31
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <__fp_round+0x18>
    1ad8:	60 ff       	sbrs	r22, 0
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__fp_round+0x20>
    1adc:	6f 5f       	subi	r22, 0xFF	; 255
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	08 95       	ret

00001ae6 <__fp_split3>:
    1ae6:	57 fd       	sbrc	r21, 7
    1ae8:	90 58       	subi	r25, 0x80	; 128
    1aea:	44 0f       	add	r20, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <__fp_splitA+0x10>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <__fp_splitA+0x1a>
    1af4:	47 95       	ror	r20

00001af6 <__fp_splitA>:
    1af6:	88 0f       	add	r24, r24
    1af8:	97 fb       	bst	r25, 7
    1afa:	99 1f       	adc	r25, r25
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <__fp_splitA+0x20>
    1afe:	9f 3f       	cpi	r25, 0xFF	; 255
    1b00:	79 f0       	breq	.+30     	; 0x1b20 <__fp_splitA+0x2a>
    1b02:	87 95       	ror	r24
    1b04:	08 95       	ret
    1b06:	12 16       	cp	r1, r18
    1b08:	13 06       	cpc	r1, r19
    1b0a:	14 06       	cpc	r1, r20
    1b0c:	55 1f       	adc	r21, r21
    1b0e:	f2 cf       	rjmp	.-28     	; 0x1af4 <__fp_split3+0xe>
    1b10:	46 95       	lsr	r20
    1b12:	f1 df       	rcall	.-30     	; 0x1af6 <__fp_splitA>
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <__fp_splitA+0x30>
    1b16:	16 16       	cp	r1, r22
    1b18:	17 06       	cpc	r1, r23
    1b1a:	18 06       	cpc	r1, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	f1 cf       	rjmp	.-30     	; 0x1b02 <__fp_splitA+0xc>
    1b20:	86 95       	lsr	r24
    1b22:	71 05       	cpc	r23, r1
    1b24:	61 05       	cpc	r22, r1
    1b26:	08 94       	sec
    1b28:	08 95       	ret

00001b2a <__fp_trunc>:
    1b2a:	e5 df       	rcall	.-54     	; 0x1af6 <__fp_splitA>
    1b2c:	a0 f0       	brcs	.+40     	; 0x1b56 <__fp_trunc+0x2c>
    1b2e:	be e7       	ldi	r27, 0x7E	; 126
    1b30:	b9 17       	cp	r27, r25
    1b32:	88 f4       	brcc	.+34     	; 0x1b56 <__fp_trunc+0x2c>
    1b34:	bb 27       	eor	r27, r27
    1b36:	9f 38       	cpi	r25, 0x8F	; 143
    1b38:	60 f4       	brcc	.+24     	; 0x1b52 <__fp_trunc+0x28>
    1b3a:	16 16       	cp	r1, r22
    1b3c:	b1 1d       	adc	r27, r1
    1b3e:	67 2f       	mov	r22, r23
    1b40:	78 2f       	mov	r23, r24
    1b42:	88 27       	eor	r24, r24
    1b44:	98 5f       	subi	r25, 0xF8	; 248
    1b46:	f7 cf       	rjmp	.-18     	; 0x1b36 <__fp_trunc+0xc>
    1b48:	86 95       	lsr	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b1 1d       	adc	r27, r1
    1b50:	93 95       	inc	r25
    1b52:	96 39       	cpi	r25, 0x96	; 150
    1b54:	c8 f3       	brcs	.-14     	; 0x1b48 <__fp_trunc+0x1e>
    1b56:	08 95       	ret

00001b58 <__fp_zero>:
    1b58:	e8 94       	clt

00001b5a <__fp_szero>:
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	66 27       	eor	r22, r22
    1b5e:	77 27       	eor	r23, r23
    1b60:	cb 01       	movw	r24, r22
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret

00001b66 <__mulsf3>:
    1b66:	0b d0       	rcall	.+22     	; 0x1b7e <__mulsf3x>
    1b68:	ad cf       	rjmp	.-166    	; 0x1ac4 <__fp_round>
    1b6a:	9e df       	rcall	.-196    	; 0x1aa8 <__fp_pscA>
    1b6c:	28 f0       	brcs	.+10     	; 0x1b78 <__mulsf3+0x12>
    1b6e:	a3 df       	rcall	.-186    	; 0x1ab6 <__fp_pscB>
    1b70:	18 f0       	brcs	.+6      	; 0x1b78 <__mulsf3+0x12>
    1b72:	95 23       	and	r25, r21
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <__mulsf3+0x12>
    1b76:	66 cf       	rjmp	.-308    	; 0x1a44 <__fp_inf>
    1b78:	94 cf       	rjmp	.-216    	; 0x1aa2 <__fp_nan>
    1b7a:	11 24       	eor	r1, r1
    1b7c:	ee cf       	rjmp	.-36     	; 0x1b5a <__fp_szero>

00001b7e <__mulsf3x>:
    1b7e:	b3 df       	rcall	.-154    	; 0x1ae6 <__fp_split3>
    1b80:	a0 f3       	brcs	.-24     	; 0x1b6a <__mulsf3+0x4>

00001b82 <__mulsf3_pse>:
    1b82:	95 9f       	mul	r25, r21
    1b84:	d1 f3       	breq	.-12     	; 0x1b7a <__mulsf3+0x14>
    1b86:	95 0f       	add	r25, r21
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	55 1f       	adc	r21, r21
    1b8c:	62 9f       	mul	r22, r18
    1b8e:	f0 01       	movw	r30, r0
    1b90:	72 9f       	mul	r23, r18
    1b92:	bb 27       	eor	r27, r27
    1b94:	f0 0d       	add	r31, r0
    1b96:	b1 1d       	adc	r27, r1
    1b98:	63 9f       	mul	r22, r19
    1b9a:	aa 27       	eor	r26, r26
    1b9c:	f0 0d       	add	r31, r0
    1b9e:	b1 1d       	adc	r27, r1
    1ba0:	aa 1f       	adc	r26, r26
    1ba2:	64 9f       	mul	r22, r20
    1ba4:	66 27       	eor	r22, r22
    1ba6:	b0 0d       	add	r27, r0
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	66 1f       	adc	r22, r22
    1bac:	82 9f       	mul	r24, r18
    1bae:	22 27       	eor	r18, r18
    1bb0:	b0 0d       	add	r27, r0
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	62 1f       	adc	r22, r18
    1bb6:	73 9f       	mul	r23, r19
    1bb8:	b0 0d       	add	r27, r0
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	62 1f       	adc	r22, r18
    1bbe:	83 9f       	mul	r24, r19
    1bc0:	a0 0d       	add	r26, r0
    1bc2:	61 1d       	adc	r22, r1
    1bc4:	22 1f       	adc	r18, r18
    1bc6:	74 9f       	mul	r23, r20
    1bc8:	33 27       	eor	r19, r19
    1bca:	a0 0d       	add	r26, r0
    1bcc:	61 1d       	adc	r22, r1
    1bce:	23 1f       	adc	r18, r19
    1bd0:	84 9f       	mul	r24, r20
    1bd2:	60 0d       	add	r22, r0
    1bd4:	21 1d       	adc	r18, r1
    1bd6:	82 2f       	mov	r24, r18
    1bd8:	76 2f       	mov	r23, r22
    1bda:	6a 2f       	mov	r22, r26
    1bdc:	11 24       	eor	r1, r1
    1bde:	9f 57       	subi	r25, 0x7F	; 127
    1be0:	50 40       	sbci	r21, 0x00	; 0
    1be2:	8a f0       	brmi	.+34     	; 0x1c06 <__mulsf3_pse+0x84>
    1be4:	e1 f0       	breq	.+56     	; 0x1c1e <__mulsf3_pse+0x9c>
    1be6:	88 23       	and	r24, r24
    1be8:	4a f0       	brmi	.+18     	; 0x1bfc <__mulsf3_pse+0x7a>
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	91 50       	subi	r25, 0x01	; 1
    1bf8:	50 40       	sbci	r21, 0x00	; 0
    1bfa:	a9 f7       	brne	.-22     	; 0x1be6 <__mulsf3_pse+0x64>
    1bfc:	9e 3f       	cpi	r25, 0xFE	; 254
    1bfe:	51 05       	cpc	r21, r1
    1c00:	70 f0       	brcs	.+28     	; 0x1c1e <__mulsf3_pse+0x9c>
    1c02:	20 cf       	rjmp	.-448    	; 0x1a44 <__fp_inf>
    1c04:	aa cf       	rjmp	.-172    	; 0x1b5a <__fp_szero>
    1c06:	5f 3f       	cpi	r21, 0xFF	; 255
    1c08:	ec f3       	brlt	.-6      	; 0x1c04 <__mulsf3_pse+0x82>
    1c0a:	98 3e       	cpi	r25, 0xE8	; 232
    1c0c:	dc f3       	brlt	.-10     	; 0x1c04 <__mulsf3_pse+0x82>
    1c0e:	86 95       	lsr	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	b7 95       	ror	r27
    1c16:	f7 95       	ror	r31
    1c18:	e7 95       	ror	r30
    1c1a:	9f 5f       	subi	r25, 0xFF	; 255
    1c1c:	c1 f7       	brne	.-16     	; 0x1c0e <__mulsf3_pse+0x8c>
    1c1e:	fe 2b       	or	r31, r30
    1c20:	88 0f       	add	r24, r24
    1c22:	91 1d       	adc	r25, r1
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret

00001c2c <vfprintf>:
    1c2c:	a2 e1       	ldi	r26, 0x12	; 18
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ec e1       	ldi	r30, 0x1C	; 28
    1c32:	fe e0       	ldi	r31, 0x0E	; 14
    1c34:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__>
    1c38:	7c 01       	movw	r14, r24
    1c3a:	1b 01       	movw	r2, r22
    1c3c:	6a 01       	movw	r12, r20
    1c3e:	fc 01       	movw	r30, r24
    1c40:	17 82       	std	Z+7, r1	; 0x07
    1c42:	16 82       	std	Z+6, r1	; 0x06
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	81 fd       	sbrc	r24, 1
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <vfprintf+0x24>
    1c4a:	6b c3       	rjmp	.+1750   	; 0x2322 <vfprintf+0x6f6>
    1c4c:	65 01       	movw	r12, r10
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <vfprintf+0x2e>
    1c50:	88 24       	eor	r8, r8
    1c52:	83 94       	inc	r8
    1c54:	91 2c       	mov	r9, r1
    1c56:	8c 0e       	add	r8, r28
    1c58:	9d 1e       	adc	r9, r29
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	f1 01       	movw	r30, r2
    1c60:	93 fd       	sbrc	r25, 3
    1c62:	85 91       	lpm	r24, Z+
    1c64:	93 ff       	sbrs	r25, 3
    1c66:	81 91       	ld	r24, Z+
    1c68:	1f 01       	movw	r2, r30
    1c6a:	88 23       	and	r24, r24
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <vfprintf+0x44>
    1c6e:	55 c3       	rjmp	.+1706   	; 0x231a <vfprintf+0x6ee>
    1c70:	85 32       	cpi	r24, 0x25	; 37
    1c72:	39 f4       	brne	.+14     	; 0x1c82 <vfprintf+0x56>
    1c74:	93 fd       	sbrc	r25, 3
    1c76:	85 91       	lpm	r24, Z+
    1c78:	93 ff       	sbrs	r25, 3
    1c7a:	81 91       	ld	r24, Z+
    1c7c:	1f 01       	movw	r2, r30
    1c7e:	85 32       	cpi	r24, 0x25	; 37
    1c80:	31 f4       	brne	.+12     	; 0x1c8e <vfprintf+0x62>
    1c82:	b7 01       	movw	r22, r14
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1c8a:	56 01       	movw	r10, r12
    1c8c:	df cf       	rjmp	.-66     	; 0x1c4c <vfprintf+0x20>
    1c8e:	71 2c       	mov	r7, r1
    1c90:	61 2c       	mov	r6, r1
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	20 32       	cpi	r18, 0x20	; 32
    1c96:	a8 f4       	brcc	.+42     	; 0x1cc2 <vfprintf+0x96>
    1c98:	8b 32       	cpi	r24, 0x2B	; 43
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <vfprintf+0x88>
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <vfprintf+0x7c>
    1c9e:	80 32       	cpi	r24, 0x20	; 32
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <vfprintf+0x8a>
    1ca2:	83 32       	cpi	r24, 0x23	; 35
    1ca4:	71 f4       	brne	.+28     	; 0x1cc2 <vfprintf+0x96>
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <vfprintf+0x92>
    1ca8:	8d 32       	cpi	r24, 0x2D	; 45
    1caa:	39 f0       	breq	.+14     	; 0x1cba <vfprintf+0x8e>
    1cac:	80 33       	cpi	r24, 0x30	; 48
    1cae:	49 f4       	brne	.+18     	; 0x1cc2 <vfprintf+0x96>
    1cb0:	21 60       	ori	r18, 0x01	; 1
    1cb2:	28 c0       	rjmp	.+80     	; 0x1d04 <vfprintf+0xd8>
    1cb4:	22 60       	ori	r18, 0x02	; 2
    1cb6:	24 60       	ori	r18, 0x04	; 4
    1cb8:	25 c0       	rjmp	.+74     	; 0x1d04 <vfprintf+0xd8>
    1cba:	28 60       	ori	r18, 0x08	; 8
    1cbc:	23 c0       	rjmp	.+70     	; 0x1d04 <vfprintf+0xd8>
    1cbe:	20 61       	ori	r18, 0x10	; 16
    1cc0:	21 c0       	rjmp	.+66     	; 0x1d04 <vfprintf+0xd8>
    1cc2:	27 fd       	sbrc	r18, 7
    1cc4:	27 c0       	rjmp	.+78     	; 0x1d14 <vfprintf+0xe8>
    1cc6:	38 2f       	mov	r19, r24
    1cc8:	30 53       	subi	r19, 0x30	; 48
    1cca:	3a 30       	cpi	r19, 0x0A	; 10
    1ccc:	78 f4       	brcc	.+30     	; 0x1cec <vfprintf+0xc0>
    1cce:	26 ff       	sbrs	r18, 6
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0xb2>
    1cd2:	fa e0       	ldi	r31, 0x0A	; 10
    1cd4:	7f 9e       	mul	r7, r31
    1cd6:	30 0d       	add	r19, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	73 2e       	mov	r7, r19
    1cdc:	13 c0       	rjmp	.+38     	; 0x1d04 <vfprintf+0xd8>
    1cde:	4a e0       	ldi	r20, 0x0A	; 10
    1ce0:	64 9e       	mul	r6, r20
    1ce2:	30 0d       	add	r19, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	63 2e       	mov	r6, r19
    1ce8:	20 62       	ori	r18, 0x20	; 32
    1cea:	0c c0       	rjmp	.+24     	; 0x1d04 <vfprintf+0xd8>
    1cec:	8e 32       	cpi	r24, 0x2E	; 46
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <vfprintf+0xcc>
    1cf0:	26 fd       	sbrc	r18, 6
    1cf2:	13 c3       	rjmp	.+1574   	; 0x231a <vfprintf+0x6ee>
    1cf4:	20 64       	ori	r18, 0x40	; 64
    1cf6:	06 c0       	rjmp	.+12     	; 0x1d04 <vfprintf+0xd8>
    1cf8:	8c 36       	cpi	r24, 0x6C	; 108
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <vfprintf+0xd4>
    1cfc:	20 68       	ori	r18, 0x80	; 128
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <vfprintf+0xd8>
    1d00:	88 36       	cpi	r24, 0x68	; 104
    1d02:	41 f4       	brne	.+16     	; 0x1d14 <vfprintf+0xe8>
    1d04:	f1 01       	movw	r30, r2
    1d06:	93 fd       	sbrc	r25, 3
    1d08:	85 91       	lpm	r24, Z+
    1d0a:	93 ff       	sbrs	r25, 3
    1d0c:	81 91       	ld	r24, Z+
    1d0e:	1f 01       	movw	r2, r30
    1d10:	81 11       	cpse	r24, r1
    1d12:	c0 cf       	rjmp	.-128    	; 0x1c94 <vfprintf+0x68>
    1d14:	98 2f       	mov	r25, r24
    1d16:	95 54       	subi	r25, 0x45	; 69
    1d18:	93 30       	cpi	r25, 0x03	; 3
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <vfprintf+0xf6>
    1d1c:	20 61       	ori	r18, 0x10	; 16
    1d1e:	80 5e       	subi	r24, 0xE0	; 224
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0x102>
    1d22:	98 2f       	mov	r25, r24
    1d24:	95 56       	subi	r25, 0x65	; 101
    1d26:	93 30       	cpi	r25, 0x03	; 3
    1d28:	08 f0       	brcs	.+2      	; 0x1d2c <vfprintf+0x100>
    1d2a:	a4 c1       	rjmp	.+840    	; 0x2074 <vfprintf+0x448>
    1d2c:	2f 7e       	andi	r18, 0xEF	; 239
    1d2e:	26 fd       	sbrc	r18, 6
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <vfprintf+0x10a>
    1d32:	16 e0       	ldi	r17, 0x06	; 6
    1d34:	71 2e       	mov	r7, r17
    1d36:	bf e3       	ldi	r27, 0x3F	; 63
    1d38:	5b 2e       	mov	r5, r27
    1d3a:	52 22       	and	r5, r18
    1d3c:	85 36       	cpi	r24, 0x65	; 101
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <vfprintf+0x11a>
    1d40:	f0 e4       	ldi	r31, 0x40	; 64
    1d42:	5f 2a       	or	r5, r31
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <vfprintf+0x128>
    1d46:	86 36       	cpi	r24, 0x66	; 102
    1d48:	19 f4       	brne	.+6      	; 0x1d50 <vfprintf+0x124>
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	54 2a       	or	r5, r20
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <vfprintf+0x128>
    1d50:	71 10       	cpse	r7, r1
    1d52:	7a 94       	dec	r7
    1d54:	57 fe       	sbrs	r5, 7
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <vfprintf+0x13a>
    1d58:	5b e3       	ldi	r21, 0x3B	; 59
    1d5a:	57 15       	cp	r21, r7
    1d5c:	48 f0       	brcs	.+18     	; 0x1d70 <vfprintf+0x144>
    1d5e:	47 2c       	mov	r4, r7
    1d60:	43 94       	inc	r4
    1d62:	27 e0       	ldi	r18, 0x07	; 7
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <vfprintf+0x154>
    1d66:	87 e0       	ldi	r24, 0x07	; 7
    1d68:	87 15       	cp	r24, r7
    1d6a:	30 f0       	brcs	.+12     	; 0x1d78 <vfprintf+0x14c>
    1d6c:	27 2d       	mov	r18, r7
    1d6e:	07 c0       	rjmp	.+14     	; 0x1d7e <vfprintf+0x152>
    1d70:	27 e0       	ldi	r18, 0x07	; 7
    1d72:	ac e3       	ldi	r26, 0x3C	; 60
    1d74:	4a 2e       	mov	r4, r26
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <vfprintf+0x154>
    1d78:	27 e0       	ldi	r18, 0x07	; 7
    1d7a:	f7 e0       	ldi	r31, 0x07	; 7
    1d7c:	7f 2e       	mov	r7, r31
    1d7e:	41 2c       	mov	r4, r1
    1d80:	56 01       	movw	r10, r12
    1d82:	94 e0       	ldi	r25, 0x04	; 4
    1d84:	a9 0e       	add	r10, r25
    1d86:	b1 1c       	adc	r11, r1
    1d88:	f6 01       	movw	r30, r12
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	04 2d       	mov	r16, r4
    1d94:	a4 01       	movw	r20, r8
    1d96:	0e 94 cf 11 	call	0x239e	; 0x239e <__ftoa_engine>
    1d9a:	8c 01       	movw	r16, r24
    1d9c:	49 81       	ldd	r20, Y+1	; 0x01
    1d9e:	4c 87       	std	Y+12, r20	; 0x0c
    1da0:	40 ff       	sbrs	r20, 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <vfprintf+0x17c>
    1da4:	43 ff       	sbrs	r20, 3
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <vfprintf+0x18a>
    1da8:	51 fc       	sbrc	r5, 1
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <vfprintf+0x190>
    1dac:	52 fe       	sbrs	r5, 2
    1dae:	09 c0       	rjmp	.+18     	; 0x1dc2 <vfprintf+0x196>
    1db0:	e0 e2       	ldi	r30, 0x20	; 32
    1db2:	de 2e       	mov	r13, r30
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <vfprintf+0x198>
    1db6:	7d e2       	ldi	r23, 0x2D	; 45
    1db8:	d7 2e       	mov	r13, r23
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <vfprintf+0x198>
    1dbc:	6b e2       	ldi	r22, 0x2B	; 43
    1dbe:	d6 2e       	mov	r13, r22
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <vfprintf+0x198>
    1dc2:	d1 2c       	mov	r13, r1
    1dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dc6:	8c 70       	andi	r24, 0x0C	; 12
    1dc8:	a1 f1       	breq	.+104    	; 0x1e32 <vfprintf+0x206>
    1dca:	dd 20       	and	r13, r13
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <vfprintf+0x1a6>
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <vfprintf+0x1a8>
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	86 15       	cp	r24, r6
    1dd6:	10 f0       	brcs	.+4      	; 0x1ddc <vfprintf+0x1b0>
    1dd8:	61 2c       	mov	r6, r1
    1dda:	0b c0       	rjmp	.+22     	; 0x1df2 <vfprintf+0x1c6>
    1ddc:	68 1a       	sub	r6, r24
    1dde:	53 fc       	sbrc	r5, 3
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <vfprintf+0x1c6>
    1de2:	b7 01       	movw	r22, r14
    1de4:	80 e2       	ldi	r24, 0x20	; 32
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1dec:	6a 94       	dec	r6
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <vfprintf+0x1b6>
    1df0:	f3 cf       	rjmp	.-26     	; 0x1dd8 <vfprintf+0x1ac>
    1df2:	dd 20       	and	r13, r13
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <vfprintf+0x1d4>
    1df6:	b7 01       	movw	r22, r14
    1df8:	8d 2d       	mov	r24, r13
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1e00:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e02:	53 fd       	sbrc	r21, 3
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <vfprintf+0x1e0>
    1e06:	0c e6       	ldi	r16, 0x6C	; 108
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	0c c0       	rjmp	.+24     	; 0x1e24 <vfprintf+0x1f8>
    1e0c:	08 e6       	ldi	r16, 0x68	; 104
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <vfprintf+0x1f8>
    1e12:	51 10       	cpse	r5, r1
    1e14:	80 52       	subi	r24, 0x20	; 32
    1e16:	b7 01       	movw	r22, r14
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1e1e:	0f 5f       	subi	r16, 0xFF	; 255
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <vfprintf+0x1fc>
    1e24:	80 e1       	ldi	r24, 0x10	; 16
    1e26:	58 22       	and	r5, r24
    1e28:	f8 01       	movw	r30, r16
    1e2a:	84 91       	lpm	r24, Z
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	f1 cf       	rjmp	.-30     	; 0x1e12 <vfprintf+0x1e6>
    1e30:	71 c2       	rjmp	.+1250   	; 0x2314 <vfprintf+0x6e8>
    1e32:	57 fe       	sbrs	r5, 7
    1e34:	0e c0       	rjmp	.+28     	; 0x1e52 <vfprintf+0x226>
    1e36:	40 0e       	add	r4, r16
    1e38:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e3a:	44 ff       	sbrs	r20, 4
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <vfprintf+0x21a>
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	81 33       	cpi	r24, 0x31	; 49
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <vfprintf+0x21a>
    1e44:	4a 94       	dec	r4
    1e46:	14 14       	cp	r1, r4
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <vfprintf+0x270>
    1e4a:	58 e0       	ldi	r21, 0x08	; 8
    1e4c:	54 15       	cp	r21, r4
    1e4e:	48 f1       	brcs	.+82     	; 0x1ea2 <vfprintf+0x276>
    1e50:	2c c0       	rjmp	.+88     	; 0x1eaa <vfprintf+0x27e>
    1e52:	56 fc       	sbrc	r5, 6
    1e54:	2a c0       	rjmp	.+84     	; 0x1eaa <vfprintf+0x27e>
    1e56:	87 2d       	mov	r24, r7
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	80 17       	cp	r24, r16
    1e5c:	91 07       	cpc	r25, r17
    1e5e:	44 f0       	brlt	.+16     	; 0x1e70 <vfprintf+0x244>
    1e60:	0c 3f       	cpi	r16, 0xFC	; 252
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	18 07       	cpc	r17, r24
    1e66:	24 f0       	brlt	.+8      	; 0x1e70 <vfprintf+0x244>
    1e68:	90 e8       	ldi	r25, 0x80	; 128
    1e6a:	59 2a       	or	r5, r25
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <vfprintf+0x244>
    1e6e:	7a 94       	dec	r7
    1e70:	77 20       	and	r7, r7
    1e72:	49 f0       	breq	.+18     	; 0x1e86 <vfprintf+0x25a>
    1e74:	e2 e0       	ldi	r30, 0x02	; 2
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	ec 0f       	add	r30, r28
    1e7a:	fd 1f       	adc	r31, r29
    1e7c:	e7 0d       	add	r30, r7
    1e7e:	f1 1d       	adc	r31, r1
    1e80:	80 81       	ld	r24, Z
    1e82:	80 33       	cpi	r24, 0x30	; 48
    1e84:	a1 f3       	breq	.-24     	; 0x1e6e <vfprintf+0x242>
    1e86:	57 fe       	sbrs	r5, 7
    1e88:	10 c0       	rjmp	.+32     	; 0x1eaa <vfprintf+0x27e>
    1e8a:	47 2c       	mov	r4, r7
    1e8c:	43 94       	inc	r4
    1e8e:	87 2d       	mov	r24, r7
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	08 17       	cp	r16, r24
    1e94:	19 07       	cpc	r17, r25
    1e96:	44 f4       	brge	.+16     	; 0x1ea8 <vfprintf+0x27c>
    1e98:	70 1a       	sub	r7, r16
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <vfprintf+0x27e>
    1e9c:	44 24       	eor	r4, r4
    1e9e:	43 94       	inc	r4
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <vfprintf+0x27e>
    1ea2:	58 e0       	ldi	r21, 0x08	; 8
    1ea4:	45 2e       	mov	r4, r21
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <vfprintf+0x27e>
    1ea8:	71 2c       	mov	r7, r1
    1eaa:	57 fe       	sbrs	r5, 7
    1eac:	07 c0       	rjmp	.+14     	; 0x1ebc <vfprintf+0x290>
    1eae:	10 16       	cp	r1, r16
    1eb0:	11 06       	cpc	r1, r17
    1eb2:	3c f4       	brge	.+14     	; 0x1ec2 <vfprintf+0x296>
    1eb4:	98 01       	movw	r18, r16
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <vfprintf+0x29a>
    1ebc:	25 e0       	ldi	r18, 0x05	; 5
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x29a>
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	dd 20       	and	r13, r13
    1ec8:	11 f0       	breq	.+4      	; 0x1ece <vfprintf+0x2a2>
    1eca:	2f 5f       	subi	r18, 0xFF	; 255
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	77 20       	and	r7, r7
    1ed0:	31 f0       	breq	.+12     	; 0x1ede <vfprintf+0x2b2>
    1ed2:	47 2d       	mov	r20, r7
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	4f 5f       	subi	r20, 0xFF	; 255
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	24 0f       	add	r18, r20
    1edc:	35 1f       	adc	r19, r21
    1ede:	46 2d       	mov	r20, r6
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	24 17       	cp	r18, r20
    1ee4:	35 07       	cpc	r19, r21
    1ee6:	14 f4       	brge	.+4      	; 0x1eec <vfprintf+0x2c0>
    1ee8:	62 1a       	sub	r6, r18
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <vfprintf+0x2c2>
    1eec:	61 2c       	mov	r6, r1
    1eee:	85 2d       	mov	r24, r5
    1ef0:	89 70       	andi	r24, 0x09	; 9
    1ef2:	49 f4       	brne	.+18     	; 0x1f06 <vfprintf+0x2da>
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <vfprintf+0x2d6>
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1f00:	6a 94       	dec	r6
    1f02:	61 10       	cpse	r6, r1
    1f04:	f8 cf       	rjmp	.-16     	; 0x1ef6 <vfprintf+0x2ca>
    1f06:	dd 20       	and	r13, r13
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <vfprintf+0x2e8>
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	8d 2d       	mov	r24, r13
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1f14:	53 fc       	sbrc	r5, 3
    1f16:	09 c0       	rjmp	.+18     	; 0x1f2a <vfprintf+0x2fe>
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <vfprintf+0x2fa>
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	80 e3       	ldi	r24, 0x30	; 48
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1f24:	6a 94       	dec	r6
    1f26:	61 10       	cpse	r6, r1
    1f28:	f8 cf       	rjmp	.-16     	; 0x1f1a <vfprintf+0x2ee>
    1f2a:	57 fe       	sbrs	r5, 7
    1f2c:	56 c0       	rjmp	.+172    	; 0x1fda <vfprintf+0x3ae>
    1f2e:	68 01       	movw	r12, r16
    1f30:	17 ff       	sbrs	r17, 7
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x30c>
    1f34:	c1 2c       	mov	r12, r1
    1f36:	d1 2c       	mov	r13, r1
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	a8 01       	movw	r20, r16
    1f3e:	44 19       	sub	r20, r4
    1f40:	51 09       	sbc	r21, r1
    1f42:	5e 87       	std	Y+14, r21	; 0x0e
    1f44:	4d 87       	std	Y+13, r20	; 0x0d
    1f46:	28 01       	movw	r4, r16
    1f48:	4c 18       	sub	r4, r12
    1f4a:	5d 08       	sbc	r5, r13
    1f4c:	48 0c       	add	r4, r8
    1f4e:	59 1c       	adc	r5, r9
    1f50:	87 2d       	mov	r24, r7
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	44 27       	eor	r20, r20
    1f56:	55 27       	eor	r21, r21
    1f58:	48 1b       	sub	r20, r24
    1f5a:	59 0b       	sbc	r21, r25
    1f5c:	58 8b       	std	Y+16, r21	; 0x10
    1f5e:	4f 87       	std	Y+15, r20	; 0x0f
    1f60:	5f ef       	ldi	r21, 0xFF	; 255
    1f62:	c5 16       	cp	r12, r21
    1f64:	d5 06       	cpc	r13, r21
    1f66:	49 f4       	brne	.+18     	; 0x1f7a <vfprintf+0x34e>
    1f68:	b7 01       	movw	r22, r14
    1f6a:	8e e2       	ldi	r24, 0x2E	; 46
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	2a 8b       	std	Y+18, r18	; 0x12
    1f70:	39 8b       	std	Y+17, r19	; 0x11
    1f72:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1f76:	39 89       	ldd	r19, Y+17	; 0x11
    1f78:	2a 89       	ldd	r18, Y+18	; 0x12
    1f7a:	0c 15       	cp	r16, r12
    1f7c:	1d 05       	cpc	r17, r13
    1f7e:	54 f0       	brlt	.+20     	; 0x1f94 <vfprintf+0x368>
    1f80:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f82:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f84:	4c 15       	cp	r20, r12
    1f86:	5d 05       	cpc	r21, r13
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <vfprintf+0x368>
    1f8a:	f2 01       	movw	r30, r4
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	81 81       	ldd	r24, Z+1	; 0x01
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <vfprintf+0x36a>
    1f94:	80 e3       	ldi	r24, 0x30	; 48
    1f96:	51 e0       	ldi	r21, 0x01	; 1
    1f98:	c5 1a       	sub	r12, r21
    1f9a:	d1 08       	sbc	r13, r1
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fa2:	58 89       	ldd	r21, Y+16	; 0x10
    1fa4:	c4 16       	cp	r12, r20
    1fa6:	d5 06       	cpc	r13, r21
    1fa8:	4c f0       	brlt	.+18     	; 0x1fbc <vfprintf+0x390>
    1faa:	b7 01       	movw	r22, r14
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	2a 8b       	std	Y+18, r18	; 0x12
    1fb0:	39 8b       	std	Y+17, r19	; 0x11
    1fb2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1fb6:	2a 89       	ldd	r18, Y+18	; 0x12
    1fb8:	39 89       	ldd	r19, Y+17	; 0x11
    1fba:	d2 cf       	rjmp	.-92     	; 0x1f60 <vfprintf+0x334>
    1fbc:	c0 16       	cp	r12, r16
    1fbe:	d1 06       	cpc	r13, r17
    1fc0:	49 f4       	brne	.+18     	; 0x1fd4 <vfprintf+0x3a8>
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	96 33       	cpi	r25, 0x36	; 54
    1fc6:	28 f4       	brcc	.+10     	; 0x1fd2 <vfprintf+0x3a6>
    1fc8:	95 33       	cpi	r25, 0x35	; 53
    1fca:	21 f4       	brne	.+8      	; 0x1fd4 <vfprintf+0x3a8>
    1fcc:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fce:	54 fd       	sbrc	r21, 4
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <vfprintf+0x3a8>
    1fd2:	81 e3       	ldi	r24, 0x31	; 49
    1fd4:	b7 01       	movw	r22, r14
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	4a c0       	rjmp	.+148    	; 0x206e <vfprintf+0x442>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	81 33       	cpi	r24, 0x31	; 49
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <vfprintf+0x3ba>
    1fe0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fe2:	4f 7e       	andi	r20, 0xEF	; 239
    1fe4:	4c 87       	std	Y+12, r20	; 0x0c
    1fe6:	b7 01       	movw	r22, r14
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    1fee:	71 10       	cpse	r7, r1
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <vfprintf+0x3d0>
    1ff2:	54 fe       	sbrs	r5, 4
    1ff4:	16 c0       	rjmp	.+44     	; 0x2022 <vfprintf+0x3f6>
    1ff6:	85 e4       	ldi	r24, 0x45	; 69
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	15 c0       	rjmp	.+42     	; 0x2026 <vfprintf+0x3fa>
    1ffc:	b7 01       	movw	r22, r14
    1ffe:	8e e2       	ldi	r24, 0x2E	; 46
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2006:	42 e0       	ldi	r20, 0x02	; 2
    2008:	d4 2e       	mov	r13, r20
    200a:	f4 01       	movw	r30, r8
    200c:	ed 0d       	add	r30, r13
    200e:	f1 1d       	adc	r31, r1
    2010:	d3 94       	inc	r13
    2012:	b7 01       	movw	r22, r14
    2014:	80 81       	ld	r24, Z
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    201c:	7a 94       	dec	r7
    201e:	a9 f7       	brne	.-22     	; 0x200a <vfprintf+0x3de>
    2020:	e8 cf       	rjmp	.-48     	; 0x1ff2 <vfprintf+0x3c6>
    2022:	85 e6       	ldi	r24, 0x65	; 101
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    202c:	17 fd       	sbrc	r17, 7
    202e:	06 c0       	rjmp	.+12     	; 0x203c <vfprintf+0x410>
    2030:	01 15       	cp	r16, r1
    2032:	11 05       	cpc	r17, r1
    2034:	41 f4       	brne	.+16     	; 0x2046 <vfprintf+0x41a>
    2036:	5c 85       	ldd	r21, Y+12	; 0x0c
    2038:	54 ff       	sbrs	r21, 4
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <vfprintf+0x41a>
    203c:	11 95       	neg	r17
    203e:	01 95       	neg	r16
    2040:	11 09       	sbc	r17, r1
    2042:	8d e2       	ldi	r24, 0x2D	; 45
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <vfprintf+0x41c>
    2046:	8b e2       	ldi	r24, 0x2B	; 43
    2048:	b7 01       	movw	r22, r14
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2050:	80 e3       	ldi	r24, 0x30	; 48
    2052:	03 c0       	rjmp	.+6      	; 0x205a <vfprintf+0x42e>
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	0a 50       	subi	r16, 0x0A	; 10
    2058:	11 09       	sbc	r17, r1
    205a:	0a 30       	cpi	r16, 0x0A	; 10
    205c:	11 05       	cpc	r17, r1
    205e:	d4 f7       	brge	.-12     	; 0x2054 <vfprintf+0x428>
    2060:	b7 01       	movw	r22, r14
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2068:	b7 01       	movw	r22, r14
    206a:	c8 01       	movw	r24, r16
    206c:	c0 96       	adiw	r24, 0x30	; 48
    206e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2072:	50 c1       	rjmp	.+672    	; 0x2314 <vfprintf+0x6e8>
    2074:	83 36       	cpi	r24, 0x63	; 99
    2076:	31 f0       	breq	.+12     	; 0x2084 <vfprintf+0x458>
    2078:	83 37       	cpi	r24, 0x73	; 115
    207a:	81 f0       	breq	.+32     	; 0x209c <vfprintf+0x470>
    207c:	83 35       	cpi	r24, 0x53	; 83
    207e:	09 f0       	breq	.+2      	; 0x2082 <vfprintf+0x456>
    2080:	5e c0       	rjmp	.+188    	; 0x213e <vfprintf+0x512>
    2082:	24 c0       	rjmp	.+72     	; 0x20cc <vfprintf+0x4a0>
    2084:	56 01       	movw	r10, r12
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	a8 0e       	add	r10, r24
    208a:	b1 1c       	adc	r11, r1
    208c:	f6 01       	movw	r30, r12
    208e:	80 81       	ld	r24, Z
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	cc 24       	eor	r12, r12
    2094:	c3 94       	inc	r12
    2096:	d1 2c       	mov	r13, r1
    2098:	84 01       	movw	r16, r8
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <vfprintf+0x498>
    209c:	56 01       	movw	r10, r12
    209e:	f2 e0       	ldi	r31, 0x02	; 2
    20a0:	af 0e       	add	r10, r31
    20a2:	b1 1c       	adc	r11, r1
    20a4:	f6 01       	movw	r30, r12
    20a6:	00 81       	ld	r16, Z
    20a8:	11 81       	ldd	r17, Z+1	; 0x01
    20aa:	26 ff       	sbrs	r18, 6
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <vfprintf+0x488>
    20ae:	67 2d       	mov	r22, r7
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfprintf+0x48c>
    20b4:	6f ef       	ldi	r22, 0xFF	; 255
    20b6:	7f ef       	ldi	r23, 0xFF	; 255
    20b8:	c8 01       	movw	r24, r16
    20ba:	2a 8b       	std	Y+18, r18	; 0x12
    20bc:	0e 94 da 12 	call	0x25b4	; 0x25b4 <strnlen>
    20c0:	6c 01       	movw	r12, r24
    20c2:	2a 89       	ldd	r18, Y+18	; 0x12
    20c4:	9f e7       	ldi	r25, 0x7F	; 127
    20c6:	59 2e       	mov	r5, r25
    20c8:	52 22       	and	r5, r18
    20ca:	17 c0       	rjmp	.+46     	; 0x20fa <vfprintf+0x4ce>
    20cc:	56 01       	movw	r10, r12
    20ce:	f2 e0       	ldi	r31, 0x02	; 2
    20d0:	af 0e       	add	r10, r31
    20d2:	b1 1c       	adc	r11, r1
    20d4:	f6 01       	movw	r30, r12
    20d6:	00 81       	ld	r16, Z
    20d8:	11 81       	ldd	r17, Z+1	; 0x01
    20da:	26 ff       	sbrs	r18, 6
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <vfprintf+0x4b8>
    20de:	67 2d       	mov	r22, r7
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <vfprintf+0x4bc>
    20e4:	6f ef       	ldi	r22, 0xFF	; 255
    20e6:	7f ef       	ldi	r23, 0xFF	; 255
    20e8:	c8 01       	movw	r24, r16
    20ea:	2a 8b       	std	Y+18, r18	; 0x12
    20ec:	0e 94 a7 12 	call	0x254e	; 0x254e <strnlen_P>
    20f0:	6c 01       	movw	r12, r24
    20f2:	2a 89       	ldd	r18, Y+18	; 0x12
    20f4:	80 e8       	ldi	r24, 0x80	; 128
    20f6:	58 2e       	mov	r5, r24
    20f8:	52 2a       	or	r5, r18
    20fa:	53 fc       	sbrc	r5, 3
    20fc:	1c c0       	rjmp	.+56     	; 0x2136 <vfprintf+0x50a>
    20fe:	06 c0       	rjmp	.+12     	; 0x210c <vfprintf+0x4e0>
    2100:	b7 01       	movw	r22, r14
    2102:	80 e2       	ldi	r24, 0x20	; 32
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    210a:	6a 94       	dec	r6
    210c:	86 2d       	mov	r24, r6
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	c8 16       	cp	r12, r24
    2112:	d9 06       	cpc	r13, r25
    2114:	a8 f3       	brcs	.-22     	; 0x2100 <vfprintf+0x4d4>
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <vfprintf+0x50a>
    2118:	f8 01       	movw	r30, r16
    211a:	57 fc       	sbrc	r5, 7
    211c:	85 91       	lpm	r24, Z+
    211e:	57 fe       	sbrs	r5, 7
    2120:	81 91       	ld	r24, Z+
    2122:	8f 01       	movw	r16, r30
    2124:	b7 01       	movw	r22, r14
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    212c:	61 10       	cpse	r6, r1
    212e:	6a 94       	dec	r6
    2130:	f1 e0       	ldi	r31, 0x01	; 1
    2132:	cf 1a       	sub	r12, r31
    2134:	d1 08       	sbc	r13, r1
    2136:	c1 14       	cp	r12, r1
    2138:	d1 04       	cpc	r13, r1
    213a:	71 f7       	brne	.-36     	; 0x2118 <vfprintf+0x4ec>
    213c:	eb c0       	rjmp	.+470    	; 0x2314 <vfprintf+0x6e8>
    213e:	84 36       	cpi	r24, 0x64	; 100
    2140:	11 f0       	breq	.+4      	; 0x2146 <vfprintf+0x51a>
    2142:	89 36       	cpi	r24, 0x69	; 105
    2144:	51 f5       	brne	.+84     	; 0x219a <vfprintf+0x56e>
    2146:	56 01       	movw	r10, r12
    2148:	27 ff       	sbrs	r18, 7
    214a:	09 c0       	rjmp	.+18     	; 0x215e <vfprintf+0x532>
    214c:	44 e0       	ldi	r20, 0x04	; 4
    214e:	a4 0e       	add	r10, r20
    2150:	b1 1c       	adc	r11, r1
    2152:	f6 01       	movw	r30, r12
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	0a c0       	rjmp	.+20     	; 0x2172 <vfprintf+0x546>
    215e:	f2 e0       	ldi	r31, 0x02	; 2
    2160:	af 0e       	add	r10, r31
    2162:	b1 1c       	adc	r11, r1
    2164:	f6 01       	movw	r30, r12
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	88 27       	eor	r24, r24
    216c:	77 fd       	sbrc	r23, 7
    216e:	80 95       	com	r24
    2170:	98 2f       	mov	r25, r24
    2172:	12 2f       	mov	r17, r18
    2174:	1f 76       	andi	r17, 0x6F	; 111
    2176:	97 ff       	sbrs	r25, 7
    2178:	08 c0       	rjmp	.+16     	; 0x218a <vfprintf+0x55e>
    217a:	90 95       	com	r25
    217c:	80 95       	com	r24
    217e:	70 95       	com	r23
    2180:	61 95       	neg	r22
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	8f 4f       	sbci	r24, 0xFF	; 255
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	10 68       	ori	r17, 0x80	; 128
    218a:	2a e0       	ldi	r18, 0x0A	; 10
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	a4 01       	movw	r20, r8
    2190:	0e 94 33 13 	call	0x2666	; 0x2666 <__ultoa_invert>
    2194:	d8 2e       	mov	r13, r24
    2196:	d8 18       	sub	r13, r8
    2198:	40 c0       	rjmp	.+128    	; 0x221a <vfprintf+0x5ee>
    219a:	12 2f       	mov	r17, r18
    219c:	85 37       	cpi	r24, 0x75	; 117
    219e:	21 f4       	brne	.+8      	; 0x21a8 <vfprintf+0x57c>
    21a0:	1f 7e       	andi	r17, 0xEF	; 239
    21a2:	2a e0       	ldi	r18, 0x0A	; 10
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <vfprintf+0x5ba>
    21a8:	19 7f       	andi	r17, 0xF9	; 249
    21aa:	8f 36       	cpi	r24, 0x6F	; 111
    21ac:	a1 f0       	breq	.+40     	; 0x21d6 <vfprintf+0x5aa>
    21ae:	20 f4       	brcc	.+8      	; 0x21b8 <vfprintf+0x58c>
    21b0:	88 35       	cpi	r24, 0x58	; 88
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <vfprintf+0x58a>
    21b4:	b2 c0       	rjmp	.+356    	; 0x231a <vfprintf+0x6ee>
    21b6:	0b c0       	rjmp	.+22     	; 0x21ce <vfprintf+0x5a2>
    21b8:	80 37       	cpi	r24, 0x70	; 112
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <vfprintf+0x598>
    21bc:	88 37       	cpi	r24, 0x78	; 120
    21be:	09 f0       	breq	.+2      	; 0x21c2 <vfprintf+0x596>
    21c0:	ac c0       	rjmp	.+344    	; 0x231a <vfprintf+0x6ee>
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <vfprintf+0x59a>
    21c4:	10 61       	ori	r17, 0x10	; 16
    21c6:	14 ff       	sbrs	r17, 4
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <vfprintf+0x5b0>
    21ca:	14 60       	ori	r17, 0x04	; 4
    21cc:	07 c0       	rjmp	.+14     	; 0x21dc <vfprintf+0x5b0>
    21ce:	24 ff       	sbrs	r18, 4
    21d0:	08 c0       	rjmp	.+16     	; 0x21e2 <vfprintf+0x5b6>
    21d2:	16 60       	ori	r17, 0x06	; 6
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <vfprintf+0x5b6>
    21d6:	28 e0       	ldi	r18, 0x08	; 8
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <vfprintf+0x5ba>
    21dc:	20 e1       	ldi	r18, 0x10	; 16
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <vfprintf+0x5ba>
    21e2:	20 e1       	ldi	r18, 0x10	; 16
    21e4:	32 e0       	ldi	r19, 0x02	; 2
    21e6:	56 01       	movw	r10, r12
    21e8:	17 ff       	sbrs	r17, 7
    21ea:	09 c0       	rjmp	.+18     	; 0x21fe <vfprintf+0x5d2>
    21ec:	f4 e0       	ldi	r31, 0x04	; 4
    21ee:	af 0e       	add	r10, r31
    21f0:	b1 1c       	adc	r11, r1
    21f2:	f6 01       	movw	r30, r12
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	08 c0       	rjmp	.+16     	; 0x220e <vfprintf+0x5e2>
    21fe:	f2 e0       	ldi	r31, 0x02	; 2
    2200:	af 0e       	add	r10, r31
    2202:	b1 1c       	adc	r11, r1
    2204:	f6 01       	movw	r30, r12
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a4 01       	movw	r20, r8
    2210:	0e 94 33 13 	call	0x2666	; 0x2666 <__ultoa_invert>
    2214:	d8 2e       	mov	r13, r24
    2216:	d8 18       	sub	r13, r8
    2218:	1f 77       	andi	r17, 0x7F	; 127
    221a:	16 ff       	sbrs	r17, 6
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <vfprintf+0x608>
    221e:	21 2f       	mov	r18, r17
    2220:	2e 7f       	andi	r18, 0xFE	; 254
    2222:	d7 14       	cp	r13, r7
    2224:	50 f4       	brcc	.+20     	; 0x223a <vfprintf+0x60e>
    2226:	14 ff       	sbrs	r17, 4
    2228:	0a c0       	rjmp	.+20     	; 0x223e <vfprintf+0x612>
    222a:	12 fd       	sbrc	r17, 2
    222c:	08 c0       	rjmp	.+16     	; 0x223e <vfprintf+0x612>
    222e:	21 2f       	mov	r18, r17
    2230:	2e 7e       	andi	r18, 0xEE	; 238
    2232:	05 c0       	rjmp	.+10     	; 0x223e <vfprintf+0x612>
    2234:	0d 2d       	mov	r16, r13
    2236:	21 2f       	mov	r18, r17
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <vfprintf+0x614>
    223a:	0d 2d       	mov	r16, r13
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <vfprintf+0x614>
    223e:	07 2d       	mov	r16, r7
    2240:	24 ff       	sbrs	r18, 4
    2242:	0c c0       	rjmp	.+24     	; 0x225c <vfprintf+0x630>
    2244:	fe 01       	movw	r30, r28
    2246:	ed 0d       	add	r30, r13
    2248:	f1 1d       	adc	r31, r1
    224a:	80 81       	ld	r24, Z
    224c:	80 33       	cpi	r24, 0x30	; 48
    224e:	11 f4       	brne	.+4      	; 0x2254 <vfprintf+0x628>
    2250:	29 7e       	andi	r18, 0xE9	; 233
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <vfprintf+0x638>
    2254:	22 ff       	sbrs	r18, 2
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <vfprintf+0x636>
    2258:	0e 5f       	subi	r16, 0xFE	; 254
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <vfprintf+0x638>
    225c:	82 2f       	mov	r24, r18
    225e:	86 78       	andi	r24, 0x86	; 134
    2260:	09 f0       	breq	.+2      	; 0x2264 <vfprintf+0x638>
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	23 fd       	sbrc	r18, 3
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <vfprintf+0x664>
    2268:	20 ff       	sbrs	r18, 0
    226a:	0f c0       	rjmp	.+30     	; 0x228a <vfprintf+0x65e>
    226c:	7d 2c       	mov	r7, r13
    226e:	06 15       	cp	r16, r6
    2270:	60 f4       	brcc	.+24     	; 0x228a <vfprintf+0x65e>
    2272:	76 0c       	add	r7, r6
    2274:	70 1a       	sub	r7, r16
    2276:	06 2d       	mov	r16, r6
    2278:	08 c0       	rjmp	.+16     	; 0x228a <vfprintf+0x65e>
    227a:	b7 01       	movw	r22, r14
    227c:	80 e2       	ldi	r24, 0x20	; 32
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	2a 8b       	std	Y+18, r18	; 0x12
    2282:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2286:	0f 5f       	subi	r16, 0xFF	; 255
    2288:	2a 89       	ldd	r18, Y+18	; 0x12
    228a:	06 15       	cp	r16, r6
    228c:	b0 f3       	brcs	.-20     	; 0x227a <vfprintf+0x64e>
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <vfprintf+0x66c>
    2290:	06 15       	cp	r16, r6
    2292:	10 f4       	brcc	.+4      	; 0x2298 <vfprintf+0x66c>
    2294:	60 1a       	sub	r6, r16
    2296:	01 c0       	rjmp	.+2      	; 0x229a <vfprintf+0x66e>
    2298:	61 2c       	mov	r6, r1
    229a:	24 ff       	sbrs	r18, 4
    229c:	12 c0       	rjmp	.+36     	; 0x22c2 <vfprintf+0x696>
    229e:	b7 01       	movw	r22, r14
    22a0:	80 e3       	ldi	r24, 0x30	; 48
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	2a 8b       	std	Y+18, r18	; 0x12
    22a6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    22aa:	2a 89       	ldd	r18, Y+18	; 0x12
    22ac:	22 ff       	sbrs	r18, 2
    22ae:	1e c0       	rjmp	.+60     	; 0x22ec <vfprintf+0x6c0>
    22b0:	21 ff       	sbrs	r18, 1
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <vfprintf+0x68e>
    22b4:	88 e5       	ldi	r24, 0x58	; 88
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <vfprintf+0x692>
    22ba:	88 e7       	ldi	r24, 0x78	; 120
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	b7 01       	movw	r22, r14
    22c0:	0c c0       	rjmp	.+24     	; 0x22da <vfprintf+0x6ae>
    22c2:	82 2f       	mov	r24, r18
    22c4:	86 78       	andi	r24, 0x86	; 134
    22c6:	91 f0       	breq	.+36     	; 0x22ec <vfprintf+0x6c0>
    22c8:	21 fd       	sbrc	r18, 1
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <vfprintf+0x6a4>
    22cc:	80 e2       	ldi	r24, 0x20	; 32
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <vfprintf+0x6a6>
    22d0:	8b e2       	ldi	r24, 0x2B	; 43
    22d2:	27 fd       	sbrc	r18, 7
    22d4:	8d e2       	ldi	r24, 0x2D	; 45
    22d6:	b7 01       	movw	r22, r14
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <vfprintf+0x6c0>
    22e0:	b7 01       	movw	r22, r14
    22e2:	80 e3       	ldi	r24, 0x30	; 48
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    22ea:	7a 94       	dec	r7
    22ec:	d7 14       	cp	r13, r7
    22ee:	c0 f3       	brcs	.-16     	; 0x22e0 <vfprintf+0x6b4>
    22f0:	da 94       	dec	r13
    22f2:	f4 01       	movw	r30, r8
    22f4:	ed 0d       	add	r30, r13
    22f6:	f1 1d       	adc	r31, r1
    22f8:	b7 01       	movw	r22, r14
    22fa:	80 81       	ld	r24, Z
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2302:	d1 10       	cpse	r13, r1
    2304:	f5 cf       	rjmp	.-22     	; 0x22f0 <vfprintf+0x6c4>
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x6e8>
    2308:	b7 01       	movw	r22, r14
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <fputc>
    2312:	6a 94       	dec	r6
    2314:	61 10       	cpse	r6, r1
    2316:	f8 cf       	rjmp	.-16     	; 0x2308 <vfprintf+0x6dc>
    2318:	99 cc       	rjmp	.-1742   	; 0x1c4c <vfprintf+0x20>
    231a:	f7 01       	movw	r30, r14
    231c:	26 81       	ldd	r18, Z+6	; 0x06
    231e:	37 81       	ldd	r19, Z+7	; 0x07
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <vfprintf+0x6fa>
    2322:	2f ef       	ldi	r18, 0xFF	; 255
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	c9 01       	movw	r24, r18
    2328:	62 96       	adiw	r28, 0x12	; 18
    232a:	e2 e1       	ldi	r30, 0x12	; 18
    232c:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__>

00002330 <__prologue_saves__>:
    2330:	2f 92       	push	r2
    2332:	3f 92       	push	r3
    2334:	4f 92       	push	r4
    2336:	5f 92       	push	r5
    2338:	6f 92       	push	r6
    233a:	7f 92       	push	r7
    233c:	8f 92       	push	r8
    233e:	9f 92       	push	r9
    2340:	af 92       	push	r10
    2342:	bf 92       	push	r11
    2344:	cf 92       	push	r12
    2346:	df 92       	push	r13
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	ca 1b       	sub	r28, r26
    235a:	db 0b       	sbc	r29, r27
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	09 94       	ijmp

00002368 <__epilogue_restores__>:
    2368:	2a 88       	ldd	r2, Y+18	; 0x12
    236a:	39 88       	ldd	r3, Y+17	; 0x11
    236c:	48 88       	ldd	r4, Y+16	; 0x10
    236e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2370:	6e 84       	ldd	r6, Y+14	; 0x0e
    2372:	7d 84       	ldd	r7, Y+13	; 0x0d
    2374:	8c 84       	ldd	r8, Y+12	; 0x0c
    2376:	9b 84       	ldd	r9, Y+11	; 0x0b
    2378:	aa 84       	ldd	r10, Y+10	; 0x0a
    237a:	b9 84       	ldd	r11, Y+9	; 0x09
    237c:	c8 84       	ldd	r12, Y+8	; 0x08
    237e:	df 80       	ldd	r13, Y+7	; 0x07
    2380:	ee 80       	ldd	r14, Y+6	; 0x06
    2382:	fd 80       	ldd	r15, Y+5	; 0x05
    2384:	0c 81       	ldd	r16, Y+4	; 0x04
    2386:	1b 81       	ldd	r17, Y+3	; 0x03
    2388:	aa 81       	ldd	r26, Y+2	; 0x02
    238a:	b9 81       	ldd	r27, Y+1	; 0x01
    238c:	ce 0f       	add	r28, r30
    238e:	d1 1d       	adc	r29, r1
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	ed 01       	movw	r28, r26
    239c:	08 95       	ret

0000239e <__ftoa_engine>:
    239e:	28 30       	cpi	r18, 0x08	; 8
    23a0:	08 f0       	brcs	.+2      	; 0x23a4 <__ftoa_engine+0x6>
    23a2:	27 e0       	ldi	r18, 0x07	; 7
    23a4:	33 27       	eor	r19, r19
    23a6:	da 01       	movw	r26, r20
    23a8:	99 0f       	add	r25, r25
    23aa:	31 1d       	adc	r19, r1
    23ac:	87 fd       	sbrc	r24, 7
    23ae:	91 60       	ori	r25, 0x01	; 1
    23b0:	00 96       	adiw	r24, 0x00	; 0
    23b2:	61 05       	cpc	r22, r1
    23b4:	71 05       	cpc	r23, r1
    23b6:	39 f4       	brne	.+14     	; 0x23c6 <__ftoa_engine+0x28>
    23b8:	32 60       	ori	r19, 0x02	; 2
    23ba:	2e 5f       	subi	r18, 0xFE	; 254
    23bc:	3d 93       	st	X+, r19
    23be:	30 e3       	ldi	r19, 0x30	; 48
    23c0:	2a 95       	dec	r18
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <__ftoa_engine+0x1e>
    23c4:	08 95       	ret
    23c6:	9f 3f       	cpi	r25, 0xFF	; 255
    23c8:	30 f0       	brcs	.+12     	; 0x23d6 <__ftoa_engine+0x38>
    23ca:	80 38       	cpi	r24, 0x80	; 128
    23cc:	71 05       	cpc	r23, r1
    23ce:	61 05       	cpc	r22, r1
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <__ftoa_engine+0x36>
    23d2:	3c 5f       	subi	r19, 0xFC	; 252
    23d4:	3c 5f       	subi	r19, 0xFC	; 252
    23d6:	3d 93       	st	X+, r19
    23d8:	91 30       	cpi	r25, 0x01	; 1
    23da:	08 f0       	brcs	.+2      	; 0x23de <__ftoa_engine+0x40>
    23dc:	80 68       	ori	r24, 0x80	; 128
    23de:	91 1d       	adc	r25, r1
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	1f 93       	push	r17
    23e6:	0f 93       	push	r16
    23e8:	ff 92       	push	r15
    23ea:	ef 92       	push	r14
    23ec:	19 2f       	mov	r17, r25
    23ee:	98 7f       	andi	r25, 0xF8	; 248
    23f0:	96 95       	lsr	r25
    23f2:	e9 2f       	mov	r30, r25
    23f4:	96 95       	lsr	r25
    23f6:	96 95       	lsr	r25
    23f8:	e9 0f       	add	r30, r25
    23fa:	ff 27       	eor	r31, r31
    23fc:	e6 53       	subi	r30, 0x36	; 54
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	99 27       	eor	r25, r25
    2402:	33 27       	eor	r19, r19
    2404:	ee 24       	eor	r14, r14
    2406:	ff 24       	eor	r15, r15
    2408:	a7 01       	movw	r20, r14
    240a:	e7 01       	movw	r28, r14
    240c:	05 90       	lpm	r0, Z+
    240e:	08 94       	sec
    2410:	07 94       	ror	r0
    2412:	28 f4       	brcc	.+10     	; 0x241e <__ftoa_engine+0x80>
    2414:	36 0f       	add	r19, r22
    2416:	e7 1e       	adc	r14, r23
    2418:	f8 1e       	adc	r15, r24
    241a:	49 1f       	adc	r20, r25
    241c:	51 1d       	adc	r21, r1
    241e:	66 0f       	add	r22, r22
    2420:	77 1f       	adc	r23, r23
    2422:	88 1f       	adc	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	06 94       	lsr	r0
    2428:	a1 f7       	brne	.-24     	; 0x2412 <__ftoa_engine+0x74>
    242a:	05 90       	lpm	r0, Z+
    242c:	07 94       	ror	r0
    242e:	28 f4       	brcc	.+10     	; 0x243a <__ftoa_engine+0x9c>
    2430:	e7 0e       	add	r14, r23
    2432:	f8 1e       	adc	r15, r24
    2434:	49 1f       	adc	r20, r25
    2436:	56 1f       	adc	r21, r22
    2438:	c1 1d       	adc	r28, r1
    243a:	77 0f       	add	r23, r23
    243c:	88 1f       	adc	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	66 1f       	adc	r22, r22
    2442:	06 94       	lsr	r0
    2444:	a1 f7       	brne	.-24     	; 0x242e <__ftoa_engine+0x90>
    2446:	05 90       	lpm	r0, Z+
    2448:	07 94       	ror	r0
    244a:	28 f4       	brcc	.+10     	; 0x2456 <__ftoa_engine+0xb8>
    244c:	f8 0e       	add	r15, r24
    244e:	49 1f       	adc	r20, r25
    2450:	56 1f       	adc	r21, r22
    2452:	c7 1f       	adc	r28, r23
    2454:	d1 1d       	adc	r29, r1
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	66 1f       	adc	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	06 94       	lsr	r0
    2460:	a1 f7       	brne	.-24     	; 0x244a <__ftoa_engine+0xac>
    2462:	05 90       	lpm	r0, Z+
    2464:	07 94       	ror	r0
    2466:	20 f4       	brcc	.+8      	; 0x2470 <__ftoa_engine+0xd2>
    2468:	49 0f       	add	r20, r25
    246a:	56 1f       	adc	r21, r22
    246c:	c7 1f       	adc	r28, r23
    246e:	d8 1f       	adc	r29, r24
    2470:	99 0f       	add	r25, r25
    2472:	66 1f       	adc	r22, r22
    2474:	77 1f       	adc	r23, r23
    2476:	88 1f       	adc	r24, r24
    2478:	06 94       	lsr	r0
    247a:	a9 f7       	brne	.-22     	; 0x2466 <__ftoa_engine+0xc8>
    247c:	84 91       	lpm	r24, Z
    247e:	10 95       	com	r17
    2480:	17 70       	andi	r17, 0x07	; 7
    2482:	41 f0       	breq	.+16     	; 0x2494 <__ftoa_engine+0xf6>
    2484:	d6 95       	lsr	r29
    2486:	c7 95       	ror	r28
    2488:	57 95       	ror	r21
    248a:	47 95       	ror	r20
    248c:	f7 94       	ror	r15
    248e:	e7 94       	ror	r14
    2490:	1a 95       	dec	r17
    2492:	c1 f7       	brne	.-16     	; 0x2484 <__ftoa_engine+0xe6>
    2494:	e0 e7       	ldi	r30, 0x70	; 112
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	68 94       	set
    249a:	15 90       	lpm	r1, Z+
    249c:	15 91       	lpm	r17, Z+
    249e:	35 91       	lpm	r19, Z+
    24a0:	65 91       	lpm	r22, Z+
    24a2:	95 91       	lpm	r25, Z+
    24a4:	05 90       	lpm	r0, Z+
    24a6:	7f e2       	ldi	r23, 0x2F	; 47
    24a8:	73 95       	inc	r23
    24aa:	e1 18       	sub	r14, r1
    24ac:	f1 0a       	sbc	r15, r17
    24ae:	43 0b       	sbc	r20, r19
    24b0:	56 0b       	sbc	r21, r22
    24b2:	c9 0b       	sbc	r28, r25
    24b4:	d0 09       	sbc	r29, r0
    24b6:	c0 f7       	brcc	.-16     	; 0x24a8 <__ftoa_engine+0x10a>
    24b8:	e1 0c       	add	r14, r1
    24ba:	f1 1e       	adc	r15, r17
    24bc:	43 1f       	adc	r20, r19
    24be:	56 1f       	adc	r21, r22
    24c0:	c9 1f       	adc	r28, r25
    24c2:	d0 1d       	adc	r29, r0
    24c4:	7e f4       	brtc	.+30     	; 0x24e4 <__ftoa_engine+0x146>
    24c6:	70 33       	cpi	r23, 0x30	; 48
    24c8:	11 f4       	brne	.+4      	; 0x24ce <__ftoa_engine+0x130>
    24ca:	8a 95       	dec	r24
    24cc:	e6 cf       	rjmp	.-52     	; 0x249a <__ftoa_engine+0xfc>
    24ce:	e8 94       	clt
    24d0:	01 50       	subi	r16, 0x01	; 1
    24d2:	30 f0       	brcs	.+12     	; 0x24e0 <__ftoa_engine+0x142>
    24d4:	08 0f       	add	r16, r24
    24d6:	0a f4       	brpl	.+2      	; 0x24da <__ftoa_engine+0x13c>
    24d8:	00 27       	eor	r16, r16
    24da:	02 17       	cp	r16, r18
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__ftoa_engine+0x142>
    24de:	20 2f       	mov	r18, r16
    24e0:	23 95       	inc	r18
    24e2:	02 2f       	mov	r16, r18
    24e4:	7a 33       	cpi	r23, 0x3A	; 58
    24e6:	28 f0       	brcs	.+10     	; 0x24f2 <__ftoa_engine+0x154>
    24e8:	79 e3       	ldi	r23, 0x39	; 57
    24ea:	7d 93       	st	X+, r23
    24ec:	2a 95       	dec	r18
    24ee:	e9 f7       	brne	.-6      	; 0x24ea <__ftoa_engine+0x14c>
    24f0:	10 c0       	rjmp	.+32     	; 0x2512 <__ftoa_engine+0x174>
    24f2:	7d 93       	st	X+, r23
    24f4:	2a 95       	dec	r18
    24f6:	89 f6       	brne	.-94     	; 0x249a <__ftoa_engine+0xfc>
    24f8:	06 94       	lsr	r0
    24fa:	97 95       	ror	r25
    24fc:	67 95       	ror	r22
    24fe:	37 95       	ror	r19
    2500:	17 95       	ror	r17
    2502:	17 94       	ror	r1
    2504:	e1 18       	sub	r14, r1
    2506:	f1 0a       	sbc	r15, r17
    2508:	43 0b       	sbc	r20, r19
    250a:	56 0b       	sbc	r21, r22
    250c:	c9 0b       	sbc	r28, r25
    250e:	d0 09       	sbc	r29, r0
    2510:	98 f0       	brcs	.+38     	; 0x2538 <__ftoa_engine+0x19a>
    2512:	23 95       	inc	r18
    2514:	7e 91       	ld	r23, -X
    2516:	73 95       	inc	r23
    2518:	7a 33       	cpi	r23, 0x3A	; 58
    251a:	08 f0       	brcs	.+2      	; 0x251e <__ftoa_engine+0x180>
    251c:	70 e3       	ldi	r23, 0x30	; 48
    251e:	7c 93       	st	X, r23
    2520:	20 13       	cpse	r18, r16
    2522:	b8 f7       	brcc	.-18     	; 0x2512 <__ftoa_engine+0x174>
    2524:	7e 91       	ld	r23, -X
    2526:	70 61       	ori	r23, 0x10	; 16
    2528:	7d 93       	st	X+, r23
    252a:	30 f0       	brcs	.+12     	; 0x2538 <__ftoa_engine+0x19a>
    252c:	83 95       	inc	r24
    252e:	71 e3       	ldi	r23, 0x31	; 49
    2530:	7d 93       	st	X+, r23
    2532:	70 e3       	ldi	r23, 0x30	; 48
    2534:	2a 95       	dec	r18
    2536:	e1 f7       	brne	.-8      	; 0x2530 <__ftoa_engine+0x192>
    2538:	11 24       	eor	r1, r1
    253a:	ef 90       	pop	r14
    253c:	ff 90       	pop	r15
    253e:	0f 91       	pop	r16
    2540:	1f 91       	pop	r17
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	99 27       	eor	r25, r25
    2548:	87 fd       	sbrc	r24, 7
    254a:	90 95       	com	r25
    254c:	08 95       	ret

0000254e <strnlen_P>:
    254e:	fc 01       	movw	r30, r24
    2550:	05 90       	lpm	r0, Z+
    2552:	61 50       	subi	r22, 0x01	; 1
    2554:	70 40       	sbci	r23, 0x00	; 0
    2556:	01 10       	cpse	r0, r1
    2558:	d8 f7       	brcc	.-10     	; 0x2550 <strnlen_P+0x2>
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	8e 0f       	add	r24, r30
    2560:	9f 1f       	adc	r25, r31
    2562:	08 95       	ret

00002564 <strcat>:
    2564:	fb 01       	movw	r30, r22
    2566:	dc 01       	movw	r26, r24
    2568:	0d 90       	ld	r0, X+
    256a:	00 20       	and	r0, r0
    256c:	e9 f7       	brne	.-6      	; 0x2568 <strcat+0x4>
    256e:	11 97       	sbiw	r26, 0x01	; 1
    2570:	01 90       	ld	r0, Z+
    2572:	0d 92       	st	X+, r0
    2574:	00 20       	and	r0, r0
    2576:	e1 f7       	brne	.-8      	; 0x2570 <strcat+0xc>
    2578:	08 95       	ret

0000257a <strncmp>:
    257a:	fb 01       	movw	r30, r22
    257c:	dc 01       	movw	r26, r24
    257e:	41 50       	subi	r20, 0x01	; 1
    2580:	50 40       	sbci	r21, 0x00	; 0
    2582:	30 f0       	brcs	.+12     	; 0x2590 <strncmp+0x16>
    2584:	8d 91       	ld	r24, X+
    2586:	01 90       	ld	r0, Z+
    2588:	80 19       	sub	r24, r0
    258a:	19 f4       	brne	.+6      	; 0x2592 <strncmp+0x18>
    258c:	00 20       	and	r0, r0
    258e:	b9 f7       	brne	.-18     	; 0x257e <strncmp+0x4>
    2590:	88 1b       	sub	r24, r24
    2592:	99 0b       	sbc	r25, r25
    2594:	08 95       	ret

00002596 <strncpy>:
    2596:	fb 01       	movw	r30, r22
    2598:	dc 01       	movw	r26, r24
    259a:	41 50       	subi	r20, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	48 f0       	brcs	.+18     	; 0x25b2 <strncpy+0x1c>
    25a0:	01 90       	ld	r0, Z+
    25a2:	0d 92       	st	X+, r0
    25a4:	00 20       	and	r0, r0
    25a6:	c9 f7       	brne	.-14     	; 0x259a <strncpy+0x4>
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <strncpy+0x16>
    25aa:	1d 92       	st	X+, r1
    25ac:	41 50       	subi	r20, 0x01	; 1
    25ae:	50 40       	sbci	r21, 0x00	; 0
    25b0:	e0 f7       	brcc	.-8      	; 0x25aa <strncpy+0x14>
    25b2:	08 95       	ret

000025b4 <strnlen>:
    25b4:	fc 01       	movw	r30, r24
    25b6:	61 50       	subi	r22, 0x01	; 1
    25b8:	70 40       	sbci	r23, 0x00	; 0
    25ba:	01 90       	ld	r0, Z+
    25bc:	01 10       	cpse	r0, r1
    25be:	d8 f7       	brcc	.-10     	; 0x25b6 <strnlen+0x2>
    25c0:	80 95       	com	r24
    25c2:	90 95       	com	r25
    25c4:	8e 0f       	add	r24, r30
    25c6:	9f 1f       	adc	r25, r31
    25c8:	08 95       	ret

000025ca <fputc>:
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	8c 01       	movw	r16, r24
    25d4:	eb 01       	movw	r28, r22
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	81 fd       	sbrc	r24, 1
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <fputc+0x18>
    25dc:	0f ef       	ldi	r16, 0xFF	; 255
    25de:	1f ef       	ldi	r17, 0xFF	; 255
    25e0:	1a c0       	rjmp	.+52     	; 0x2616 <fputc+0x4c>
    25e2:	82 ff       	sbrs	r24, 2
    25e4:	0d c0       	rjmp	.+26     	; 0x2600 <fputc+0x36>
    25e6:	2e 81       	ldd	r18, Y+6	; 0x06
    25e8:	3f 81       	ldd	r19, Y+7	; 0x07
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	9d 81       	ldd	r25, Y+5	; 0x05
    25ee:	28 17       	cp	r18, r24
    25f0:	39 07       	cpc	r19, r25
    25f2:	64 f4       	brge	.+24     	; 0x260c <fputc+0x42>
    25f4:	e8 81       	ld	r30, Y
    25f6:	f9 81       	ldd	r31, Y+1	; 0x01
    25f8:	01 93       	st	Z+, r16
    25fa:	f9 83       	std	Y+1, r31	; 0x01
    25fc:	e8 83       	st	Y, r30
    25fe:	06 c0       	rjmp	.+12     	; 0x260c <fputc+0x42>
    2600:	e8 85       	ldd	r30, Y+8	; 0x08
    2602:	f9 85       	ldd	r31, Y+9	; 0x09
    2604:	80 2f       	mov	r24, r16
    2606:	09 95       	icall
    2608:	89 2b       	or	r24, r25
    260a:	41 f7       	brne	.-48     	; 0x25dc <fputc+0x12>
    260c:	8e 81       	ldd	r24, Y+6	; 0x06
    260e:	9f 81       	ldd	r25, Y+7	; 0x07
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	9f 83       	std	Y+7, r25	; 0x07
    2614:	8e 83       	std	Y+6, r24	; 0x06
    2616:	c8 01       	movw	r24, r16
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <sprintf>:
    2622:	ae e0       	ldi	r26, 0x0E	; 14
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e7 e1       	ldi	r30, 0x17	; 23
    2628:	f3 e1       	ldi	r31, 0x13	; 19
    262a:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__+0x1c>
    262e:	0d 89       	ldd	r16, Y+21	; 0x15
    2630:	1e 89       	ldd	r17, Y+22	; 0x16
    2632:	86 e0       	ldi	r24, 0x06	; 6
    2634:	8c 83       	std	Y+4, r24	; 0x04
    2636:	1a 83       	std	Y+2, r17	; 0x02
    2638:	09 83       	std	Y+1, r16	; 0x01
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	9f e7       	ldi	r25, 0x7F	; 127
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	ce 01       	movw	r24, r28
    2644:	49 96       	adiw	r24, 0x19	; 25
    2646:	ac 01       	movw	r20, r24
    2648:	6f 89       	ldd	r22, Y+23	; 0x17
    264a:	78 8d       	ldd	r23, Y+24	; 0x18
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <vfprintf>
    2654:	ef 81       	ldd	r30, Y+7	; 0x07
    2656:	f8 85       	ldd	r31, Y+8	; 0x08
    2658:	e0 0f       	add	r30, r16
    265a:	f1 1f       	adc	r31, r17
    265c:	10 82       	st	Z, r1
    265e:	2e 96       	adiw	r28, 0x0e	; 14
    2660:	e4 e0       	ldi	r30, 0x04	; 4
    2662:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__epilogue_restores__+0x1c>

00002666 <__ultoa_invert>:
    2666:	fa 01       	movw	r30, r20
    2668:	aa 27       	eor	r26, r26
    266a:	28 30       	cpi	r18, 0x08	; 8
    266c:	51 f1       	breq	.+84     	; 0x26c2 <__ultoa_invert+0x5c>
    266e:	20 31       	cpi	r18, 0x10	; 16
    2670:	81 f1       	breq	.+96     	; 0x26d2 <__ultoa_invert+0x6c>
    2672:	e8 94       	clt
    2674:	6f 93       	push	r22
    2676:	6e 7f       	andi	r22, 0xFE	; 254
    2678:	6e 5f       	subi	r22, 0xFE	; 254
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	8f 4f       	sbci	r24, 0xFF	; 255
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	af 4f       	sbci	r26, 0xFF	; 255
    2682:	b1 e0       	ldi	r27, 0x01	; 1
    2684:	3e d0       	rcall	.+124    	; 0x2702 <__ultoa_invert+0x9c>
    2686:	b4 e0       	ldi	r27, 0x04	; 4
    2688:	3c d0       	rcall	.+120    	; 0x2702 <__ultoa_invert+0x9c>
    268a:	67 0f       	add	r22, r23
    268c:	78 1f       	adc	r23, r24
    268e:	89 1f       	adc	r24, r25
    2690:	9a 1f       	adc	r25, r26
    2692:	a1 1d       	adc	r26, r1
    2694:	68 0f       	add	r22, r24
    2696:	79 1f       	adc	r23, r25
    2698:	8a 1f       	adc	r24, r26
    269a:	91 1d       	adc	r25, r1
    269c:	a1 1d       	adc	r26, r1
    269e:	6a 0f       	add	r22, r26
    26a0:	71 1d       	adc	r23, r1
    26a2:	81 1d       	adc	r24, r1
    26a4:	91 1d       	adc	r25, r1
    26a6:	a1 1d       	adc	r26, r1
    26a8:	20 d0       	rcall	.+64     	; 0x26ea <__ultoa_invert+0x84>
    26aa:	09 f4       	brne	.+2      	; 0x26ae <__ultoa_invert+0x48>
    26ac:	68 94       	set
    26ae:	3f 91       	pop	r19
    26b0:	2a e0       	ldi	r18, 0x0A	; 10
    26b2:	26 9f       	mul	r18, r22
    26b4:	11 24       	eor	r1, r1
    26b6:	30 19       	sub	r19, r0
    26b8:	30 5d       	subi	r19, 0xD0	; 208
    26ba:	31 93       	st	Z+, r19
    26bc:	de f6       	brtc	.-74     	; 0x2674 <__ultoa_invert+0xe>
    26be:	cf 01       	movw	r24, r30
    26c0:	08 95       	ret
    26c2:	46 2f       	mov	r20, r22
    26c4:	47 70       	andi	r20, 0x07	; 7
    26c6:	40 5d       	subi	r20, 0xD0	; 208
    26c8:	41 93       	st	Z+, r20
    26ca:	b3 e0       	ldi	r27, 0x03	; 3
    26cc:	0f d0       	rcall	.+30     	; 0x26ec <__ultoa_invert+0x86>
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__ultoa_invert+0x5c>
    26d0:	f6 cf       	rjmp	.-20     	; 0x26be <__ultoa_invert+0x58>
    26d2:	46 2f       	mov	r20, r22
    26d4:	4f 70       	andi	r20, 0x0F	; 15
    26d6:	40 5d       	subi	r20, 0xD0	; 208
    26d8:	4a 33       	cpi	r20, 0x3A	; 58
    26da:	18 f0       	brcs	.+6      	; 0x26e2 <__ultoa_invert+0x7c>
    26dc:	49 5d       	subi	r20, 0xD9	; 217
    26de:	31 fd       	sbrc	r19, 1
    26e0:	40 52       	subi	r20, 0x20	; 32
    26e2:	41 93       	st	Z+, r20
    26e4:	02 d0       	rcall	.+4      	; 0x26ea <__ultoa_invert+0x84>
    26e6:	a9 f7       	brne	.-22     	; 0x26d2 <__ultoa_invert+0x6c>
    26e8:	ea cf       	rjmp	.-44     	; 0x26be <__ultoa_invert+0x58>
    26ea:	b4 e0       	ldi	r27, 0x04	; 4
    26ec:	a6 95       	lsr	r26
    26ee:	97 95       	ror	r25
    26f0:	87 95       	ror	r24
    26f2:	77 95       	ror	r23
    26f4:	67 95       	ror	r22
    26f6:	ba 95       	dec	r27
    26f8:	c9 f7       	brne	.-14     	; 0x26ec <__ultoa_invert+0x86>
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	61 05       	cpc	r22, r1
    26fe:	71 05       	cpc	r23, r1
    2700:	08 95       	ret
    2702:	9b 01       	movw	r18, r22
    2704:	ac 01       	movw	r20, r24
    2706:	0a 2e       	mov	r0, r26
    2708:	06 94       	lsr	r0
    270a:	57 95       	ror	r21
    270c:	47 95       	ror	r20
    270e:	37 95       	ror	r19
    2710:	27 95       	ror	r18
    2712:	ba 95       	dec	r27
    2714:	c9 f7       	brne	.-14     	; 0x2708 <__ultoa_invert+0xa2>
    2716:	62 0f       	add	r22, r18
    2718:	73 1f       	adc	r23, r19
    271a:	84 1f       	adc	r24, r20
    271c:	95 1f       	adc	r25, r21
    271e:	a0 1d       	adc	r26, r0
    2720:	08 95       	ret

00002722 <_exit>:
    2722:	f8 94       	cli

00002724 <__stop_program>:
    2724:	ff cf       	rjmp	.-2      	; 0x2724 <__stop_program>
