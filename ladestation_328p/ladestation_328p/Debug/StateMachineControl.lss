
StateMachineControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000044c  00800100  00002718  000027ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  0080054c  0080054c  00002bf8  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5b  00000000  00000000  00006630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000738b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  000073ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003087  00000000  00000000  000075da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d07  00000000  00000000  0000a661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015d9  00000000  00000000  0000b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  0000c944  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008bb  00000000  00000000  0000ced8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c66  00000000  00000000  0000d793  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  0000f3f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_1>
       8:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__c.2006>:
      68:	6e 61 6e 00                                         nan.

0000006c <__c.2004>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	15 e0       	ldi	r17, 0x05	; 5
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e8 e1       	ldi	r30, 0x18	; 24
     17e:	f7 e2       	ldi	r31, 0x27	; 39
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 34       	cpi	r26, 0x4C	; 76
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	26 e0       	ldi	r18, 0x06	; 6
     18e:	ac e4       	ldi	r26, 0x4C	; 76
     190:	b5 e0       	ldi	r27, 0x05	; 5
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a6 35       	cpi	r26, 0x56	; 86
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 8d 09 	call	0x131a	; 0x131a <main>
     1a0:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <ADC_init>:
 *  Author: T
 */ 
#include "Macroes.h"
void ADC_init()
{
	DDRC &= ~(1<<DDC5);
     1a8:	3d 98       	cbi	0x07, 5	; 7
	ADMUX |= (1<<MUX0)|(1<<MUX2); // External ref and adc5 selected (1<<REFS0)||(1<<MUX1)|(1<<MUX3)
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC5D); // Disable digital input buffer
     1b4:	ee e7       	ldi	r30, 0x7E	; 126
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	80 62       	ori	r24, 0x20	; 32
     1bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADIF)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //enable adc
     1be:	ea e7       	ldi	r30, 0x7A	; 122
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	87 69       	ori	r24, 0x97	; 151
     1c6:	80 83       	st	Z, r24
     1c8:	08 95       	ret

000001ca <ADC_Sample>:
}

uint16_t ADC_Sample()
{
	ADCSRA|=(1<<ADSC);
     1ca:	ea e7       	ldi	r30, 0x7A	; 122
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 64       	ori	r24, 0x40	; 64
     1d2:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
     1d4:	80 81       	ld	r24, Z
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <ADC_Sample+0xa>
	return ADC;
     1da:	20 91 78 00 	lds	r18, 0x0078
     1de:	30 91 79 00 	lds	r19, 0x0079
     1e2:	82 2f       	mov	r24, r18
     1e4:	93 2f       	mov	r25, r19
     1e6:	08 95       	ret

000001e8 <GetUID>:
volatile unsigned int usedOere=0, usedKr=0;
char receiveBuffer[64] = "";
volatile unsigned int timeChargedInSeconds = 0;

void GetUID()
{
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
	PORTB &= ~(1<<PORTB2); // SS low to start transfer
     1f4:	2a 98       	cbi	0x05, 2	; 5
	SPI_MasterTransmit('U'); //0x55 Command get UID
     1f6:	85 e5       	ldi	r24, 0x55	; 85
     1f8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SPI_MasterTransmit>
	PORTB |= (1<<PORTB2); // SS high to end transfer
     1fc:	2a 9a       	sbi	0x05, 2	; 5
	startComTimeout = true;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 4a 06 	sts	0x064A, r24
	cardPresent = false;
     204:	10 92 50 06 	sts	0x0650, r1
	while(1)//while((!dataReady) || (!comTimeout)); Virker ikke på denne måde?
	{
		if((dataReady) || (comTimeout)) break;
     208:	80 91 4f 06 	lds	r24, 0x064F
     20c:	81 11       	cpse	r24, r1
     20e:	04 c0       	rjmp	.+8      	; 0x218 <GetUID+0x30>
     210:	80 91 4c 06 	lds	r24, 0x064C
     214:	88 23       	and	r24, r24
     216:	c1 f3       	breq	.-16     	; 0x208 <GetUID+0x20>
	}
	startComTimeout = false;
     218:	10 92 4a 06 	sts	0x064A, r1
	comTimeout = false;
     21c:	10 92 4c 06 	sts	0x064C, r1
	if (dataReady)
     220:	80 91 4f 06 	lds	r24, 0x064F
     224:	88 23       	and	r24, r24
     226:	09 f4       	brne	.+2      	; 0x22a <GetUID+0x42>
     228:	6f c0       	rjmp	.+222    	; 0x308 <GetUID+0x120>
	{
		UART_Transmit_String("Data Ready \n");
     22a:	8b e0       	ldi	r24, 0x0B	; 11
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		PORTB &= ~(1<<PORTB2); // SS low to start transfer
     232:	2a 98       	cbi	0x05, 2	; 5
		SPI_MasterTransmit(0xF5); // Send dummy data
     234:	85 ef       	ldi	r24, 0xF5	; 245
     236:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SPI_MasterTransmit>
		PORTB |= (1<<PORTB2); // SS high to end transfer
     23a:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23c:	8f e8       	ldi	r24, 0x8F	; 143
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <GetUID+0x58>
     244:	00 c0       	rjmp	.+0      	; 0x246 <GetUID+0x5e>
     246:	00 00       	nop
		_delay_us(100);
		if (SPDR == ACK)
     248:	8e b5       	in	r24, 0x2e	; 46
     24a:	86 38       	cpi	r24, 0x86	; 134
     24c:	09 f0       	breq	.+2      	; 0x250 <GetUID+0x68>
     24e:	53 c0       	rjmp	.+166    	; 0x2f6 <GetUID+0x10e>
		{
			sprintf(displayBuffer, "UID = ");
     250:	87 e0       	ldi	r24, 0x07	; 7
     252:	e8 e1       	ldi	r30, 0x18	; 24
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	a3 ef       	ldi	r26, 0xF3	; 243
     258:	b5 e0       	ldi	r27, 0x05	; 5
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	8a 95       	dec	r24
     260:	e1 f7       	brne	.-8      	; 0x25a <GetUID+0x72>
     262:	07 e0       	ldi	r16, 0x07	; 7
     264:	10 e0       	ldi	r17, 0x00	; 0
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
				SPI_MasterTransmit(0xF5); // Send dummy data
				PORTB |= (1<<PORTB2); // SS high to end transfer
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     266:	0f 2e       	mov	r0, r31
     268:	ff e1       	ldi	r31, 0x1F	; 31
     26a:	ef 2e       	mov	r14, r31
     26c:	f1 e0       	ldi	r31, 0x01	; 1
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
     272:	c3 eb       	ldi	r28, 0xB3	; 179
     274:	d5 e0       	ldi	r29, 0x05	; 5
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
			{
				PORTB &= ~(1<<PORTB2); // SS low to start transfer
     276:	2a 98       	cbi	0x05, 2	; 5
				SPI_MasterTransmit(0xF5); // Send dummy data
     278:	85 ef       	ldi	r24, 0xF5	; 245
     27a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SPI_MasterTransmit>
				PORTB |= (1<<PORTB2); // SS high to end transfer
     27e:	2a 9a       	sbi	0x05, 2	; 5
     280:	8f e8       	ldi	r24, 0x8F	; 143
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <GetUID+0x9c>
     288:	00 c0       	rjmp	.+0      	; 0x28a <GetUID+0xa2>
     28a:	00 00       	nop
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
     28c:	8e b5       	in	r24, 0x2e	; 46
     28e:	1f 92       	push	r1
     290:	8f 93       	push	r24
     292:	ff 92       	push	r15
     294:	ef 92       	push	r14
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
				strcat(displayBuffer,comBuffer);
     29e:	be 01       	movw	r22, r28
     2a0:	83 ef       	ldi	r24, 0xF3	; 243
     2a2:	95 e0       	ldi	r25, 0x05	; 5
     2a4:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
     2a8:	01 50       	subi	r16, 0x01	; 1
     2aa:	11 09       	sbc	r17, r1
		PORTB |= (1<<PORTB2); // SS high to end transfer
		_delay_us(100);
		if (SPDR == ACK)
		{
			sprintf(displayBuffer, "UID = ");
			for (int i = 1; i <= 7; i++)
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	f1 f6       	brne	.-68     	; 0x276 <GetUID+0x8e>
				_delay_us(100);
				sprintf(comBuffer, "%X", SPDR);
				strcat(displayBuffer,comBuffer);
				//Disp_char('0'+i);
			}
			strcat(displayBuffer,"\n");
     2ba:	e3 ef       	ldi	r30, 0xF3	; 243
     2bc:	f5 e0       	ldi	r31, 0x05	; 5
     2be:	01 90       	ld	r0, Z+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <GetUID+0xd6>
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	91 83       	std	Z+1, r25	; 0x01
     2cc:	80 83       	st	Z, r24
			UART_Transmit_String(displayBuffer);
     2ce:	83 ef       	ldi	r24, 0xF3	; 243
     2d0:	95 e0       	ldi	r25, 0x05	; 5
     2d2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
			strncpy(uID, displayBuffer+6, 8);
     2d6:	48 e0       	ldi	r20, 0x08	; 8
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	69 ef       	ldi	r22, 0xF9	; 249
     2dc:	75 e0       	ldi	r23, 0x05	; 5
     2de:	83 e3       	ldi	r24, 0x33	; 51
     2e0:	96 e0       	ldi	r25, 0x06	; 6
     2e2:	0e 94 c4 12 	call	0x2588	; 0x2588 <strncpy>
			UART_Transmit_String(uID);
     2e6:	83 e3       	ldi	r24, 0x33	; 51
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
			gotUID = true;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 4d 06 	sts	0x064D, r24
     2f4:	06 c0       	rjmp	.+12     	; 0x302 <GetUID+0x11a>
		}
		else
		{
			UART_Transmit_String("Command failed \n");
     2f6:	82 e2       	ldi	r24, 0x22	; 34
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
			gotUID = false;
     2fe:	10 92 4d 06 	sts	0x064D, r1
		}
		dataReady = false;
     302:	10 92 4f 06 	sts	0x064F, r1
     306:	08 c0       	rjmp	.+16     	; 0x318 <GetUID+0x130>
	}
	else
	{
		UART_Transmit_String("RFID reader timeout \n");
     308:	83 e3       	ldi	r24, 0x33	; 51
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		dataReady = false;
     310:	10 92 4f 06 	sts	0x064F, r1
		gotUID = false;
     314:	10 92 4d 06 	sts	0x064D, r1
	}
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	08 95       	ret

00000326 <SendCommand>:

void SendCommand(char command)
{
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	d8 2e       	mov	r13, r24
	char commandString[1];
	sprintf(commandString, "%c", command);
     33c:	1f 92       	push	r1
     33e:	8f 93       	push	r24
     340:	29 e4       	ldi	r18, 0x49	; 73
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	3f 93       	push	r19
     346:	2f 93       	push	r18
     348:	ee 24       	eor	r14, r14
     34a:	e3 94       	inc	r14
     34c:	f1 2c       	mov	r15, r1
     34e:	ec 0e       	add	r14, r28
     350:	fd 1e       	adc	r15, r29
     352:	ff 92       	push	r15
     354:	ef 92       	push	r14
     356:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
	sprintf(comBuffer, START_CHAR);
     35a:	2c e4       	ldi	r18, 0x4C	; 76
     35c:	31 e0       	ldi	r19, 0x01	; 1
     35e:	3f 93       	push	r19
     360:	2f 93       	push	r18
     362:	03 eb       	ldi	r16, 0xB3	; 179
     364:	15 e0       	ldi	r17, 0x05	; 5
     366:	1f 93       	push	r17
     368:	0f 93       	push	r16
     36a:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
	strcat(comBuffer, CLIENT_ID);
     36e:	f8 01       	movw	r30, r16
     370:	01 90       	ld	r0, Z+
     372:	00 20       	and	r0, r0
     374:	e9 f7       	brne	.-6      	; 0x370 <SendCommand+0x4a>
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	40 e3       	ldi	r20, 0x30	; 48
     37a:	50 e3       	ldi	r21, 0x30	; 48
     37c:	61 e3       	ldi	r22, 0x31	; 49
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	40 83       	st	Z, r20
     382:	51 83       	std	Z+1, r21	; 0x01
     384:	62 83       	std	Z+2, r22	; 0x02
     386:	73 83       	std	Z+3, r23	; 0x03
	strcat(comBuffer, commandString);
     388:	b7 01       	movw	r22, r14
     38a:	c8 01       	movw	r24, r16
     38c:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
	switch(command)
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	95 e4       	ldi	r25, 0x45	; 69
     39c:	d9 16       	cp	r13, r25
     39e:	09 f4       	brne	.+2      	; 0x3a2 <SendCommand+0x7c>
     3a0:	3f c0       	rjmp	.+126    	; 0x420 <SendCommand+0xfa>
     3a2:	9d 15       	cp	r25, r13
     3a4:	20 f0       	brcs	.+8      	; 0x3ae <SendCommand+0x88>
     3a6:	83 e4       	ldi	r24, 0x43	; 67
     3a8:	d8 12       	cpse	r13, r24
     3aa:	3e c0       	rjmp	.+124    	; 0x428 <SendCommand+0x102>
     3ac:	1a c0       	rjmp	.+52     	; 0x3e2 <SendCommand+0xbc>
     3ae:	9c e4       	ldi	r25, 0x4C	; 76
     3b0:	d9 16       	cp	r13, r25
     3b2:	51 f0       	breq	.+20     	; 0x3c8 <SendCommand+0xa2>
     3b4:	86 e5       	ldi	r24, 0x56	; 86
     3b6:	d8 12       	cpse	r13, r24
     3b8:	37 c0       	rjmp	.+110    	; 0x428 <SendCommand+0x102>
	{
		case 'V': // Packet: % 001 V UID----- *
		{
			strcat(comBuffer, uID);
     3ba:	63 e3       	ldi	r22, 0x33	; 51
     3bc:	76 e0       	ldi	r23, 0x06	; 6
     3be:	83 eb       	ldi	r24, 0xB3	; 179
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
		}
		break;
     3c6:	30 c0       	rjmp	.+96     	; 0x428 <SendCommand+0x102>
		case 'L': // Packet: % 001 L UID----- PSWD *
		{
			strcat(comBuffer, uID);
     3c8:	63 e3       	ldi	r22, 0x33	; 51
     3ca:	76 e0       	ldi	r23, 0x06	; 6
     3cc:	83 eb       	ldi	r24, 0xB3	; 179
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
			strcat(comBuffer, password);
     3d4:	6e ea       	ldi	r22, 0xAE	; 174
     3d6:	75 e0       	ldi	r23, 0x05	; 5
     3d8:	83 eb       	ldi	r24, 0xB3	; 179
     3da:	95 e0       	ldi	r25, 0x05	; 5
     3dc:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
		}
		break;
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <SendCommand+0x102>
		case 'C': // Packet: % 001 C UID----- KR-- Oe Time- *
		{
			strcat(comBuffer, taID);
     3e2:	62 e9       	ldi	r22, 0x92	; 146
     3e4:	75 e0       	ldi	r23, 0x05	; 5
     3e6:	83 eb       	ldi	r24, 0xB3	; 179
     3e8:	95 e0       	ldi	r25, 0x05	; 5
     3ea:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
			strcat(comBuffer, uID);
     3ee:	63 e3       	ldi	r22, 0x33	; 51
     3f0:	76 e0       	ldi	r23, 0x06	; 6
     3f2:	83 eb       	ldi	r24, 0xB3	; 179
     3f4:	95 e0       	ldi	r25, 0x05	; 5
     3f6:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
			strcat(comBuffer, amountKr);
     3fa:	64 ea       	ldi	r22, 0xA4	; 164
     3fc:	75 e0       	ldi	r23, 0x05	; 5
     3fe:	83 eb       	ldi	r24, 0xB3	; 179
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
			strcat(comBuffer, amountOere);
     406:	61 ea       	ldi	r22, 0xA1	; 161
     408:	75 e0       	ldi	r23, 0x05	; 5
     40a:	83 eb       	ldi	r24, 0xB3	; 179
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
			strcat(comBuffer, timeStamp);
     412:	6b e9       	ldi	r22, 0x9B	; 155
     414:	75 e0       	ldi	r23, 0x05	; 5
     416:	83 eb       	ldi	r24, 0xB3	; 179
     418:	95 e0       	ldi	r25, 0x05	; 5
     41a:	0e 94 ab 12 	call	0x2556	; 0x2556 <strcat>
		}
		break;
     41e:	04 c0       	rjmp	.+8      	; 0x428 <SendCommand+0x102>
		case 'E': // Packet: % 001 L UID----- PSWD *
		{
			UART_Transmit_String("Error Command State");
     420:	8f e4       	ldi	r24, 0x4F	; 79
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		}
		break;
		default : command='E'; break;
	}
	strcat(comBuffer, STOP_CHAR);
     428:	e3 eb       	ldi	r30, 0xB3	; 179
     42a:	f5 e0       	ldi	r31, 0x05	; 5
     42c:	01 90       	ld	r0, Z+
     42e:	00 20       	and	r0, r0
     430:	e9 f7       	brne	.-6      	; 0x42c <SendCommand+0x106>
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	8a e2       	ldi	r24, 0x2A	; 42
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	91 83       	std	Z+1, r25	; 0x01
     43a:	80 83       	st	Z, r24
	UART_Transmit_String("Packet send\n");
     43c:	83 e6       	ldi	r24, 0x63	; 99
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	UART_Transmit_String(comBuffer);
     444:	83 eb       	ldi	r24, 0xB3	; 179
     446:	95 e0       	ldi	r25, 0x05	; 5
     448:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
}
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	08 95       	ret

0000045e <CardKnown>:

bool CardKnown()
{
	SendCommand(VALIDATE_CARD_COMMAND);
     45e:	86 e5       	ldi	r24, 0x56	; 86
     460:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     464:	10 92 48 06 	sts	0x0648, r1
	startComTimeout = true;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 4a 06 	sts	0x064A, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     46e:	80 91 48 06 	lds	r24, 0x0648
     472:	81 11       	cpse	r24, r1
     474:	04 c0       	rjmp	.+8      	; 0x47e <CardKnown+0x20>
     476:	80 91 4c 06 	lds	r24, 0x064C
     47a:	88 23       	and	r24, r24
     47c:	c1 f3       	breq	.-16     	; 0x46e <CardKnown+0x10>
	}
	startComTimeout = false;
     47e:	10 92 4a 06 	sts	0x064A, r1
	comTimeout = false;
     482:	10 92 4c 06 	sts	0x064C, r1
	if (packetReceived)
     486:	80 91 48 06 	lds	r24, 0x0648
     48a:	88 23       	and	r24, r24
     48c:	c1 f1       	breq	.+112    	; 0x4fe <CardKnown+0xa0>
	{
		UART_Transmit_String("receiveBuffer content\n");
     48e:	80 e7       	ldi	r24, 0x70	; 112
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
     496:	8e e4       	ldi	r24, 0x4E	; 78
     498:	95 e0       	ldi	r25, 0x05	; 5
     49a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memcpy(passResult,receiveBuffer+5, 4);
     49e:	80 91 53 05 	lds	r24, 0x0553
     4a2:	90 91 54 05 	lds	r25, 0x0554
     4a6:	a0 91 55 05 	lds	r26, 0x0555
     4aa:	b0 91 56 05 	lds	r27, 0x0556
     4ae:	80 93 a9 05 	sts	0x05A9, r24
     4b2:	90 93 aa 05 	sts	0x05AA, r25
     4b6:	a0 93 ab 05 	sts	0x05AB, r26
     4ba:	b0 93 ac 05 	sts	0x05AC, r27
		passResult[4] = '\0';   /* null character manually added */
     4be:	10 92 ad 05 	sts	0x05AD, r1
		UART_Transmit_String("validate card passResult content\n");
     4c2:	87 e8       	ldi	r24, 0x87	; 135
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     4ca:	89 ea       	ldi	r24, 0xA9	; 169
     4cc:	95 e0       	ldi	r25, 0x05	; 5
     4ce:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     4d2:	80 e4       	ldi	r24, 0x40	; 64
     4d4:	ee e4       	ldi	r30, 0x4E	; 78
     4d6:	f5 e0       	ldi	r31, 0x05	; 5
     4d8:	df 01       	movw	r26, r30
     4da:	1d 92       	st	X+, r1
     4dc:	8a 95       	dec	r24
     4de:	e9 f7       	brne	.-6      	; 0x4da <CardKnown+0x7c>
		if (strncmp (passResult,"true",4) == 0)
     4e0:	44 e0       	ldi	r20, 0x04	; 4
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	69 ea       	ldi	r22, 0xA9	; 169
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	89 ea       	ldi	r24, 0xA9	; 169
     4ea:	95 e0       	ldi	r25, 0x05	; 5
     4ec:	0e 94 b6 12 	call	0x256c	; 0x256c <strncmp>
     4f0:	28 2f       	mov	r18, r24
     4f2:	39 2f       	mov	r19, r25
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	23 2b       	or	r18, r19
     4f8:	39 f0       	breq	.+14     	; 0x508 <CardKnown+0xaa>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Cardknown communication timeout\n");
     4fe:	8e ea       	ldi	r24, 0xAE	; 174
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		return false;
     506:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     508:	08 95       	ret

0000050a <ValidatePassword>:

bool ValidatePassword()
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	for (int i = 0; i < 4;)
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
	{
		char keyP = KBDchar(1);
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 1a 08 	call	0x1034	; 0x1034 <KBDchar>
		if (keyP != 0 && keyP != 'C')
     518:	88 23       	and	r24, r24
     51a:	79 f0       	breq	.+30     	; 0x53a <ValidatePassword+0x30>
     51c:	83 34       	cpi	r24, 0x43	; 67
     51e:	41 f0       	breq	.+16     	; 0x530 <ValidatePassword+0x26>
		{
			password[i] = keyP;
     520:	fe 01       	movw	r30, r28
     522:	e2 55       	subi	r30, 0x52	; 82
     524:	fa 4f       	sbci	r31, 0xFA	; 250
     526:	80 83       	st	Z, r24
			Disp_char(keyP);
     528:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Disp_char>
			i++;
     52c:	21 96       	adiw	r28, 0x01	; 1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <ValidatePassword+0x30>
		}
		else if (keyP == 'C')
		{
			cancelPassword = true;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 47 06 	sts	0x0647, r24
			return false;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	6c c0       	rjmp	.+216    	; 0x612 <ValidatePassword+0x108>
	}
}

bool ValidatePassword()
{
	for (int i = 0; i < 4;)
     53a:	c4 30       	cpi	r28, 0x04	; 4
     53c:	d1 05       	cpc	r29, r1
     53e:	4c f3       	brlt	.-46     	; 0x512 <ValidatePassword+0x8>
		{
			cancelPassword = true;
			return false;
		}
	}
	UART_Transmit_String("Password typed\n");
     540:	8f ec       	ldi	r24, 0xCF	; 207
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	UART_Transmit_String(password);
     548:	8e ea       	ldi	r24, 0xAE	; 174
     54a:	95 e0       	ldi	r25, 0x05	; 5
     54c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	SendCommand(LOGIN_COMMAND);
     550:	8c e4       	ldi	r24, 0x4C	; 76
     552:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     556:	10 92 48 06 	sts	0x0648, r1
	startComTimeout = true;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 4a 06 	sts	0x064A, r24
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     560:	80 91 48 06 	lds	r24, 0x0648
     564:	81 11       	cpse	r24, r1
     566:	04 c0       	rjmp	.+8      	; 0x570 <ValidatePassword+0x66>
     568:	80 91 4c 06 	lds	r24, 0x064C
     56c:	88 23       	and	r24, r24
     56e:	c1 f3       	breq	.-16     	; 0x560 <ValidatePassword+0x56>
	}
	startComTimeout = false;
     570:	10 92 4a 06 	sts	0x064A, r1
	comTimeout = false;
     574:	10 92 4c 06 	sts	0x064C, r1
	if (packetReceived)
     578:	80 91 48 06 	lds	r24, 0x0648
     57c:	88 23       	and	r24, r24
     57e:	09 f4       	brne	.+2      	; 0x582 <ValidatePassword+0x78>
     580:	43 c0       	rjmp	.+134    	; 0x608 <ValidatePassword+0xfe>
	{
		UART_Transmit_String("receiveBuffer content\n");
     582:	80 e7       	ldi	r24, 0x70	; 112
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(receiveBuffer); //Packet expected: %001A00000001---UID--truexxxx*
     58a:	8e e4       	ldi	r24, 0x4E	; 78
     58c:	95 e0       	ldi	r25, 0x05	; 5
     58e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memcpy(passResult,receiveBuffer+21, 4);
     592:	80 91 63 05 	lds	r24, 0x0563
     596:	90 91 64 05 	lds	r25, 0x0564
     59a:	a0 91 65 05 	lds	r26, 0x0565
     59e:	b0 91 66 05 	lds	r27, 0x0566
     5a2:	80 93 a9 05 	sts	0x05A9, r24
     5a6:	90 93 aa 05 	sts	0x05AA, r25
     5aa:	a0 93 ab 05 	sts	0x05AB, r26
     5ae:	b0 93 ac 05 	sts	0x05AC, r27
		passResult[4] = '\0';   /* null character manually added */
     5b2:	10 92 ad 05 	sts	0x05AD, r1
		memcpy(taID,receiveBuffer+5, 8);
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	e3 e5       	ldi	r30, 0x53	; 83
     5ba:	f5 e0       	ldi	r31, 0x05	; 5
     5bc:	a2 e9       	ldi	r26, 0x92	; 146
     5be:	b5 e0       	ldi	r27, 0x05	; 5
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	8a 95       	dec	r24
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <ValidatePassword+0xb6>
		taID[9] = '\0';   /* null character manually added */
     5c8:	10 92 9b 05 	sts	0x059B, r1
		UART_Transmit_String("passwordResult content\n");
     5cc:	8f ed       	ldi	r24, 0xDF	; 223
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     5d4:	89 ea       	ldi	r24, 0xA9	; 169
     5d6:	95 e0       	ldi	r25, 0x05	; 5
     5d8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     5dc:	80 e4       	ldi	r24, 0x40	; 64
     5de:	ee e4       	ldi	r30, 0x4E	; 78
     5e0:	f5 e0       	ldi	r31, 0x05	; 5
     5e2:	df 01       	movw	r26, r30
     5e4:	1d 92       	st	X+, r1
     5e6:	8a 95       	dec	r24
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <ValidatePassword+0xda>
		if (strncmp (passResult,"true",4) == 0)
     5ea:	44 e0       	ldi	r20, 0x04	; 4
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	69 ea       	ldi	r22, 0xA9	; 169
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	89 ea       	ldi	r24, 0xA9	; 169
     5f4:	95 e0       	ldi	r25, 0x05	; 5
     5f6:	0e 94 b6 12 	call	0x256c	; 0x256c <strncmp>
     5fa:	28 2f       	mov	r18, r24
     5fc:	39 2f       	mov	r19, r25
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	23 2b       	or	r18, r19
     602:	39 f0       	breq	.+14     	; 0x612 <ValidatePassword+0x108>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	05 c0       	rjmp	.+10     	; 0x612 <ValidatePassword+0x108>
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Validate password communication timeout\n");
     608:	87 ef       	ldi	r24, 0xF7	; 247
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		return false;
     610:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <UploadFinishedCharge>:

bool UploadFinishedCharge()
{
	SendCommand(UPLOAD_CHARGE_COMMAND);
     618:	83 e4       	ldi	r24, 0x43	; 67
     61a:	0e 94 93 01 	call	0x326	; 0x326 <SendCommand>
	packetReceived = false;
     61e:	10 92 48 06 	sts	0x0648, r1
	startComTimeout = true;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 4a 06 	sts	0x064A, r24
	//while(!packetReceived || !comTimeout); // Implement when com is working
	while(1)
	{
		if((packetReceived) || (comTimeout)) break;
     628:	80 91 48 06 	lds	r24, 0x0648
     62c:	81 11       	cpse	r24, r1
     62e:	04 c0       	rjmp	.+8      	; 0x638 <UploadFinishedCharge+0x20>
     630:	80 91 4c 06 	lds	r24, 0x064C
     634:	88 23       	and	r24, r24
     636:	c1 f3       	breq	.-16     	; 0x628 <UploadFinishedCharge+0x10>
	}
	startComTimeout = false;
     638:	10 92 4a 06 	sts	0x064A, r1
	comTimeout = false;
     63c:	10 92 4c 06 	sts	0x064C, r1
	if (packetReceived)
     640:	80 91 48 06 	lds	r24, 0x0648
     644:	88 23       	and	r24, r24
     646:	c1 f1       	breq	.+112    	; 0x6b8 <UploadFinishedCharge+0xa0>
	{
		UART_Transmit_String("receiveBuffer content. Expected: %001Atrue*\n");
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(receiveBuffer); //Packet expected: %001Atrue*
     650:	8e e4       	ldi	r24, 0x4E	; 78
     652:	95 e0       	ldi	r25, 0x05	; 5
     654:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memcpy(passResult,receiveBuffer+5, 4);
     658:	80 91 53 05 	lds	r24, 0x0553
     65c:	90 91 54 05 	lds	r25, 0x0554
     660:	a0 91 55 05 	lds	r26, 0x0555
     664:	b0 91 56 05 	lds	r27, 0x0556
     668:	80 93 a9 05 	sts	0x05A9, r24
     66c:	90 93 aa 05 	sts	0x05AA, r25
     670:	a0 93 ab 05 	sts	0x05AB, r26
     674:	b0 93 ac 05 	sts	0x05AC, r27
		passResult[4] = '\0';   /* null character manually added */
     678:	10 92 ad 05 	sts	0x05AD, r1
		UART_Transmit_String("Acknowledge passResult content\n");
     67c:	8d e4       	ldi	r24, 0x4D	; 77
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		UART_Transmit_String(passResult);
     684:	89 ea       	ldi	r24, 0xA9	; 169
     686:	95 e0       	ldi	r25, 0x05	; 5
     688:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		memset(receiveBuffer, '\0', sizeof(receiveBuffer));
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	ee e4       	ldi	r30, 0x4E	; 78
     690:	f5 e0       	ldi	r31, 0x05	; 5
     692:	df 01       	movw	r26, r30
     694:	1d 92       	st	X+, r1
     696:	8a 95       	dec	r24
     698:	e9 f7       	brne	.-6      	; 0x694 <UploadFinishedCharge+0x7c>
		if (strncmp (passResult,"true",4) == 0)
     69a:	44 e0       	ldi	r20, 0x04	; 4
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	69 ea       	ldi	r22, 0xA9	; 169
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	89 ea       	ldi	r24, 0xA9	; 169
     6a4:	95 e0       	ldi	r25, 0x05	; 5
     6a6:	0e 94 b6 12 	call	0x256c	; 0x256c <strncmp>
     6aa:	28 2f       	mov	r18, r24
     6ac:	39 2f       	mov	r19, r25
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	23 2b       	or	r18, r19
     6b2:	39 f0       	breq	.+14     	; 0x6c2 <UploadFinishedCharge+0xaa>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret
			return false;
		}
	}
	else
	{
		UART_Transmit_String("Upload Charge Communication timeout\n");
     6b8:	8d e6       	ldi	r24, 0x6D	; 109
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		return false;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     6c2:	08 95       	ret

000006c4 <TryConnection>:

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
     6c4:	82 e9       	ldi	r24, 0x92	; 146
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	noConnection = true;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 55 06 	sts	0x0655, r24
	while(noConnection)
     6d2:	80 91 55 06 	lds	r24, 0x0655
     6d6:	88 23       	and	r24, r24
     6d8:	99 f0       	breq	.+38     	; 0x700 <TryConnection+0x3c>
	{
		if (tryConnect)
     6da:	80 91 54 06 	lds	r24, 0x0654
     6de:	88 23       	and	r24, r24
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <TryConnection+0x30>
		{
			UART_Transmit_String("try connect interval\n");
     6e2:	8b ea       	ldi	r24, 0xAB	; 171
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
			if (UploadFinishedCharge()) noConnection = false;
     6ea:	0e 94 0c 03 	call	0x618	; 0x618 <UploadFinishedCharge>
     6ee:	81 11       	cpse	r24, r1
     6f0:	10 92 55 06 	sts	0x0655, r1
		}
		tryConnect = false;
     6f4:	10 92 54 06 	sts	0x0654, r1

void TryConnection()
{
	UART_Transmit_String("Try connection function\n");
	noConnection = true;
	while(noConnection)
     6f8:	80 91 55 06 	lds	r24, 0x0655
     6fc:	81 11       	cpse	r24, r1
     6fe:	ed cf       	rjmp	.-38     	; 0x6da <TryConnection+0x16>
     700:	08 95       	ret

00000702 <CarConnected>:
	}
}

bool CarConnected()
{
	startConnectCarTimeout = true;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 49 06 	sts	0x0649, r24
	UART_Transmit_String("wait for timeout\n");
     708:	81 ec       	ldi	r24, 0xC1	; 193
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	while(1)
	{
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
     710:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     714:	0b 97       	sbiw	r24, 0x0b	; 11
     716:	20 f4       	brcc	.+8      	; 0x720 <CarConnected+0x1e>
     718:	80 91 4b 06 	lds	r24, 0x064B
     71c:	88 23       	and	r24, r24
     71e:	c1 f3       	breq	.-16     	; 0x710 <CarConnected+0xe>
	}
	startConnectCarTimeout = false;
     720:	10 92 49 06 	sts	0x0649, r1
	if (!connectCarTimeout)
     724:	80 91 4b 06 	lds	r24, 0x064B
     728:	88 23       	and	r24, r24
     72a:	41 f0       	breq	.+16     	; 0x73c <CarConnected+0x3a>
	{
		return true;
	}
	else
	{
		UART_Transmit_String("connect car timeout\n");
     72c:	83 ed       	ldi	r24, 0xD3	; 211
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
		connectCarTimeout = false;
     734:	10 92 4b 06 	sts	0x064B, r1
		return false;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	08 95       	ret
		if((ADC_Sample() > 10) || (connectCarTimeout)) break;
	}
	startConnectCarTimeout = false;
	if (!connectCarTimeout)
	{
		return true;
     73c:	81 e0       	ldi	r24, 0x01	; 1
	{
		UART_Transmit_String("connect car timeout\n");
		connectCarTimeout = false;
		return false;
	}
}
     73e:	08 95       	ret

00000740 <BeginCharging>:

void BeginCharging()
{
     740:	2f 92       	push	r2
     742:	3f 92       	push	r3
     744:	4f 92       	push	r4
     746:	5f 92       	push	r5
     748:	6f 92       	push	r6
     74a:	7f 92       	push	r7
     74c:	8f 92       	push	r8
     74e:	9f 92       	push	r9
     750:	af 92       	push	r10
     752:	bf 92       	push	r11
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 4e 06 	sts	0x064E, r24
	chargingActive = true;
     76a:	80 93 52 06 	sts	0x0652, r24

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	10 e0       	ldi	r17, 0x00	; 0
}

void BeginCharging()
{
	//UpdatePrice();
	double energy=0, power=0, price = 0;
     772:	41 2c       	mov	r4, r1
     774:	51 2c       	mov	r5, r1
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	61 2c       	mov	r6, r1
     77c:	71 2c       	mov	r7, r1
     77e:	81 2c       	mov	r8, r1
     780:	91 2c       	mov	r9, r1
     782:	a1 2c       	mov	r10, r1
     784:	b1 2c       	mov	r11, r1
     786:	c1 2c       	mov	r12, r1
     788:	d1 2c       	mov	r13, r1
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     78a:	64 c1       	rjmp	.+712    	; 0xa54 <__stack+0x155>
	{
		if (takeSample)
     78c:	80 91 53 06 	lds	r24, 0x0653
     790:	88 23       	and	r24, r24
     792:	09 f4       	brne	.+2      	; 0x796 <BeginCharging+0x56>
     794:	2a c1       	rjmp	.+596    	; 0x9ea <__stack+0xeb>
		{
			data=ADC_Sample();
     796:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
     79a:	ec 01       	movw	r28, r24
			if((lastData!=data) && data > 0) //Only update display if needed (any change)
     79c:	08 17       	cp	r16, r24
     79e:	19 07       	cpc	r17, r25
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <BeginCharging+0x64>
     7a2:	4a c0       	rjmp	.+148    	; 0x838 <BeginCharging+0xf8>
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	09 f4       	brne	.+2      	; 0x7aa <BeginCharging+0x6a>
     7a8:	4a c0       	rjmp	.+148    	; 0x83e <BeginCharging+0xfe>
			{
				Disp_GotoXY(13,1);
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	8d e0       	ldi	r24, 0x0D	; 13
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
				sprintf(displayBuffer, "%4u", data);
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	88 ee       	ldi	r24, 0xE8	; 232
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	03 ef       	ldi	r16, 0xF3	; 243
     7c4:	15 e0       	ldi	r17, 0x05	; 5
     7c6:	1f 93       	push	r17
     7c8:	0f 93       	push	r16
     7ca:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
				Disp_printString(displayBuffer);
     7ce:	c8 01       	movw	r24, r16
     7d0:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
				power = (double)data/409.2; //((2/5)*1023);   //mW 0.4*1023 = 409.2 // uW 0.4*1.023
     7d4:	be 01       	movw	r22, r28
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 a7 0c 	call	0x194e	; 0x194e <__floatunsisf>
     7de:	2a e9       	ldi	r18, 0x9A	; 154
     7e0:	39 e9       	ldi	r19, 0x99	; 153
     7e2:	4c ec       	ldi	r20, 0xCC	; 204
     7e4:	53 e4       	ldi	r21, 0x43	; 67
     7e6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__divsf3>
     7ea:	f6 2e       	mov	r15, r22
     7ec:	e7 2e       	mov	r14, r23
     7ee:	58 2e       	mov	r5, r24
     7f0:	49 2e       	mov	r4, r25
     7f2:	66 2e       	mov	r6, r22
     7f4:	77 2e       	mov	r7, r23
     7f6:	88 2e       	mov	r8, r24
     7f8:	99 2e       	mov	r9, r25
				Disp_GotoXY(3,1);
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
				sprintf(displayBuffer, "%.2f", power);
     806:	4f 92       	push	r4
     808:	5f 92       	push	r5
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	8c ee       	ldi	r24, 0xEC	; 236
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	1f 93       	push	r17
     818:	0f 93       	push	r16
     81a:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
				Disp_printString(displayBuffer);
     81e:	c8 01       	movw	r24, r16
     820:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
				lastData=data;
     824:	8d b7       	in	r24, 0x3d	; 61
     826:	9e b7       	in	r25, 0x3e	; 62
     828:	0e 96       	adiw	r24, 0x0e	; 14
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	9e bf       	out	0x3e, r25	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	8d bf       	out	0x3d, r24	; 61
     834:	8e 01       	movw	r16, r28
     836:	2d c0       	rjmp	.+90     	; 0x892 <BeginCharging+0x152>
			}
			else if (data == 0)
     838:	01 15       	cp	r16, r1
     83a:	11 05       	cpc	r17, r1
     83c:	51 f5       	brne	.+84     	; 0x892 <BeginCharging+0x152>
			{
				usedKr = floor(price);
     83e:	64 2d       	mov	r22, r4
     840:	75 2d       	mov	r23, r5
     842:	8e 2d       	mov	r24, r14
     844:	9f 2d       	mov	r25, r15
     846:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <floor>
     84a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fixunssfsi>
     84e:	70 93 8f 05 	sts	0x058F, r23
     852:	60 93 8e 05 	sts	0x058E, r22
				usedOere = (price-usedKr)*100;
     856:	60 91 8e 05 	lds	r22, 0x058E
     85a:	70 91 8f 05 	lds	r23, 0x058F
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 a7 0c 	call	0x194e	; 0x194e <__floatunsisf>
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	64 2d       	mov	r22, r4
     86c:	75 2d       	mov	r23, r5
     86e:	8e 2d       	mov	r24, r14
     870:	9f 2d       	mov	r25, r15
     872:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__subsf3>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	48 ec       	ldi	r20, 0xC8	; 200
     87c:	52 e4       	ldi	r21, 0x42	; 66
     87e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     882:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fixunssfsi>
     886:	70 93 91 05 	sts	0x0591, r23
     88a:	60 93 90 05 	sts	0x0590, r22
				chargingActive = false;
     88e:	10 92 52 06 	sts	0x0652, r1
			}
			energy += power;
     892:	26 2d       	mov	r18, r6
     894:	37 2d       	mov	r19, r7
     896:	48 2d       	mov	r20, r8
     898:	59 2d       	mov	r21, r9
     89a:	6a 2d       	mov	r22, r10
     89c:	7b 2d       	mov	r23, r11
     89e:	8c 2d       	mov	r24, r12
     8a0:	9d 2d       	mov	r25, r13
     8a2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__addsf3>
     8a6:	e6 2e       	mov	r14, r22
     8a8:	f7 2e       	mov	r15, r23
     8aa:	d8 2f       	mov	r29, r24
     8ac:	c9 2f       	mov	r28, r25
     8ae:	a6 2e       	mov	r10, r22
     8b0:	b7 2e       	mov	r11, r23
     8b2:	c8 2e       	mov	r12, r24
     8b4:	d9 2e       	mov	r13, r25
			Disp_GotoXY(3,2);
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			if (energy < 9999) sprintf(displayBuffer, "%.1f", energy);
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	3c e3       	ldi	r19, 0x3C	; 60
     8c6:	4c e1       	ldi	r20, 0x1C	; 28
     8c8:	56 e4       	ldi	r21, 0x46	; 70
     8ca:	6e 2d       	mov	r22, r14
     8cc:	7f 2d       	mov	r23, r15
     8ce:	8d 2f       	mov	r24, r29
     8d0:	9c 2f       	mov	r25, r28
     8d2:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     8d6:	88 23       	and	r24, r24
     8d8:	bc f4       	brge	.+46     	; 0x908 <__stack+0x9>
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ff 92       	push	r15
     8e0:	ef 92       	push	r14
     8e2:	81 ef       	ldi	r24, 0xF1	; 241
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	83 ef       	ldi	r24, 0xF3	; 243
     8ec:	95 e0       	ldi	r25, 0x05	; 5
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
     8f6:	8d b7       	in	r24, 0x3d	; 61
     8f8:	9e b7       	in	r25, 0x3e	; 62
     8fa:	08 96       	adiw	r24, 0x08	; 8
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	9e bf       	out	0x3e, r25	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	8d bf       	out	0x3d, r24	; 61
     906:	16 c0       	rjmp	.+44     	; 0x934 <__stack+0x35>
			else sprintf(displayBuffer, "%5.f", energy);
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ff 92       	push	r15
     90e:	ef 92       	push	r14
     910:	86 ef       	ldi	r24, 0xF6	; 246
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	83 ef       	ldi	r24, 0xF3	; 243
     91a:	95 e0       	ldi	r25, 0x05	; 5
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
     924:	8d b7       	in	r24, 0x3d	; 61
     926:	9e b7       	in	r25, 0x3e	; 62
     928:	08 96       	adiw	r24, 0x08	; 8
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	9e bf       	out	0x3e, r25	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	8d bf       	out	0x3d, r24	; 61
			Disp_printString(displayBuffer);
     934:	83 ef       	ldi	r24, 0xF3	; 243
     936:	95 e0       	ldi	r25, 0x05	; 5
     938:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			price = energy*KR_PR_MWS;
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	5f e3       	ldi	r21, 0x3F	; 63
     944:	6e 2d       	mov	r22, r14
     946:	7f 2d       	mov	r23, r15
     948:	8d 2f       	mov	r24, r29
     94a:	9c 2f       	mov	r25, r28
     94c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     950:	c6 2f       	mov	r28, r22
     952:	d7 2f       	mov	r29, r23
     954:	38 2e       	mov	r3, r24
     956:	29 2e       	mov	r2, r25
     958:	46 2e       	mov	r4, r22
     95a:	57 2e       	mov	r5, r23
     95c:	e8 2e       	mov	r14, r24
     95e:	f9 2e       	mov	r15, r25
			Disp_GotoXY(11,2);
     960:	62 e0       	ldi	r22, 0x02	; 2
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	8b e0       	ldi	r24, 0x0B	; 11
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			if (price < 99) sprintf(displayBuffer, "%.1f", price);
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	46 ec       	ldi	r20, 0xC6	; 198
     972:	52 e4       	ldi	r21, 0x42	; 66
     974:	6c 2f       	mov	r22, r28
     976:	7d 2f       	mov	r23, r29
     978:	83 2d       	mov	r24, r3
     97a:	92 2d       	mov	r25, r2
     97c:	0e 94 0f 0c 	call	0x181e	; 0x181e <__cmpsf2>
     980:	88 23       	and	r24, r24
     982:	bc f4       	brge	.+46     	; 0x9b2 <__stack+0xb3>
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	81 ef       	ldi	r24, 0xF1	; 241
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	83 ef       	ldi	r24, 0xF3	; 243
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
     9a0:	8d b7       	in	r24, 0x3d	; 61
     9a2:	9e b7       	in	r25, 0x3e	; 62
     9a4:	08 96       	adiw	r24, 0x08	; 8
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	9e bf       	out	0x3e, r25	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	8d bf       	out	0x3d, r24	; 61
     9b0:	16 c0       	rjmp	.+44     	; 0x9de <__stack+0xdf>
			else sprintf(displayBuffer, "%4.f", price);
     9b2:	2f 92       	push	r2
     9b4:	3f 92       	push	r3
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	8b ef       	ldi	r24, 0xFB	; 251
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	83 ef       	ldi	r24, 0xF3	; 243
     9c4:	95 e0       	ldi	r25, 0x05	; 5
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
     9ce:	8d b7       	in	r24, 0x3d	; 61
     9d0:	9e b7       	in	r25, 0x3e	; 62
     9d2:	08 96       	adiw	r24, 0x08	; 8
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	9e bf       	out	0x3e, r25	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	8d bf       	out	0x3d, r24	; 61
			//sprintf(displayBuffer, "%.1f", price);
			Disp_printString(displayBuffer);
     9de:	83 ef       	ldi	r24, 0xF3	; 243
     9e0:	95 e0       	ldi	r25, 0x05	; 5
     9e2:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			takeSample = false;
     9e6:	10 92 53 06 	sts	0x0653, r1
		}
		if (readKeys)
     9ea:	80 91 51 06 	lds	r24, 0x0651
     9ee:	88 23       	and	r24, r24
     9f0:	89 f1       	breq	.+98     	; 0xa54 <__stack+0x155>
		{
			char keyP = KBDchar(1);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 1a 08 	call	0x1034	; 0x1034 <KBDchar>
			if (keyP == 'C')
     9f8:	83 34       	cpi	r24, 0x43	; 67
     9fa:	51 f5       	brne	.+84     	; 0xa50 <__stack+0x151>
			{
				usedKr = floor(price);
     9fc:	64 2d       	mov	r22, r4
     9fe:	75 2d       	mov	r23, r5
     a00:	8e 2d       	mov	r24, r14
     a02:	9f 2d       	mov	r25, r15
     a04:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <floor>
     a08:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fixunssfsi>
     a0c:	70 93 8f 05 	sts	0x058F, r23
     a10:	60 93 8e 05 	sts	0x058E, r22
				usedOere = (price-usedKr)*100;
     a14:	60 91 8e 05 	lds	r22, 0x058E
     a18:	70 91 8f 05 	lds	r23, 0x058F
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 a7 0c 	call	0x194e	; 0x194e <__floatunsisf>
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
     a28:	64 2d       	mov	r22, r4
     a2a:	75 2d       	mov	r23, r5
     a2c:	8e 2d       	mov	r24, r14
     a2e:	9f 2d       	mov	r25, r15
     a30:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__subsf3>
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	48 ec       	ldi	r20, 0xC8	; 200
     a3a:	52 e4       	ldi	r21, 0x42	; 66
     a3c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     a40:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__fixunssfsi>
     a44:	70 93 91 05 	sts	0x0591, r23
     a48:	60 93 90 05 	sts	0x0590, r22
				chargingActive = false;
     a4c:	10 92 52 06 	sts	0x0652, r1
			}
			readKeys = false;
     a50:	10 92 51 06 	sts	0x0651, r1
	//UpdatePrice();
	double energy=0, power=0, price = 0;
	uint16_t data=0, lastData=0;
	keypadActive = true;
	chargingActive = true;
	while (chargingActive)
     a54:	80 91 52 06 	lds	r24, 0x0652
     a58:	81 11       	cpse	r24, r1
     a5a:	98 ce       	rjmp	.-720    	; 0x78c <BeginCharging+0x4c>
				chargingActive = false;
			}
			readKeys = false;
		}
	}
	keypadActive = false;
     a5c:	10 92 4e 06 	sts	0x064E, r1
	UART_Transmit_String("\nKr ");
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	sprintf(amountKr, "%04u", usedKr);
     a68:	80 91 8e 05 	lds	r24, 0x058E
     a6c:	90 91 8f 05 	lds	r25, 0x058F
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	84 ea       	ldi	r24, 0xA4	; 164
     a7e:	95 e0       	ldi	r25, 0x05	; 5
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
	UART_Transmit_String(amountKr);
     a88:	84 ea       	ldi	r24, 0xA4	; 164
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	UART_Transmit_String("\nOere ");
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	sprintf(amountOere, "%02u", usedOere);
     a98:	80 91 90 05 	lds	r24, 0x0590
     a9c:	90 91 91 05 	lds	r25, 0x0591
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	81 e1       	ldi	r24, 0x11	; 17
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	81 ea       	ldi	r24, 0xA1	; 161
     aae:	95 e0       	ldi	r25, 0x05	; 5
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
	UART_Transmit_String(amountOere);
     ab8:	81 ea       	ldi	r24, 0xA1	; 161
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	UART_Transmit_String("\nTime in seconds");
     ac0:	86 e1       	ldi	r24, 0x16	; 22
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	sprintf(timeStamp, "%05u", timeChargedInSeconds);
     ac8:	80 91 4c 05 	lds	r24, 0x054C
     acc:	90 91 4d 05 	lds	r25, 0x054D
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	87 e2       	ldi	r24, 0x27	; 39
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	9f 93       	push	r25
     ada:	8f 93       	push	r24
     adc:	8b e9       	ldi	r24, 0x9B	; 155
     ade:	95 e0       	ldi	r25, 0x05	; 5
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 0a 13 	call	0x2614	; 0x2614 <sprintf>
	UART_Transmit_String(timeStamp);
     ae8:	8b e9       	ldi	r24, 0x9B	; 155
     aea:	95 e0       	ldi	r25, 0x05	; 5
     aec:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
     af0:	8d b7       	in	r24, 0x3d	; 61
     af2:	9e b7       	in	r25, 0x3e	; 62
     af4:	42 96       	adiw	r24, 0x12	; 18
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	9e bf       	out	0x3e, r25	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	8d bf       	out	0x3d, r24	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	bf 90       	pop	r11
     b12:	af 90       	pop	r10
     b14:	9f 90       	pop	r9
     b16:	8f 90       	pop	r8
     b18:	7f 90       	pop	r7
     b1a:	6f 90       	pop	r6
     b1c:	5f 90       	pop	r5
     b1e:	4f 90       	pop	r4
     b20:	3f 90       	pop	r3
     b22:	2f 90       	pop	r2
     b24:	08 95       	ret

00000b26 <Disp_command>:
	displayAddress++;
}

void Disp_command(char command)
{
	SPCR |= (1<<DORD); // Send LSB first
     b26:	9c b5       	in	r25, 0x2c	; 44
     b28:	90 62       	ori	r25, 0x20	; 32
     b2a:	9c bd       	out	0x2c, r25	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     b2c:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     b2e:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     b30:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     b32:	28 98       	cbi	0x05, 0	; 5
	DDRC |= (1<<DDC4); // RS output
     b34:	3c 9a       	sbi	0x07, 4	; 7
	PORTC &= ~(1<<PORTC4); // RS low = instruction
     b36:	44 98       	cbi	0x08, 4	; 8
	SPI_MasterTransmit(command);
     b38:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB first
     b3c:	8c b5       	in	r24, 0x2c	; 44
     b3e:	8f 7d       	andi	r24, 0xDF	; 223
     b40:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     b42:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1); // Shift register Output Enable low (active low)
     b44:	29 98       	cbi	0x05, 1	; 5
     b46:	87 ec       	ldi	r24, 0xC7	; 199
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <Disp_command+0x24>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <Disp_command+0x2a>
     b50:	00 00       	nop
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     b52:	28 98       	cbi	0x05, 0	; 5
     b54:	8f e7       	ldi	r24, 0x7F	; 127
     b56:	9c e0       	ldi	r25, 0x0C	; 12
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <Disp_command+0x32>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <Disp_command+0x38>
     b5e:	00 00       	nop
     b60:	08 95       	ret

00000b62 <Disp_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	80 e7       	ldi	r24, 0x70	; 112
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	90 40       	sbci	r25, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <Disp_init+0x6>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <Disp_init+0x10>
     b72:	00 00       	nop
}

void Disp_init()
{
	_delay_ms(50);
	Disp_command(0b00111000); // 0b00111000
     b74:	88 e3       	ldi	r24, 0x38	; 56
     b76:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b7a:	87 ec       	ldi	r24, 0xC7	; 199
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <Disp_init+0x1c>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <Disp_init+0x22>
     b84:	00 00       	nop
	_delay_us(50);
	Disp_command(0b00001111); // 0b00001111
     b86:	8f e0       	ldi	r24, 0x0F	; 15
     b88:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
     b8c:	8f ec       	ldi	r24, 0xCF	; 207
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <Disp_init+0x2e>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <Disp_init+0x34>
     b96:	00 00       	nop
	_delay_us(500);
	Disp_command(0b00000001); // 0b00000001
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
     b9e:	8f e8       	ldi	r24, 0x8F	; 143
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <Disp_init+0x40>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <Disp_init+0x46>
     ba8:	00 00       	nop
	_delay_us(100);
	Disp_command(0b00000110); // 0b00000111
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
     bb0:	8f e9       	ldi	r24, 0x9F	; 159
     bb2:	9f e0       	ldi	r25, 0x0F	; 15
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <Disp_init+0x52>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <Disp_init+0x58>
     bba:	00 00       	nop
     bbc:	08 95       	ret

00000bbe <Disp_GotoXY>:
	_delay_us(1000);
}

void Disp_GotoXY (int x,int y)   // Go to position x (max 16) in line y (max 2).
{
	if (y == 2) displayAddress = x + 16;
     bbe:	62 30       	cpi	r22, 0x02	; 2
     bc0:	71 05       	cpc	r23, r1
     bc2:	29 f4       	brne	.+10     	; 0xbce <Disp_GotoXY+0x10>
     bc4:	98 2f       	mov	r25, r24
     bc6:	90 5f       	subi	r25, 0xF0	; 240
     bc8:	90 93 00 01 	sts	0x0100, r25
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Disp_GotoXY+0x14>
	else displayAddress = x;
     bce:	80 93 00 01 	sts	0x0100, r24
	char lineaddr = ((y-1) * 0x40 + (x-1)) | 0x80;// Put the x position
     bd2:	90 e4       	ldi	r25, 0x40	; 64
     bd4:	69 9f       	mul	r22, r25
     bd6:	80 0d       	add	r24, r0
     bd8:	11 24       	eor	r1, r1
     bda:	81 54       	subi	r24, 0x41	; 65
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
     be2:	08 95       	ret

00000be4 <Disp_char>:
#include "Macroes.h"
static uint8_t displayAddress = 1;
enum state {stateIdle, stateCarConnected, stateCardSwiped, stateTypePassword, stateWrongPassword, stateCharging, stateChargingStopped, stateDisconnectCar, stateUploadToDB, stateDBoffline, stateUnknownCard, stateDisableCard,stateCardReadError,stateConnectCar,stateErrorState};

void Disp_char(char data)
{
     be4:	cf 93       	push	r28
     be6:	c8 2f       	mov	r28, r24
	//static uint8_t displayAddress = 1;
	if (displayAddress == 17) Disp_GotoXY(1,2);
     be8:	90 91 00 01 	lds	r25, 0x0100
     bec:	91 31       	cpi	r25, 0x11	; 17
     bee:	39 f4       	brne	.+14     	; 0xbfe <Disp_char+0x1a>
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
     bfc:	0b c0       	rjmp	.+22     	; 0xc14 <Disp_char+0x30>
	else if (displayAddress == 33)
     bfe:	91 32       	cpi	r25, 0x21	; 33
     c00:	49 f4       	brne	.+18     	; 0xc14 <Disp_char+0x30>
	{
		 Disp_GotoXY(1,1);
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
		 displayAddress = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 00 01 	sts	0x0100, r24
	}
	DDRC |= (1<<DDC4); // RS output
     c14:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4); // RS high = data
     c16:	44 9a       	sbi	0x08, 4	; 8
	SPCR |= (1<<DORD); // Send LSB first
     c18:	8c b5       	in	r24, 0x2c	; 44
     c1a:	80 62       	ori	r24, 0x20	; 32
     c1c:	8c bd       	out	0x2c, r24	; 44
	DDRB |= (1<<DDB1); // Shift register Output Enable
     c1e:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); // Shift register Output Enable high (active low)
     c20:	29 9a       	sbi	0x05, 1	; 5
	DDRB |= (1<<DDB0); // Enable display output
     c22:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<PORTB0); // Enable display low
     c24:	28 98       	cbi	0x05, 0	; 5

	SPI_MasterTransmit(data);
     c26:	8c 2f       	mov	r24, r28
     c28:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SPI_MasterTransmit>
	SPCR &= ~(1<<DORD); // Reset to MSB
     c2c:	8c b5       	in	r24, 0x2c	; 44
     c2e:	8f 7d       	andi	r24, 0xDF	; 223
     c30:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<PORTB0); // Enable display high
     c32:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     c34:	29 98       	cbi	0x05, 1	; 5
     c36:	87 ec       	ldi	r24, 0xC7	; 199
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <Disp_char+0x56>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <Disp_char+0x5c>
     c40:	00 00       	nop
	//PORTB |= (1<<PORTB0); // Enable display high
	_delay_us(50);
	PORTB &= ~(1<<PORTB0); // Enable display low
     c42:	28 98       	cbi	0x05, 0	; 5
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
	displayAddress++;
     c44:	80 91 00 01 	lds	r24, 0x0100
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 00 01 	sts	0x0100, r24
}
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <Disp_printString>:
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
     c58:	88 81       	ld	r24, Y
     c5a:	88 23       	and	r24, r24
     c5c:	31 f0       	breq	.+12     	; 0xc6a <Disp_printString+0x18>
	_delay_us(800);
	//PORTB |= (1<<PORTB1);
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
     c5e:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
     c60:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Disp_char>
	//PORTB &= ~(1<<PORTB1);
}

void Disp_printString (char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
     c64:	89 91       	ld	r24, Y+
     c66:	81 11       	cpse	r24, r1
     c68:	fb cf       	rjmp	.-10     	; 0xc60 <Disp_printString+0xe>
	{                             // the zero termination of the string
		Disp_char(*str);           // Send the value of the pointer address
		str++;                     // Increment pointer
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <Disp_clear>:
	Disp_command(lineaddr);           // Send a command with 'lineaddr'
}

void Disp_clear (void)
{
	Disp_command(0x01);      // Send command '0x01' (Display Clear)
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 93 05 	call	0xb26	; 0xb26 <Disp_command>
     c76:	08 95       	ret

00000c78 <Disp_printState>:
}


void Disp_printState(int state)
{
	switch(state)
     c78:	88 30       	cpi	r24, 0x08	; 8
     c7a:	91 05       	cpc	r25, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <Disp_printState+0x8>
     c7e:	25 c1       	rjmp	.+586    	; 0xeca <Disp_printState+0x252>
     c80:	94 f4       	brge	.+36     	; 0xca6 <Disp_printState+0x2e>
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <Disp_printState+0x12>
     c88:	6f c0       	rjmp	.+222    	; 0xd68 <Disp_printState+0xf0>
     c8a:	34 f4       	brge	.+12     	; 0xc98 <Disp_printState+0x20>
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	11 f1       	breq	.+68     	; 0xcd4 <Disp_printState+0x5c>
     c90:	03 97       	sbiw	r24, 0x03	; 3
     c92:	09 f0       	breq	.+2      	; 0xc96 <Disp_printState+0x1e>
     c94:	49 c1       	rjmp	.+658    	; 0xf28 <Disp_printState+0x2b0>
     c96:	35 c0       	rjmp	.+106    	; 0xd02 <Disp_printState+0x8a>
     c98:	86 30       	cpi	r24, 0x06	; 6
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <Disp_printState+0x28>
     c9e:	db c0       	rjmp	.+438    	; 0xe56 <Disp_printState+0x1de>
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <Disp_printState+0x2c>
     ca2:	06 c1       	rjmp	.+524    	; 0xeb0 <Disp_printState+0x238>
     ca4:	c1 c0       	rjmp	.+386    	; 0xe28 <Disp_printState+0x1b0>
     ca6:	8b 30       	cpi	r24, 0x0B	; 11
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <Disp_printState+0x36>
     cac:	7d c0       	rjmp	.+250    	; 0xda8 <Disp_printState+0x130>
     cae:	44 f4       	brge	.+16     	; 0xcc0 <Disp_printState+0x48>
     cb0:	89 30       	cpi	r24, 0x09	; 9
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <Disp_printState+0x40>
     cb6:	16 c1       	rjmp	.+556    	; 0xee4 <Disp_printState+0x26c>
     cb8:	0a 97       	sbiw	r24, 0x0a	; 10
     cba:	09 f0       	breq	.+2      	; 0xcbe <Disp_printState+0x46>
     cbc:	35 c1       	rjmp	.+618    	; 0xf28 <Disp_printState+0x2b0>
     cbe:	3e c0       	rjmp	.+124    	; 0xd3c <Disp_printState+0xc4>
     cc0:	8d 30       	cpi	r24, 0x0D	; 13
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <Disp_printState+0x50>
     cc6:	dd c0       	rjmp	.+442    	; 0xe82 <Disp_printState+0x20a>
     cc8:	0c f4       	brge	.+2      	; 0xccc <Disp_printState+0x54>
     cca:	8e c0       	rjmp	.+284    	; 0xde8 <Disp_printState+0x170>
     ccc:	0e 97       	sbiw	r24, 0x0e	; 14
     cce:	09 f0       	breq	.+2      	; 0xcd2 <Disp_printState+0x5a>
     cd0:	2b c1       	rjmp	.+598    	; 0xf28 <Disp_printState+0x2b0>
     cd2:	15 c1       	rjmp	.+554    	; 0xefe <Disp_printState+0x286>
	{
		case stateIdle :
		{
			Disp_clear();
     cd4:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Welcome");
     ce4:	8c e2       	ldi	r24, 0x2C	; 44
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Swipe Card");
     cf8:	84 e3       	ldi	r24, 0x34	; 52
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     d00:	08 95       	ret
		case stateTypePassword :
		{
			Disp_clear();
     d02:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Type Password");
     d12:	8f e3       	ldi	r24, 0x3F	; 63
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(7,2);
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	87 e0       	ldi	r24, 0x07	; 7
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("C = cancel");
     d26:	8d e4       	ldi	r24, 0x4D	; 77
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     d2e:	62 e0       	ldi	r22, 0x02	; 2
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
		}
		break;
     d3a:	08 95       	ret
		case stateUnknownCard :
		{
			Disp_clear();
     d3c:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("card unknown");
     d4c:	88 e5       	ldi	r24, 0x58	; 88
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	87 ea       	ldi	r24, 0xA7	; 167
     d58:	91 e6       	ldi	r25, 0x61	; 97
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <Disp_printState+0xe2>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <Disp_printState+0xec>
     d64:	00 00       	nop
     d66:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateWrongPassword :
		{
			Disp_clear();
     d68:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("wrong password");
     d78:	85 e6       	ldi	r24, 0x65	; 101
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("try again");
     d8c:	84 e7       	ldi	r24, 0x74	; 116
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
     d94:	2f ef       	ldi	r18, 0xFF	; 255
     d96:	87 ea       	ldi	r24, 0xA7	; 167
     d98:	91 e6       	ldi	r25, 0x61	; 97
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	80 40       	sbci	r24, 0x00	; 0
     d9e:	90 40       	sbci	r25, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <Disp_printState+0x122>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <Disp_printState+0x12c>
     da4:	00 00       	nop
     da6:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateDisableCard :
		{
			Disp_clear();
     da8:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("card blocked");
     db8:	8e e7       	ldi	r24, 0x7E	; 126
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("contact service");
     dcc:	8b e8       	ldi	r24, 0x8B	; 139
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	87 ea       	ldi	r24, 0xA7	; 167
     dd8:	91 e6       	ldi	r25, 0x61	; 97
     dda:	21 50       	subi	r18, 0x01	; 1
     ddc:	80 40       	sbci	r24, 0x00	; 0
     dde:	90 40       	sbci	r25, 0x00	; 0
     de0:	e1 f7       	brne	.-8      	; 0xdda <Disp_printState+0x162>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <Disp_printState+0x16c>
     de4:	00 00       	nop
     de6:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCardReadError :
		{
			Disp_clear();
     de8:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("card read error");
     df8:	8b e9       	ldi	r24, 0x9B	; 155
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("swipe again");
     e0c:	8b ea       	ldi	r24, 0xAB	; 171
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
     e14:	2f ef       	ldi	r18, 0xFF	; 255
     e16:	87 ea       	ldi	r24, 0xA7	; 167
     e18:	91 e6       	ldi	r25, 0x61	; 97
     e1a:	21 50       	subi	r18, 0x01	; 1
     e1c:	80 40       	sbci	r24, 0x00	; 0
     e1e:	90 40       	sbci	r25, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <Disp_printState+0x1a2>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <Disp_printState+0x1ac>
     e24:	00 00       	nop
     e26:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateCharging:
		{
			Disp_clear();
     e28:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("P:     mW A:");
     e38:	87 eb       	ldi	r24, 0xB7	; 183
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     e40:	62 e0       	ldi	r22, 0x02	; 2
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("E:     mWS    kr");
     e4c:	84 ec       	ldi	r24, 0xC4	; 196
     e4e:	93 e0       	ldi	r25, 0x03	; 3
     e50:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     e54:	08 95       	ret
		case stateChargingStopped:
		{
			Disp_clear();
     e56:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Charging stopped");
     e66:	85 ed       	ldi	r24, 0xD5	; 213
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	87 ea       	ldi	r24, 0xA7	; 167
     e72:	91 e6       	ldi	r25, 0x61	; 97
     e74:	21 50       	subi	r18, 0x01	; 1
     e76:	80 40       	sbci	r24, 0x00	; 0
     e78:	90 40       	sbci	r25, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <Disp_printState+0x1fc>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <Disp_printState+0x206>
     e7e:	00 00       	nop
     e80:	08 95       	ret
			_delay_ms(2000);
		}
		break;
		case stateConnectCar:
		{
			Disp_clear();
     e82:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Connect Car");
     e92:	86 ee       	ldi	r24, 0xE6	; 230
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
			Disp_GotoXY(1,2);
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("to continue");
     ea6:	82 ef       	ldi	r24, 0xF2	; 242
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     eae:	08 95       	ret
		case stateDisconnectCar:
		{
			Disp_clear();
     eb0:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Disconnect Car");
     ec0:	8e ef       	ldi	r24, 0xFE	; 254
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     ec8:	08 95       	ret
		case stateUploadToDB:
		{
			Disp_clear();
     eca:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Uploading data");
     eda:	8d e0       	ldi	r24, 0x0D	; 13
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     ee2:	08 95       	ret
		case stateDBoffline :
		{
			Disp_clear();
     ee4:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Charger Offline");
     ef4:	8c e1       	ldi	r24, 0x1C	; 28
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
		}
		break;
     efc:	08 95       	ret
		case stateErrorState :
		{
			Disp_clear();
     efe:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
			Disp_GotoXY(1,1);
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 df 05 	call	0xbbe	; 0xbbe <Disp_GotoXY>
			Disp_printString("Error State");
     f0e:	8c e2       	ldi	r24, 0x2C	; 44
     f10:	94 e0       	ldi	r25, 0x04	; 4
     f12:	0e 94 29 06 	call	0xc52	; 0xc52 <Disp_printString>
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	87 ea       	ldi	r24, 0xA7	; 167
     f1a:	91 e6       	ldi	r25, 0x61	; 97
     f1c:	21 50       	subi	r18, 0x01	; 1
     f1e:	80 40       	sbci	r24, 0x00	; 0
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	e1 f7       	brne	.-8      	; 0xf1c <Disp_printState+0x2a4>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <Disp_printState+0x2ae>
     f26:	00 00       	nop
     f28:	08 95       	ret

00000f2a <KeyTranslate>:
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
	switch  (keyData)
     f2a:	8e 3c       	cpi	r24, 0xCE	; 206
     f2c:	09 f4       	brne	.+2      	; 0xf30 <KeyTranslate+0x6>
     f2e:	63 c0       	rjmp	.+198    	; 0xff6 <KeyTranslate+0xcc>
     f30:	08 f5       	brcc	.+66     	; 0xf74 <KeyTranslate+0x4a>
     f32:	8d 37       	cpi	r24, 0x7D	; 125
     f34:	09 f4       	brne	.+2      	; 0xf38 <KeyTranslate+0xe>
     f36:	43 c0       	rjmp	.+134    	; 0xfbe <KeyTranslate+0x94>
     f38:	70 f4       	brcc	.+28     	; 0xf56 <KeyTranslate+0x2c>
     f3a:	8f 30       	cpi	r24, 0x0F	; 15
     f3c:	09 f4       	brne	.+2      	; 0xf40 <KeyTranslate+0x16>
     f3e:	57 c0       	rjmp	.+174    	; 0xfee <KeyTranslate+0xc4>
     f40:	20 f4       	brcc	.+8      	; 0xf4a <KeyTranslate+0x20>
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <KeyTranslate+0x1e>
     f46:	4f c0       	rjmp	.+158    	; 0xfe6 <KeyTranslate+0xbc>
     f48:	5a c0       	rjmp	.+180    	; 0xffe <KeyTranslate+0xd4>
     f4a:	87 37       	cpi	r24, 0x77	; 119
     f4c:	71 f1       	breq	.+92     	; 0xfaa <KeyTranslate+0x80>
     f4e:	8b 37       	cpi	r24, 0x7B	; 123
     f50:	09 f0       	breq	.+2      	; 0xf54 <KeyTranslate+0x2a>
     f52:	55 c0       	rjmp	.+170    	; 0xffe <KeyTranslate+0xd4>
     f54:	2e c0       	rjmp	.+92     	; 0xfb2 <KeyTranslate+0x88>
     f56:	8b 3b       	cpi	r24, 0xBB	; 187
     f58:	71 f1       	breq	.+92     	; 0xfb6 <KeyTranslate+0x8c>
     f5a:	30 f4       	brcc	.+12     	; 0xf68 <KeyTranslate+0x3e>
     f5c:	8e 37       	cpi	r24, 0x7E	; 126
     f5e:	b9 f1       	breq	.+110    	; 0xfce <KeyTranslate+0xa4>
     f60:	87 3b       	cpi	r24, 0xB7	; 183
     f62:	09 f0       	breq	.+2      	; 0xf66 <KeyTranslate+0x3c>
     f64:	4c c0       	rjmp	.+152    	; 0xffe <KeyTranslate+0xd4>
     f66:	4d c0       	rjmp	.+154    	; 0x1002 <KeyTranslate+0xd8>
     f68:	8d 3b       	cpi	r24, 0xBD	; 189
     f6a:	59 f1       	breq	.+86     	; 0xfc2 <KeyTranslate+0x98>
     f6c:	8e 3b       	cpi	r24, 0xBE	; 190
     f6e:	09 f0       	breq	.+2      	; 0xf72 <KeyTranslate+0x48>
     f70:	46 c0       	rjmp	.+140    	; 0xffe <KeyTranslate+0xd4>
     f72:	2b c0       	rjmp	.+86     	; 0xfca <KeyTranslate+0xa0>
     f74:	87 3e       	cpi	r24, 0xE7	; 231
     f76:	a9 f1       	breq	.+106    	; 0xfe2 <KeyTranslate+0xb8>
     f78:	58 f4       	brcc	.+22     	; 0xf90 <KeyTranslate+0x66>
     f7a:	8b 3d       	cpi	r24, 0xDB	; 219
     f7c:	f1 f0       	breq	.+60     	; 0xfba <KeyTranslate+0x90>
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <KeyTranslate+0x5c>
     f80:	87 3d       	cpi	r24, 0xD7	; 215
     f82:	e9 f5       	brne	.+122    	; 0xffe <KeyTranslate+0xd4>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <KeyTranslate+0x84>
     f86:	8d 3d       	cpi	r24, 0xDD	; 221
     f88:	f1 f0       	breq	.+60     	; 0xfc6 <KeyTranslate+0x9c>
     f8a:	8e 3d       	cpi	r24, 0xDE	; 222
     f8c:	c1 f5       	brne	.+112    	; 0xffe <KeyTranslate+0xd4>
     f8e:	21 c0       	rjmp	.+66     	; 0xfd2 <KeyTranslate+0xa8>
     f90:	8e 3e       	cpi	r24, 0xEE	; 238
     f92:	09 f1       	breq	.+66     	; 0xfd6 <KeyTranslate+0xac>
     f94:	28 f4       	brcc	.+10     	; 0xfa0 <KeyTranslate+0x76>
     f96:	8b 3e       	cpi	r24, 0xEB	; 235
     f98:	11 f1       	breq	.+68     	; 0xfde <KeyTranslate+0xb4>
     f9a:	8d 3e       	cpi	r24, 0xED	; 237
     f9c:	81 f5       	brne	.+96     	; 0xffe <KeyTranslate+0xd4>
     f9e:	1d c0       	rjmp	.+58     	; 0xfda <KeyTranslate+0xb0>
     fa0:	80 3f       	cpi	r24, 0xF0	; 240
     fa2:	39 f1       	breq	.+78     	; 0xff2 <KeyTranslate+0xc8>
     fa4:	8f 3f       	cpi	r24, 0xFF	; 255
     fa6:	59 f5       	brne	.+86     	; 0xffe <KeyTranslate+0xd4>
     fa8:	20 c0       	rjmp	.+64     	; 0xfea <KeyTranslate+0xc0>
	{
		case 0b01110111: kbdChar='1'; break;
     faa:	81 e3       	ldi	r24, 0x31	; 49
     fac:	08 95       	ret
		case 0b10110111: kbdChar='2'; break;
		case 0b11010111: kbdChar='3'; break;
     fae:	83 e3       	ldi	r24, 0x33	; 51
     fb0:	08 95       	ret
		case 0b01111011: kbdChar='4'; break;
     fb2:	84 e3       	ldi	r24, 0x34	; 52
     fb4:	08 95       	ret
		case 0b10111011: kbdChar='5'; break;
     fb6:	85 e3       	ldi	r24, 0x35	; 53
     fb8:	08 95       	ret
		case 0b11011011: kbdChar='6'; break;
     fba:	86 e3       	ldi	r24, 0x36	; 54
     fbc:	08 95       	ret
		case 0b01111101: kbdChar='7'; break;
     fbe:	87 e3       	ldi	r24, 0x37	; 55
     fc0:	08 95       	ret
		case 0b10111101: kbdChar='8'; break;
     fc2:	88 e3       	ldi	r24, 0x38	; 56
     fc4:	08 95       	ret
		case 0b11011101: kbdChar='9'; break;
     fc6:	89 e3       	ldi	r24, 0x39	; 57
     fc8:	08 95       	ret
		case 0b10111110: kbdChar='0'; break;
     fca:	80 e3       	ldi	r24, 0x30	; 48
     fcc:	08 95       	ret
		case 0b01111110: kbdChar='A'; break;
     fce:	81 e4       	ldi	r24, 0x41	; 65
     fd0:	08 95       	ret
		case 0b11011110: kbdChar='B'; break;
     fd2:	82 e4       	ldi	r24, 0x42	; 66
     fd4:	08 95       	ret
		case 0b11101110: kbdChar='C'; break;
     fd6:	83 e4       	ldi	r24, 0x43	; 67
     fd8:	08 95       	ret
		case 0b11101101: kbdChar='D'; break;
     fda:	84 e4       	ldi	r24, 0x44	; 68
     fdc:	08 95       	ret
		case 0b11101011: kbdChar='E'; break;
     fde:	85 e4       	ldi	r24, 0x45	; 69
     fe0:	08 95       	ret
		case 0b11100111: kbdChar='F'; break;
     fe2:	86 e4       	ldi	r24, 0x46	; 70
     fe4:	08 95       	ret
		case 0b00000000: kbdChar='L'; break;
     fe6:	8c e4       	ldi	r24, 0x4C	; 76
     fe8:	08 95       	ret
		case 0b11111111: kbdChar='H'; break;
     fea:	88 e4       	ldi	r24, 0x48	; 72
     fec:	08 95       	ret
		case 0b00001111: kbdChar='Q'; break;
     fee:	81 e5       	ldi	r24, 0x51	; 81
     ff0:	08 95       	ret
		case 0b11110000: kbdChar='P'; break;
     ff2:	80 e5       	ldi	r24, 0x50	; 80
     ff4:	08 95       	ret
		case 0b11001110: Disp_clear(); break;
     ff6:	0e 94 38 06 	call	0xc70	; 0xc70 <Disp_clear>
#include <avr/io.h>
#include "Macroes.h"

char KeyTranslate (uint8_t keyData)
{
	char kbdChar = 0;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
		case 0b11100111: kbdChar='F'; break;
		case 0b00000000: kbdChar='L'; break;
		case 0b11111111: kbdChar='H'; break;
		case 0b00001111: kbdChar='Q'; break;
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
     ffc:	08 95       	ret
		default:		 kbdChar='X'; break;
     ffe:	88 e5       	ldi	r24, 0x58	; 88
    1000:	08 95       	ret
{
	char kbdChar = 0;
	switch  (keyData)
	{
		case 0b01110111: kbdChar='1'; break;
		case 0b10110111: kbdChar='2'; break;
    1002:	82 e3       	ldi	r24, 0x32	; 50
		case 0b11110000: kbdChar='P'; break;
		case 0b11001110: Disp_clear(); break;
		default:		 kbdChar='X'; break;
	}
	return kbdChar;
}
    1004:	08 95       	ret

00001006 <DebounceKBD>:
uint8_t static lastKey = 0;
uint8_t static dbCount = 0;
uint8_t static dbLimit = 5;	//Debounce "depth"
bool debounced = false;

	if (keyData == lastKey)
    1006:	90 91 3f 06 	lds	r25, 0x063F
    100a:	89 13       	cpse	r24, r25
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <DebounceKBD+0x22>
	{
		if (dbCount==dbLimit)
    100e:	80 91 40 06 	lds	r24, 0x0640
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	21 f4       	brne	.+8      	; 0x101e <DebounceKBD+0x18>
		{
			dbCount=0;
    1016:	10 92 40 06 	sts	0x0640, r1
			return debounced = true;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	08 95       	ret
		}
		else
		{
			dbCount++;
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 40 06 	sts	0x0640, r24
			return debounced = false;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	08 95       	ret
		}
	}
	else
	{
		lastKey = keyData;
    1028:	80 93 3f 06 	sts	0x063F, r24
		dbCount=0;
    102c:	10 92 40 06 	sts	0x0640, r1
		return debounced = false;
    1030:	80 e0       	ldi	r24, 0x00	; 0
	}
	return debounced;
}
    1032:	08 95       	ret

00001034 <KBDchar>:

char KBDchar (uint8_t charReturn)
{
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	18 2f       	mov	r17, r24
	uint8_t keyData;
	static char keyPrevious = 0, keyPressed = 0;

	DDRC  |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C udgang
    103c:	97 b1       	in	r25, 0x07	; 7
    103e:	9f 60       	ori	r25, 0x0F	; 15
    1040:	97 b9       	out	0x07, r25	; 7
	PORTC &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C lav
    1042:	88 b1       	in	r24, 0x08	; 8
    1044:	18 b8       	out	0x08, r1	; 8
	DDRD  &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D indgang
    1046:	8a b1       	in	r24, 0x0a	; 10
    1048:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D pullup
    104a:	9b b1       	in	r25, 0x0b	; 11
    104c:	90 6f       	ori	r25, 0xF0	; 240
    104e:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1050:	87 ec       	ldi	r24, 0xC7	; 199
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <KBDchar+0x20>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <KBDchar+0x26>
    105a:	00 00       	nop
	_delay_us(50);
	keyData = PIND & 0b11110000; // Coloum
    105c:	c9 b1       	in	r28, 0x09	; 9
    105e:	c0 7f       	andi	r28, 0xF0	; 240
	
	DDRC  &= (0<<PORTC0)&(0<<PORTC1)&(0<<PORTC2)&(0<<PORTC3);//C indgang
    1060:	87 b1       	in	r24, 0x07	; 7
    1062:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3);//C pullup
    1064:	98 b1       	in	r25, 0x08	; 8
    1066:	9f 60       	ori	r25, 0x0F	; 15
    1068:	98 b9       	out	0x08, r25	; 8
	DDRD  |= (1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);//D udgang
    106a:	9a b1       	in	r25, 0x0a	; 10
    106c:	90 6f       	ori	r25, 0xF0	; 240
    106e:	9a b9       	out	0x0a, r25	; 10
	PORTD &= (0<<PORTD4)&(0<<PORTD5)&(0<<PORTD6)&(0<<PORTD7);//D lav
    1070:	8b b1       	in	r24, 0x0b	; 11
    1072:	1b b8       	out	0x0b, r1	; 11
    1074:	87 ec       	ldi	r24, 0xC7	; 199
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <KBDchar+0x44>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <KBDchar+0x4a>
    107e:	00 00       	nop
	_delay_us(50);
	keyData |= (PINC & 0b00001111); // Row
    1080:	96 b1       	in	r25, 0x06	; 6
    1082:	9f 70       	andi	r25, 0x0F	; 15
    1084:	c9 2b       	or	r28, r25
	if (keyData != 0xFF)
    1086:	cf 3f       	cpi	r28, 0xFF	; 255
    1088:	a9 f0       	breq	.+42     	; 0x10b4 <KBDchar+0x80>
	{
		keyPressed = KeyTranslate(keyData);
    108a:	8c 2f       	mov	r24, r28
    108c:	0e 94 95 07 	call	0xf2a	; 0xf2a <KeyTranslate>
    1090:	d8 2f       	mov	r29, r24
    1092:	80 93 41 06 	sts	0x0641, r24
		if ((keyPressed != keyPrevious) && DebounceKBD(keyData))
    1096:	80 91 42 06 	lds	r24, 0x0642
    109a:	d8 17       	cp	r29, r24
    109c:	79 f0       	breq	.+30     	; 0x10bc <KBDchar+0x88>
    109e:	8c 2f       	mov	r24, r28
    10a0:	0e 94 03 08 	call	0x1006	; 0x1006 <DebounceKBD>
    10a4:	88 23       	and	r24, r24
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <KBDchar+0x8c>
		{
			keyPrevious = keyPressed;
    10a8:	d0 93 42 06 	sts	0x0642, r29
			if (charReturn != 0)
    10ac:	11 23       	and	r17, r17
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <KBDchar+0x8e>
			{
				return keyPressed;
    10b0:	cd 2f       	mov	r28, r29
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <KBDchar+0x8e>
		else
		{
			return 0;
		}		
	}
	keyPrevious = 0;
    10b4:	10 92 42 06 	sts	0x0642, r1
	return 0;
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <KBDchar+0x8e>
			}
			else return keyData;
		}
		else
		{
			return 0;
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <KBDchar+0x8e>
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
		}		
	}
	keyPrevious = 0;
	return 0;
    10c2:	8c 2f       	mov	r24, r28
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	08 95       	ret

000010cc <SPI_MasterInit>:
#include "Macroes.h"

void SPI_MasterInit()
{
	// Set MOSI and SCK  & SS output, all others input
	DDRB |= (1<<DDB5)|(1<<DDB3)|(1<<DDB2);// PB5 = SCK, PB3 = MOSI, PB2 = SS(No effect when output)
    10cc:	84 b1       	in	r24, 0x04	; 4
    10ce:	8c 62       	ori	r24, 0x2C	; 44
    10d0:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PORTB2); //Pull up resistor on SS input to ensure Master mode
	// Enable SPI, Master, set clock rate fck/64
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    10d2:	82 e5       	ldi	r24, 0x52	; 82
    10d4:	8c bd       	out	0x2c, r24	; 44
    10d6:	08 95       	ret

000010d8 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
    10d8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    10da:	0d b4       	in	r0, 0x2d	; 45
    10dc:	07 fe       	sbrs	r0, 7
    10de:	fd cf       	rjmp	.-6      	; 0x10da <SPI_MasterTransmit+0x2>
}
    10e0:	08 95       	ret

000010e2 <RFID_init>:
int state = stateIdle;
unsigned int dataIndex = 0;

void RFID_init()
{
	EICRA |= (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00); // Get interrupt on rising edge
    10e2:	e9 e6       	ldi	r30, 0x69	; 105
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 60       	ori	r24, 0x0F	; 15
    10ea:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1)|(1<<INT0); // Enable external interrupts
    10ec:	8d b3       	in	r24, 0x1d	; 29
    10ee:	83 60       	ori	r24, 0x03	; 3
    10f0:	8d bb       	out	0x1d, r24	; 29
	DDRD &= ~(1<<DDD3)&~(1<<DDD2); //Set external interrupts INT0 & INT1 as inputs
    10f2:	8a b1       	in	r24, 0x0a	; 10
    10f4:	83 7f       	andi	r24, 0xF3	; 243
    10f6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB2); //Set SS as output. RFID
    10f8:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2); //Set SS high (Active low)
    10fa:	2a 9a       	sbi	0x05, 2	; 5
    10fc:	08 95       	ret

000010fe <Timer_init>:
}

void Timer_init()
{
	TCCR1B = (1<<CS10)|(1<<WGM12);  // Set clock no prescaler(16Mhz) & mode 4 CTC
    10fe:	89 e0       	ldi	r24, 0x09	; 9
    1100:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15999;                  // Get interrupt at 15999 = every 1mS
    1104:	8f e7       	ldi	r24, 0x7F	; 127
    1106:	9e e3       	ldi	r25, 0x3E	; 62
    1108:	90 93 89 00 	sts	0x0089, r25
    110c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A);            // Enable interrupt compare match
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	80 93 6f 00 	sts	0x006F, r24
    1116:	08 95       	ret

00001118 <__vector_18>:
}

ISR(USART_RX_vect)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	2f 93       	push	r18
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	receiveBuffer[dataIndex] = UDR0;
    112c:	80 91 43 06 	lds	r24, 0x0643
    1130:	90 91 44 06 	lds	r25, 0x0644
    1134:	20 91 c6 00 	lds	r18, 0x00C6
    1138:	fc 01       	movw	r30, r24
    113a:	e2 5b       	subi	r30, 0xB2	; 178
    113c:	fa 4f       	sbci	r31, 0xFA	; 250
    113e:	20 83       	st	Z, r18
	if (receiveBuffer[dataIndex] == '*')
    1140:	2a 32       	cpi	r18, 0x2A	; 42
    1142:	41 f4       	brne	.+16     	; 0x1154 <__vector_18+0x3c>
	{
		dataIndex = 0;
    1144:	10 92 44 06 	sts	0x0644, r1
    1148:	10 92 43 06 	sts	0x0643, r1
		packetReceived = true;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 48 06 	sts	0x0648, r24
    1152:	05 c0       	rjmp	.+10     	; 0x115e <__vector_18+0x46>
	}
	else dataIndex++;
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	90 93 44 06 	sts	0x0644, r25
    115a:	80 93 43 06 	sts	0x0643, r24
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	2f 91       	pop	r18
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <__vector_11>:

ISR(TIMER1_COMPA_vect) // Comes every 1ms
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
	volatile static uint16_t count1Min = INTERVAL_MIN, count1Sec = INTERVAL_SEC,count9ms = INTERVAL_READKEYS, count100ms = INTERVAL_COM_TIMEOUT,count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
	if (chargingActive)
    1180:	80 91 52 06 	lds	r24, 0x0652
    1184:	88 23       	and	r24, r24
    1186:	f1 f0       	breq	.+60     	; 0x11c4 <__vector_11+0x52>
	{
		if ((--count1Sec) ==0)  // Do if 1 minus countSec = 0
    1188:	80 91 09 01 	lds	r24, 0x0109
    118c:	90 91 0a 01 	lds	r25, 0x010A
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	90 93 0a 01 	sts	0x010A, r25
    1196:	80 93 09 01 	sts	0x0109, r24
    119a:	89 2b       	or	r24, r25
    119c:	c9 f4       	brne	.+50     	; 0x11d0 <__vector_11+0x5e>
		{
			timeChargedInSeconds++;
    119e:	80 91 4c 05 	lds	r24, 0x054C
    11a2:	90 91 4d 05 	lds	r25, 0x054D
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	90 93 4d 05 	sts	0x054D, r25
    11ac:	80 93 4c 05 	sts	0x054C, r24
			count1Sec = INTERVAL_SEC; // 1000
    11b0:	88 ee       	ldi	r24, 0xE8	; 232
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	90 93 0a 01 	sts	0x010A, r25
    11b8:	80 93 09 01 	sts	0x0109, r24
			takeSample = true;      // Set runSec to 1. Activating this function to be run next time
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 53 06 	sts	0x0653, r24
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <__vector_11+0x5e>
		}
	}
	else count1Sec = INTERVAL_SEC;
    11c4:	88 ee       	ldi	r24, 0xE8	; 232
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	90 93 0a 01 	sts	0x010A, r25
    11cc:	80 93 09 01 	sts	0x0109, r24
	
	if (keypadActive)
    11d0:	80 91 4e 06 	lds	r24, 0x064E
    11d4:	88 23       	and	r24, r24
    11d6:	a9 f0       	breq	.+42     	; 0x1202 <__vector_11+0x90>
	{
		if ((--count9ms) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    11d8:	80 91 07 01 	lds	r24, 0x0107
    11dc:	90 91 08 01 	lds	r25, 0x0108
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	90 93 08 01 	sts	0x0108, r25
    11e6:	80 93 07 01 	sts	0x0107, r24
    11ea:	89 2b       	or	r24, r25
    11ec:	81 f4       	brne	.+32     	; 0x120e <__vector_11+0x9c>
		{
			count9ms = INTERVAL_READKEYS; //
    11ee:	89 e0       	ldi	r24, 0x09	; 9
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	90 93 08 01 	sts	0x0108, r25
    11f6:	80 93 07 01 	sts	0x0107, r24
			readKeys = true;      // Set readKeys to 1. Activating this function to be run next time
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 51 06 	sts	0x0651, r24
    1200:	06 c0       	rjmp	.+12     	; 0x120e <__vector_11+0x9c>
		}
	}
	else count9ms = INTERVAL_READKEYS;
    1202:	89 e0       	ldi	r24, 0x09	; 9
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	90 93 08 01 	sts	0x0108, r25
    120a:	80 93 07 01 	sts	0x0107, r24
	
	if (startComTimeout)
    120e:	80 91 4a 06 	lds	r24, 0x064A
    1212:	88 23       	and	r24, r24
    1214:	a9 f0       	breq	.+42     	; 0x1240 <__vector_11+0xce>
	{
		if ((--count100ms) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    1216:	80 91 05 01 	lds	r24, 0x0105
    121a:	90 91 06 01 	lds	r25, 0x0106
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	90 93 06 01 	sts	0x0106, r25
    1224:	80 93 05 01 	sts	0x0105, r24
    1228:	89 2b       	or	r24, r25
    122a:	81 f4       	brne	.+32     	; 0x124c <__vector_11+0xda>
		{
			count100ms = INTERVAL_COM_TIMEOUT; //
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	97 e2       	ldi	r25, 0x27	; 39
    1230:	90 93 06 01 	sts	0x0106, r25
    1234:	80 93 05 01 	sts	0x0105, r24
			comTimeout = true;      // Set readKeys to 1. Activating this function to be run next time
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 4c 06 	sts	0x064C, r24
    123e:	06 c0       	rjmp	.+12     	; 0x124c <__vector_11+0xda>
		}
	}
	else count100ms = INTERVAL_COM_TIMEOUT;
    1240:	80 e1       	ldi	r24, 0x10	; 16
    1242:	97 e2       	ldi	r25, 0x27	; 39
    1244:	90 93 06 01 	sts	0x0106, r25
    1248:	80 93 05 01 	sts	0x0105, r24

	if (startConnectCarTimeout)
    124c:	80 91 49 06 	lds	r24, 0x0649
    1250:	88 23       	and	r24, r24
    1252:	a9 f0       	breq	.+42     	; 0x127e <__vector_11+0x10c>
	{
		if ((--count10Sec) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    1254:	80 91 03 01 	lds	r24, 0x0103
    1258:	90 91 04 01 	lds	r25, 0x0104
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	90 93 04 01 	sts	0x0104, r25
    1262:	80 93 03 01 	sts	0x0103, r24
    1266:	89 2b       	or	r24, r25
    1268:	81 f4       	brne	.+32     	; 0x128a <__vector_11+0x118>
		{
			count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT; //
    126a:	80 e1       	ldi	r24, 0x10	; 16
    126c:	97 e2       	ldi	r25, 0x27	; 39
    126e:	90 93 04 01 	sts	0x0104, r25
    1272:	80 93 03 01 	sts	0x0103, r24
			connectCarTimeout = true;      // Set readKeys to 1. Activating this function to be run next time
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 4b 06 	sts	0x064B, r24
    127c:	06 c0       	rjmp	.+12     	; 0x128a <__vector_11+0x118>
		}
	}
	else count10Sec = INTERVAL_CONNECT_CAR_TIMEOUT;
    127e:	80 e1       	ldi	r24, 0x10	; 16
    1280:	97 e2       	ldi	r25, 0x27	; 39
    1282:	90 93 04 01 	sts	0x0104, r25
    1286:	80 93 03 01 	sts	0x0103, r24
	
	if (noConnection)
    128a:	80 91 55 06 	lds	r24, 0x0655
    128e:	88 23       	and	r24, r24
    1290:	a9 f0       	breq	.+42     	; 0x12bc <__vector_11+0x14a>
	{
		if ((--count1Min) ==0)  // Do if 1 minus count9ms = 0 and keypadActive = true
    1292:	80 91 01 01 	lds	r24, 0x0101
    1296:	90 91 02 01 	lds	r25, 0x0102
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	90 93 02 01 	sts	0x0102, r25
    12a0:	80 93 01 01 	sts	0x0101, r24
    12a4:	89 2b       	or	r24, r25
    12a6:	81 f4       	brne	.+32     	; 0x12c8 <__vector_11+0x156>
		{
			count1Min = INTERVAL_MIN; //
    12a8:	80 e6       	ldi	r24, 0x60	; 96
    12aa:	9a ee       	ldi	r25, 0xEA	; 234
    12ac:	90 93 02 01 	sts	0x0102, r25
    12b0:	80 93 01 01 	sts	0x0101, r24
			tryConnect = true;      // Set readKeys to 1. Activating this function to be run next time
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 54 06 	sts	0x0654, r24
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <__vector_11+0x156>
		}
	}
	else count1Min = INTERVAL_MIN;
    12bc:	80 e6       	ldi	r24, 0x60	; 96
    12be:	9a ee       	ldi	r25, 0xEA	; 234
    12c0:	90 93 02 01 	sts	0x0102, r25
    12c4:	80 93 01 01 	sts	0x0101, r24
}
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_1>:

ISR(INT0_vect)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	8f 93       	push	r24
	if (!dataReady) cardPresent = true;
    12e2:	80 91 4f 06 	lds	r24, 0x064F
    12e6:	81 11       	cpse	r24, r1
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <__vector_1+0x1a>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 50 06 	sts	0x0650, r24
	//UART_Transmit_String("card present");
}
    12f0:	8f 91       	pop	r24
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_2>:

ISR(INT1_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	8f 93       	push	r24
	dataReady = true;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 4f 06 	sts	0x064F, r24
	//UART_Transmit_String("data ready");
}
    130e:	8f 91       	pop	r24
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <main>:

int main(void)
{
	int preState = 99;
	SPI_MasterInit();
    131a:	0e 94 66 08 	call	0x10cc	; 0x10cc <SPI_MasterInit>
	UART_Init();
    131e:	0e 94 86 0b 	call	0x170c	; 0x170c <UART_Init>
	RFID_init();
    1322:	0e 94 71 08 	call	0x10e2	; 0x10e2 <RFID_init>
	Timer_init();
    1326:	0e 94 7f 08 	call	0x10fe	; 0x10fe <Timer_init>
	Disp_init();
    132a:	0e 94 b1 05 	call	0xb62	; 0xb62 <Disp_init>
	ADC_init();
    132e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ADC_init>
	sei();
    1332:	78 94       	sei
	UART_Transmit_String("Card test \n");
    1334:	88 e3       	ldi	r24, 0x38	; 56
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
	//UART_Transmit_String("data ready");
}

int main(void)
{
	int preState = 99;
    133c:	23 e6       	ldi	r18, 0x63	; 99
    133e:	30 e0       	ldi	r19, 0x00	; 0
				{
					UART_Transmit_String("stateDisconnectCar \n");
					Disp_printState(state);
					while (ADC_Sample() > 5);
					preState = state;
					state = stateUploadToDB;
    1340:	c8 e0       	ldi	r28, 0x08	; 8
    1342:	d0 e0       	ldi	r29, 0x00	; 0
					preState = state;
					//state = stateIdle;
				}
				break;
				
				default : state=stateErrorState; break;
    1344:	0f 2e       	mov	r0, r31
    1346:	fe e0       	ldi	r31, 0x0E	; 14
    1348:	cf 2e       	mov	r12, r31
    134a:	d1 2c       	mov	r13, r1
    134c:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateConnectCar \n");
					Disp_printState(state);
					if (CarConnected())
					{
						preState = state;
						state = stateCharging;
    134e:	0f 2e       	mov	r0, r31
    1350:	f5 e0       	ldi	r31, 0x05	; 5
    1352:	8f 2e       	mov	r8, r31
    1354:	91 2c       	mov	r9, r1
    1356:	f0 2d       	mov	r31, r0
						state = stateIdle;
					} 
					else
					{
						preState = state;
						state = stateDBoffline;
    1358:	0f 2e       	mov	r0, r31
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	6f 2e       	mov	r6, r31
    135e:	71 2c       	mov	r7, r1
    1360:	f0 2d       	mov	r31, r0
							state = stateIdle;
						} 
						else
						{
							preState = state;
							state = stateWrongPassword;
    1362:	68 94       	set
    1364:	22 24       	eor	r2, r2
    1366:	22 f8       	bld	r2, 2
    1368:	31 2c       	mov	r3, r1
				{
					UART_Transmit_String("stateCharging \n");
					Disp_printState(state);
					BeginCharging();
					preState = state;
					state = stateChargingStopped;
    136a:	0f 2e       	mov	r0, r31
    136c:	f6 e0       	ldi	r31, 0x06	; 6
    136e:	ef 2e       	mov	r14, r31
    1370:	f1 2c       	mov	r15, r1
    1372:	f0 2d       	mov	r31, r0
					UART_Transmit_String("stateChargingStopped \n");
					Disp_printState(state);
					if (ADC_Sample() > 5)
					{
						preState = state;
						state = stateDisconnectCar;
    1374:	0f 2e       	mov	r0, r31
    1376:	f7 e0       	ldi	r31, 0x07	; 7
    1378:	4f 2e       	mov	r4, r31
    137a:	51 2c       	mov	r5, r1
    137c:	f0 2d       	mov	r31, r0
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
					Disp_printState(state);
					preState = state;
					state = stateTypePassword;
    137e:	03 e0       	ldi	r16, 0x03	; 3
    1380:	10 e0       	ldi	r17, 0x00	; 0
						gotUID = false;
					}
					else
					{
						preState = state;
						state = stateCardReadError;
    1382:	0f 2e       	mov	r0, r31
    1384:	fc e0       	ldi	r31, 0x0C	; 12
    1386:	af 2e       	mov	r10, r31
    1388:	b1 2c       	mov	r11, r1
    138a:	f0 2d       	mov	r31, r0
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <main+0x76>
	ADC_init();
	sei();
	UART_Transmit_String("Card test \n");
	while(1)
	{
		if ((state != preState) || (cardPresent && (state == stateIdle)))
    138e:	9c 01       	movw	r18, r24
    1390:	80 91 45 06 	lds	r24, 0x0645
    1394:	90 91 46 06 	lds	r25, 0x0646
    1398:	82 17       	cp	r24, r18
    139a:	93 07       	cpc	r25, r19
    139c:	41 f4       	brne	.+16     	; 0x13ae <main+0x94>
    139e:	20 91 50 06 	lds	r18, 0x0650
    13a2:	22 23       	and	r18, r18
    13a4:	a1 f3       	breq	.-24     	; 0x138e <main+0x74>
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	91 f1       	breq	.+100    	; 0x140e <main+0xf4>
    13aa:	9c 01       	movw	r18, r24
    13ac:	f1 cf       	rjmp	.-30     	; 0x1390 <main+0x76>
		{
			switch(state)
    13ae:	87 30       	cpi	r24, 0x07	; 7
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0x9c>
    13b4:	4b c1       	rjmp	.+662    	; 0x164c <main+0x332>
    13b6:	94 f4       	brge	.+36     	; 0x13dc <main+0xc2>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <main+0xa6>
    13be:	8d c0       	rjmp	.+282    	; 0x14da <main+0x1c0>
    13c0:	34 f4       	brge	.+12     	; 0x13ce <main+0xb4>
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	21 f1       	breq	.+72     	; 0x140e <main+0xf4>
    13c6:	02 97       	sbiw	r24, 0x02	; 2
    13c8:	09 f0       	breq	.+2      	; 0x13cc <main+0xb2>
    13ca:	9b c1       	rjmp	.+822    	; 0x1702 <main+0x3e8>
    13cc:	44 c0       	rjmp	.+136    	; 0x1456 <main+0x13c>
    13ce:	85 30       	cpi	r24, 0x05	; 5
    13d0:	91 05       	cpc	r25, r1
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <main+0xbc>
    13d4:	06 c1       	rjmp	.+524    	; 0x15e2 <main+0x2c8>
    13d6:	0c f0       	brlt	.+2      	; 0x13da <main+0xc0>
    13d8:	19 c1       	rjmp	.+562    	; 0x160c <main+0x2f2>
    13da:	d0 c0       	rjmp	.+416    	; 0x157c <main+0x262>
    13dc:	8a 30       	cpi	r24, 0x0A	; 10
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <main+0xca>
    13e2:	b9 c0       	rjmp	.+370    	; 0x1556 <main+0x23c>
    13e4:	44 f4       	brge	.+16     	; 0x13f6 <main+0xdc>
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <main+0xd4>
    13ec:	46 c1       	rjmp	.+652    	; 0x167a <main+0x360>
    13ee:	09 97       	sbiw	r24, 0x09	; 9
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <main+0xda>
    13f2:	87 c1       	rjmp	.+782    	; 0x1702 <main+0x3e8>
    13f4:	62 c1       	rjmp	.+708    	; 0x16ba <main+0x3a0>
    13f6:	8d 30       	cpi	r24, 0x0D	; 13
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <main+0xe4>
    13fc:	d2 c0       	rjmp	.+420    	; 0x15a2 <main+0x288>
    13fe:	8e 30       	cpi	r24, 0x0E	; 14
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <main+0xec>
    1404:	6f c1       	rjmp	.+734    	; 0x16e4 <main+0x3ca>
    1406:	0c 97       	sbiw	r24, 0x0c	; 12
    1408:	09 f0       	breq	.+2      	; 0x140c <main+0xf2>
    140a:	7b c1       	rjmp	.+758    	; 0x1702 <main+0x3e8>
    140c:	53 c0       	rjmp	.+166    	; 0x14b4 <main+0x19a>
			{
				case stateIdle :
				{
					UART_Transmit_String("stateIdle \n");
    140e:	84 e4       	ldi	r24, 0x44	; 68
    1410:	94 e0       	ldi	r25, 0x04	; 4
    1412:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    1416:	80 91 45 06 	lds	r24, 0x0645
    141a:	90 91 46 06 	lds	r25, 0x0646
    141e:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					if(cardPresent)
    1422:	80 91 50 06 	lds	r24, 0x0650
    1426:	88 23       	and	r24, r24
    1428:	89 f0       	breq	.+34     	; 0x144c <main+0x132>
					{
						UART_Transmit_String("Card Present \n");
    142a:	80 e5       	ldi	r24, 0x50	; 80
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
						GetUID();
    1432:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetUID>
						preState = state;
    1436:	20 91 45 06 	lds	r18, 0x0645
    143a:	30 91 46 06 	lds	r19, 0x0646
						state=stateCardSwiped;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	90 93 46 06 	sts	0x0646, r25
    1446:	80 93 45 06 	sts	0x0645, r24
    144a:	a2 cf       	rjmp	.-188    	; 0x1390 <main+0x76>
					}
					else preState = state;
    144c:	20 91 45 06 	lds	r18, 0x0645
    1450:	30 91 46 06 	lds	r19, 0x0646
    1454:	9d cf       	rjmp	.-198    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateCardSwiped :
				{
					UART_Transmit_String("stateCardSwiped \n");
    1456:	8f e5       	ldi	r24, 0x5F	; 95
    1458:	94 e0       	ldi	r25, 0x04	; 4
    145a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					if (gotUID)
    145e:	80 91 4d 06 	lds	r24, 0x064D
    1462:	88 23       	and	r24, r24
    1464:	f1 f0       	breq	.+60     	; 0x14a2 <main+0x188>
					{
						UART_Transmit_String("got UID \n");
    1466:	81 e7       	ldi	r24, 0x71	; 113
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
						if (CardKnown()) // Find card ID in database
    146e:	0e 94 2f 02 	call	0x45e	; 0x45e <CardKnown>
    1472:	88 23       	and	r24, r24
    1474:	49 f0       	breq	.+18     	; 0x1488 <main+0x16e>
						{
							preState = state;
    1476:	20 91 45 06 	lds	r18, 0x0645
    147a:	30 91 46 06 	lds	r19, 0x0646
							state = stateTypePassword;
    147e:	10 93 46 06 	sts	0x0646, r17
    1482:	00 93 45 06 	sts	0x0645, r16
    1486:	0a c0       	rjmp	.+20     	; 0x149c <main+0x182>
						}
						else
						{
							preState = state;
    1488:	20 91 45 06 	lds	r18, 0x0645
    148c:	30 91 46 06 	lds	r19, 0x0646
							state = stateUnknownCard;
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 93 46 06 	sts	0x0646, r25
    1498:	80 93 45 06 	sts	0x0645, r24
						}
						gotUID = false;
    149c:	10 92 4d 06 	sts	0x064D, r1
    14a0:	77 cf       	rjmp	.-274    	; 0x1390 <main+0x76>
					}
					else
					{
						preState = state;
    14a2:	20 91 45 06 	lds	r18, 0x0645
    14a6:	30 91 46 06 	lds	r19, 0x0646
						state = stateCardReadError;
    14aa:	b0 92 46 06 	sts	0x0646, r11
    14ae:	a0 92 45 06 	sts	0x0645, r10
    14b2:	6e cf       	rjmp	.-292    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateCardReadError:
				{
					UART_Transmit_String("Did not get UID \n");
    14b4:	8b e7       	ldi	r24, 0x7B	; 123
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    14bc:	80 91 45 06 	lds	r24, 0x0645
    14c0:	90 91 46 06 	lds	r25, 0x0646
    14c4:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					preState = state;
    14c8:	20 91 45 06 	lds	r18, 0x0645
    14cc:	30 91 46 06 	lds	r19, 0x0646
					state = stateIdle;
    14d0:	10 92 46 06 	sts	0x0646, r1
    14d4:	10 92 45 06 	sts	0x0645, r1
				}
				break;
    14d8:	5b cf       	rjmp	.-330    	; 0x1390 <main+0x76>
				
				case stateTypePassword:
				{
					UART_Transmit_String("stateTypePassword \n");
    14da:	8d e8       	ldi	r24, 0x8D	; 141
    14dc:	94 e0       	ldi	r25, 0x04	; 4
    14de:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    14e2:	80 91 45 06 	lds	r24, 0x0645
    14e6:	90 91 46 06 	lds	r25, 0x0646
    14ea:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					if (ValidatePassword())// Get typed password and validate in database
    14ee:	0e 94 85 02 	call	0x50a	; 0x50a <ValidatePassword>
    14f2:	88 23       	and	r24, r24
    14f4:	c1 f0       	breq	.+48     	; 0x1526 <main+0x20c>
					{
						if (ADC_Sample() < 5)
    14f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    14fa:	05 97       	sbiw	r24, 0x05	; 5
    14fc:	58 f4       	brcc	.+22     	; 0x1514 <main+0x1fa>
						{
							preState = state;
    14fe:	20 91 45 06 	lds	r18, 0x0645
    1502:	30 91 46 06 	lds	r19, 0x0646
							state = stateConnectCar;
    1506:	8d e0       	ldi	r24, 0x0D	; 13
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	90 93 46 06 	sts	0x0646, r25
    150e:	80 93 45 06 	sts	0x0645, r24
    1512:	3e cf       	rjmp	.-388    	; 0x1390 <main+0x76>
						}
						else
						{
							preState = state;
    1514:	20 91 45 06 	lds	r18, 0x0645
    1518:	30 91 46 06 	lds	r19, 0x0646
							state = stateCharging;
    151c:	90 92 46 06 	sts	0x0646, r9
    1520:	80 92 45 06 	sts	0x0645, r8
    1524:	35 cf       	rjmp	.-406    	; 0x1390 <main+0x76>
						}
					}
					else
					{
						if (cancelPassword)
    1526:	80 91 47 06 	lds	r24, 0x0647
    152a:	88 23       	and	r24, r24
    152c:	59 f0       	breq	.+22     	; 0x1544 <main+0x22a>
						{
							cancelPassword = false;
    152e:	10 92 47 06 	sts	0x0647, r1
							preState = state;
    1532:	20 91 45 06 	lds	r18, 0x0645
    1536:	30 91 46 06 	lds	r19, 0x0646
							state = stateIdle;
    153a:	10 92 46 06 	sts	0x0646, r1
    153e:	10 92 45 06 	sts	0x0645, r1
    1542:	26 cf       	rjmp	.-436    	; 0x1390 <main+0x76>
						} 
						else
						{
							preState = state;
    1544:	20 91 45 06 	lds	r18, 0x0645
    1548:	30 91 46 06 	lds	r19, 0x0646
							state = stateWrongPassword;
    154c:	30 92 46 06 	sts	0x0646, r3
    1550:	20 92 45 06 	sts	0x0645, r2
    1554:	1d cf       	rjmp	.-454    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateUnknownCard:
				{
					UART_Transmit_String("stateUnknownCard \n");
    1556:	81 ea       	ldi	r24, 0xA1	; 161
    1558:	94 e0       	ldi	r25, 0x04	; 4
    155a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    155e:	80 91 45 06 	lds	r24, 0x0645
    1562:	90 91 46 06 	lds	r25, 0x0646
    1566:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					preState = state;
    156a:	20 91 45 06 	lds	r18, 0x0645
    156e:	30 91 46 06 	lds	r19, 0x0646
					state = stateIdle;
    1572:	10 92 46 06 	sts	0x0646, r1
    1576:	10 92 45 06 	sts	0x0645, r1
				}
				break;
    157a:	0a cf       	rjmp	.-492    	; 0x1390 <main+0x76>
				
				case stateWrongPassword:
				{
					UART_Transmit_String("stateWrongPassword \n");
    157c:	84 eb       	ldi	r24, 0xB4	; 180
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    1584:	80 91 45 06 	lds	r24, 0x0645
    1588:	90 91 46 06 	lds	r25, 0x0646
    158c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					preState = state;
    1590:	20 91 45 06 	lds	r18, 0x0645
    1594:	30 91 46 06 	lds	r19, 0x0646
					state = stateTypePassword;
    1598:	10 93 46 06 	sts	0x0646, r17
    159c:	00 93 45 06 	sts	0x0645, r16
				}
				break;
    15a0:	f7 ce       	rjmp	.-530    	; 0x1390 <main+0x76>
				
				case stateConnectCar:
				{
					UART_Transmit_String("stateConnectCar \n");
    15a2:	89 ec       	ldi	r24, 0xC9	; 201
    15a4:	94 e0       	ldi	r25, 0x04	; 4
    15a6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    15aa:	80 91 45 06 	lds	r24, 0x0645
    15ae:	90 91 46 06 	lds	r25, 0x0646
    15b2:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					if (CarConnected())
    15b6:	0e 94 81 03 	call	0x702	; 0x702 <CarConnected>
    15ba:	88 23       	and	r24, r24
    15bc:	49 f0       	breq	.+18     	; 0x15d0 <main+0x2b6>
					{
						preState = state;
    15be:	20 91 45 06 	lds	r18, 0x0645
    15c2:	30 91 46 06 	lds	r19, 0x0646
						state = stateCharging;
    15c6:	90 92 46 06 	sts	0x0646, r9
    15ca:	80 92 45 06 	sts	0x0645, r8
    15ce:	e0 ce       	rjmp	.-576    	; 0x1390 <main+0x76>
					}
					else
					{
						preState = state;
    15d0:	20 91 45 06 	lds	r18, 0x0645
    15d4:	30 91 46 06 	lds	r19, 0x0646
						state = stateIdle;
    15d8:	10 92 46 06 	sts	0x0646, r1
    15dc:	10 92 45 06 	sts	0x0645, r1
    15e0:	d7 ce       	rjmp	.-594    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateCharging:
				{
					UART_Transmit_String("stateCharging \n");
    15e2:	8b ed       	ldi	r24, 0xDB	; 219
    15e4:	94 e0       	ldi	r25, 0x04	; 4
    15e6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    15ea:	80 91 45 06 	lds	r24, 0x0645
    15ee:	90 91 46 06 	lds	r25, 0x0646
    15f2:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					BeginCharging();
    15f6:	0e 94 a0 03 	call	0x740	; 0x740 <BeginCharging>
					preState = state;
    15fa:	20 91 45 06 	lds	r18, 0x0645
    15fe:	30 91 46 06 	lds	r19, 0x0646
					state = stateChargingStopped;
    1602:	f0 92 46 06 	sts	0x0646, r15
    1606:	e0 92 45 06 	sts	0x0645, r14
				}
				break;
    160a:	c2 ce       	rjmp	.-636    	; 0x1390 <main+0x76>
				
				case stateChargingStopped:
				{
					UART_Transmit_String("stateChargingStopped \n");
    160c:	8b ee       	ldi	r24, 0xEB	; 235
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    1614:	80 91 45 06 	lds	r24, 0x0645
    1618:	90 91 46 06 	lds	r25, 0x0646
    161c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					if (ADC_Sample() > 5)
    1620:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1624:	06 97       	sbiw	r24, 0x06	; 6
    1626:	48 f0       	brcs	.+18     	; 0x163a <main+0x320>
					{
						preState = state;
    1628:	20 91 45 06 	lds	r18, 0x0645
    162c:	30 91 46 06 	lds	r19, 0x0646
						state = stateDisconnectCar;
    1630:	50 92 46 06 	sts	0x0646, r5
    1634:	40 92 45 06 	sts	0x0645, r4
    1638:	ab ce       	rjmp	.-682    	; 0x1390 <main+0x76>
					} 
					else
					{
						preState = state;
    163a:	20 91 45 06 	lds	r18, 0x0645
    163e:	30 91 46 06 	lds	r19, 0x0646
						state = stateUploadToDB;
    1642:	d0 93 46 06 	sts	0x0646, r29
    1646:	c0 93 45 06 	sts	0x0645, r28
    164a:	a2 ce       	rjmp	.-700    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateDisconnectCar:
				{
					UART_Transmit_String("stateDisconnectCar \n");
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	95 e0       	ldi	r25, 0x05	; 5
    1650:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    1654:	80 91 45 06 	lds	r24, 0x0645
    1658:	90 91 46 06 	lds	r25, 0x0646
    165c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					while (ADC_Sample() > 5);
    1660:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ADC_Sample>
    1664:	06 97       	sbiw	r24, 0x06	; 6
    1666:	e0 f7       	brcc	.-8      	; 0x1660 <main+0x346>
					preState = state;
    1668:	20 91 45 06 	lds	r18, 0x0645
    166c:	30 91 46 06 	lds	r19, 0x0646
					state = stateUploadToDB;
    1670:	d0 93 46 06 	sts	0x0646, r29
    1674:	c0 93 45 06 	sts	0x0645, r28
				}
				break;
    1678:	8b ce       	rjmp	.-746    	; 0x1390 <main+0x76>
				
				case stateUploadToDB:
				{
					UART_Transmit_String("stateUploadToDB \n");
    167a:	87 e1       	ldi	r24, 0x17	; 23
    167c:	95 e0       	ldi	r25, 0x05	; 5
    167e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    1682:	80 91 45 06 	lds	r24, 0x0645
    1686:	90 91 46 06 	lds	r25, 0x0646
    168a:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					if (UploadFinishedCharge())
    168e:	0e 94 0c 03 	call	0x618	; 0x618 <UploadFinishedCharge>
    1692:	88 23       	and	r24, r24
    1694:	49 f0       	breq	.+18     	; 0x16a8 <main+0x38e>
					{
						preState = state;
    1696:	20 91 45 06 	lds	r18, 0x0645
    169a:	30 91 46 06 	lds	r19, 0x0646
						state = stateIdle;
    169e:	10 92 46 06 	sts	0x0646, r1
    16a2:	10 92 45 06 	sts	0x0645, r1
    16a6:	74 ce       	rjmp	.-792    	; 0x1390 <main+0x76>
					} 
					else
					{
						preState = state;
    16a8:	20 91 45 06 	lds	r18, 0x0645
    16ac:	30 91 46 06 	lds	r19, 0x0646
						state = stateDBoffline;
    16b0:	70 92 46 06 	sts	0x0646, r7
    16b4:	60 92 45 06 	sts	0x0645, r6
    16b8:	6b ce       	rjmp	.-810    	; 0x1390 <main+0x76>
				}
				break;
				
				case stateDBoffline:
				{
					UART_Transmit_String("stateDBoffline \n");
    16ba:	89 e2       	ldi	r24, 0x29	; 41
    16bc:	95 e0       	ldi	r25, 0x05	; 5
    16be:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    16c2:	80 91 45 06 	lds	r24, 0x0645
    16c6:	90 91 46 06 	lds	r25, 0x0646
    16ca:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					TryConnection();
    16ce:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TryConnection>
					preState = state;
    16d2:	20 91 45 06 	lds	r18, 0x0645
    16d6:	30 91 46 06 	lds	r19, 0x0646
					state = stateIdle;
    16da:	10 92 46 06 	sts	0x0646, r1
    16de:	10 92 45 06 	sts	0x0645, r1
				}
				break;
    16e2:	56 ce       	rjmp	.-852    	; 0x1390 <main+0x76>
				
				case stateErrorState:
				{
					UART_Transmit_String("stateErrorState \n");
    16e4:	8a e3       	ldi	r24, 0x3A	; 58
    16e6:	95 e0       	ldi	r25, 0x05	; 5
    16e8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <UART_Transmit_String>
					Disp_printState(state);
    16ec:	80 91 45 06 	lds	r24, 0x0645
    16f0:	90 91 46 06 	lds	r25, 0x0646
    16f4:	0e 94 3c 06 	call	0xc78	; 0xc78 <Disp_printState>
					preState = state;
    16f8:	20 91 45 06 	lds	r18, 0x0645
    16fc:	30 91 46 06 	lds	r19, 0x0646
					//state = stateIdle;
				}
				break;
    1700:	47 ce       	rjmp	.-882    	; 0x1390 <main+0x76>
				
				default : state=stateErrorState; break;
    1702:	d0 92 46 06 	sts	0x0646, r13
    1706:	c0 92 45 06 	sts	0x0645, r12
    170a:	42 ce       	rjmp	.-892    	; 0x1390 <main+0x76>

0000170c <UART_Init>:

void UART_Init()
{
	//SREG = (1<<I); //Enable global interrupts // Same as: sei();
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    170c:	88 e9       	ldi	r24, 0x98	; 152
    170e:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = (1<<U2X0);//Double the USART Transmission Speed
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	80 93 c0 00 	sts	0x00C0, r24
	/* Set baud rate */
	//UBRR0H = (unsigned char)(baud>>8);
	UBRR0L = 0x67; // 19200
    171e:	87 e6       	ldi	r24, 0x67	; 103
    1720:	80 93 c4 00 	sts	0x00C4, r24
    1724:	08 95       	ret

00001726 <UART_Transmit>:
}

void UART_Transmit(char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1726:	e0 ec       	ldi	r30, 0xC0	; 192
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	90 81       	ld	r25, Z
    172c:	95 ff       	sbrs	r25, 5
    172e:	fd cf       	rjmp	.-6      	; 0x172a <UART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1730:	80 93 c6 00 	sts	0x00C6, r24
    1734:	08 95       	ret

00001736 <UART_Transmit_String>:
}

void UART_Transmit_String(char *str)
{
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	ec 01       	movw	r28, r24
	while (*str > 0)              // Continue until the pointer reaches -
    173c:	88 81       	ld	r24, Y
    173e:	88 23       	and	r24, r24
    1740:	31 f0       	breq	.+12     	; 0x174e <UART_Transmit_String+0x18>
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

void UART_Transmit_String(char *str)
    1742:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str > 0)              // Continue until the pointer reaches -
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
    1744:	0e 94 93 0b 	call	0x1726	; 0x1726 <UART_Transmit>
	UDR0 = data;
}

void UART_Transmit_String(char *str)
{
	while (*str > 0)              // Continue until the pointer reaches -
    1748:	89 91       	ld	r24, Y+
    174a:	81 11       	cpse	r24, r1
    174c:	fb cf       	rjmp	.-10     	; 0x1744 <UART_Transmit_String+0xe>
	{                             // the zero termination of the string
		UART_Transmit(*str);      // Send the value of the pointer address
		str++;                    // Increment pointer
	}
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <__subsf3>:
    1754:	50 58       	subi	r21, 0x80	; 128

00001756 <__addsf3>:
    1756:	bb 27       	eor	r27, r27
    1758:	aa 27       	eor	r26, r26
    175a:	0e d0       	rcall	.+28     	; 0x1778 <__addsf3x>
    175c:	ac c1       	rjmp	.+856    	; 0x1ab6 <__fp_round>
    175e:	9d d1       	rcall	.+826    	; 0x1a9a <__fp_pscA>
    1760:	30 f0       	brcs	.+12     	; 0x176e <__addsf3+0x18>
    1762:	a2 d1       	rcall	.+836    	; 0x1aa8 <__fp_pscB>
    1764:	20 f0       	brcs	.+8      	; 0x176e <__addsf3+0x18>
    1766:	31 f4       	brne	.+12     	; 0x1774 <__addsf3+0x1e>
    1768:	9f 3f       	cpi	r25, 0xFF	; 255
    176a:	11 f4       	brne	.+4      	; 0x1770 <__addsf3+0x1a>
    176c:	1e f4       	brtc	.+6      	; 0x1774 <__addsf3+0x1e>
    176e:	92 c1       	rjmp	.+804    	; 0x1a94 <__fp_nan>
    1770:	0e f4       	brtc	.+2      	; 0x1774 <__addsf3+0x1e>
    1772:	e0 95       	com	r30
    1774:	e7 fb       	bst	r30, 7
    1776:	5f c1       	rjmp	.+702    	; 0x1a36 <__fp_inf>

00001778 <__addsf3x>:
    1778:	e9 2f       	mov	r30, r25
    177a:	ae d1       	rcall	.+860    	; 0x1ad8 <__fp_split3>
    177c:	80 f3       	brcs	.-32     	; 0x175e <__addsf3+0x8>
    177e:	ba 17       	cp	r27, r26
    1780:	62 07       	cpc	r22, r18
    1782:	73 07       	cpc	r23, r19
    1784:	84 07       	cpc	r24, r20
    1786:	95 07       	cpc	r25, r21
    1788:	18 f0       	brcs	.+6      	; 0x1790 <__addsf3x+0x18>
    178a:	71 f4       	brne	.+28     	; 0x17a8 <__addsf3x+0x30>
    178c:	9e f5       	brtc	.+102    	; 0x17f4 <__addsf3x+0x7c>
    178e:	dd c1       	rjmp	.+954    	; 0x1b4a <__fp_zero>
    1790:	0e f4       	brtc	.+2      	; 0x1794 <__addsf3x+0x1c>
    1792:	e0 95       	com	r30
    1794:	0b 2e       	mov	r0, r27
    1796:	ba 2f       	mov	r27, r26
    1798:	a0 2d       	mov	r26, r0
    179a:	0b 01       	movw	r0, r22
    179c:	b9 01       	movw	r22, r18
    179e:	90 01       	movw	r18, r0
    17a0:	0c 01       	movw	r0, r24
    17a2:	ca 01       	movw	r24, r20
    17a4:	a0 01       	movw	r20, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	ff 27       	eor	r31, r31
    17aa:	59 1b       	sub	r21, r25
    17ac:	99 f0       	breq	.+38     	; 0x17d4 <__addsf3x+0x5c>
    17ae:	59 3f       	cpi	r21, 0xF9	; 249
    17b0:	50 f4       	brcc	.+20     	; 0x17c6 <__addsf3x+0x4e>
    17b2:	50 3e       	cpi	r21, 0xE0	; 224
    17b4:	68 f1       	brcs	.+90     	; 0x1810 <__addsf3x+0x98>
    17b6:	1a 16       	cp	r1, r26
    17b8:	f0 40       	sbci	r31, 0x00	; 0
    17ba:	a2 2f       	mov	r26, r18
    17bc:	23 2f       	mov	r18, r19
    17be:	34 2f       	mov	r19, r20
    17c0:	44 27       	eor	r20, r20
    17c2:	58 5f       	subi	r21, 0xF8	; 248
    17c4:	f3 cf       	rjmp	.-26     	; 0x17ac <__addsf3x+0x34>
    17c6:	46 95       	lsr	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	a7 95       	ror	r26
    17ce:	f0 40       	sbci	r31, 0x00	; 0
    17d0:	53 95       	inc	r21
    17d2:	c9 f7       	brne	.-14     	; 0x17c6 <__addsf3x+0x4e>
    17d4:	7e f4       	brtc	.+30     	; 0x17f4 <__addsf3x+0x7c>
    17d6:	1f 16       	cp	r1, r31
    17d8:	ba 0b       	sbc	r27, r26
    17da:	62 0b       	sbc	r22, r18
    17dc:	73 0b       	sbc	r23, r19
    17de:	84 0b       	sbc	r24, r20
    17e0:	ba f0       	brmi	.+46     	; 0x1810 <__addsf3x+0x98>
    17e2:	91 50       	subi	r25, 0x01	; 1
    17e4:	a1 f0       	breq	.+40     	; 0x180e <__addsf3x+0x96>
    17e6:	ff 0f       	add	r31, r31
    17e8:	bb 1f       	adc	r27, r27
    17ea:	66 1f       	adc	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	c2 f7       	brpl	.-16     	; 0x17e2 <__addsf3x+0x6a>
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <__addsf3x+0x98>
    17f4:	ba 0f       	add	r27, r26
    17f6:	62 1f       	adc	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	48 f4       	brcc	.+18     	; 0x1810 <__addsf3x+0x98>
    17fe:	87 95       	ror	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f7 95       	ror	r31
    1808:	9e 3f       	cpi	r25, 0xFE	; 254
    180a:	08 f0       	brcs	.+2      	; 0x180e <__addsf3x+0x96>
    180c:	b3 cf       	rjmp	.-154    	; 0x1774 <__addsf3+0x1e>
    180e:	93 95       	inc	r25
    1810:	88 0f       	add	r24, r24
    1812:	08 f0       	brcs	.+2      	; 0x1816 <__addsf3x+0x9e>
    1814:	99 27       	eor	r25, r25
    1816:	ee 0f       	add	r30, r30
    1818:	97 95       	ror	r25
    181a:	87 95       	ror	r24
    181c:	08 95       	ret

0000181e <__cmpsf2>:
    181e:	e7 d0       	rcall	.+462    	; 0x19ee <__fp_cmp>
    1820:	08 f4       	brcc	.+2      	; 0x1824 <__cmpsf2+0x6>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	08 95       	ret

00001826 <__divsf3>:
    1826:	0c d0       	rcall	.+24     	; 0x1840 <__divsf3x>
    1828:	46 c1       	rjmp	.+652    	; 0x1ab6 <__fp_round>
    182a:	3e d1       	rcall	.+636    	; 0x1aa8 <__fp_pscB>
    182c:	40 f0       	brcs	.+16     	; 0x183e <__divsf3+0x18>
    182e:	35 d1       	rcall	.+618    	; 0x1a9a <__fp_pscA>
    1830:	30 f0       	brcs	.+12     	; 0x183e <__divsf3+0x18>
    1832:	21 f4       	brne	.+8      	; 0x183c <__divsf3+0x16>
    1834:	5f 3f       	cpi	r21, 0xFF	; 255
    1836:	19 f0       	breq	.+6      	; 0x183e <__divsf3+0x18>
    1838:	fe c0       	rjmp	.+508    	; 0x1a36 <__fp_inf>
    183a:	51 11       	cpse	r21, r1
    183c:	87 c1       	rjmp	.+782    	; 0x1b4c <__fp_szero>
    183e:	2a c1       	rjmp	.+596    	; 0x1a94 <__fp_nan>

00001840 <__divsf3x>:
    1840:	4b d1       	rcall	.+662    	; 0x1ad8 <__fp_split3>
    1842:	98 f3       	brcs	.-26     	; 0x182a <__divsf3+0x4>

00001844 <__divsf3_pse>:
    1844:	99 23       	and	r25, r25
    1846:	c9 f3       	breq	.-14     	; 0x183a <__divsf3+0x14>
    1848:	55 23       	and	r21, r21
    184a:	b1 f3       	breq	.-20     	; 0x1838 <__divsf3+0x12>
    184c:	95 1b       	sub	r25, r21
    184e:	55 0b       	sbc	r21, r21
    1850:	bb 27       	eor	r27, r27
    1852:	aa 27       	eor	r26, r26
    1854:	62 17       	cp	r22, r18
    1856:	73 07       	cpc	r23, r19
    1858:	84 07       	cpc	r24, r20
    185a:	38 f0       	brcs	.+14     	; 0x186a <__divsf3_pse+0x26>
    185c:	9f 5f       	subi	r25, 0xFF	; 255
    185e:	5f 4f       	sbci	r21, 0xFF	; 255
    1860:	22 0f       	add	r18, r18
    1862:	33 1f       	adc	r19, r19
    1864:	44 1f       	adc	r20, r20
    1866:	aa 1f       	adc	r26, r26
    1868:	a9 f3       	breq	.-22     	; 0x1854 <__divsf3_pse+0x10>
    186a:	33 d0       	rcall	.+102    	; 0x18d2 <__divsf3_pse+0x8e>
    186c:	0e 2e       	mov	r0, r30
    186e:	3a f0       	brmi	.+14     	; 0x187e <__divsf3_pse+0x3a>
    1870:	e0 e8       	ldi	r30, 0x80	; 128
    1872:	30 d0       	rcall	.+96     	; 0x18d4 <__divsf3_pse+0x90>
    1874:	91 50       	subi	r25, 0x01	; 1
    1876:	50 40       	sbci	r21, 0x00	; 0
    1878:	e6 95       	lsr	r30
    187a:	00 1c       	adc	r0, r0
    187c:	ca f7       	brpl	.-14     	; 0x1870 <__divsf3_pse+0x2c>
    187e:	29 d0       	rcall	.+82     	; 0x18d2 <__divsf3_pse+0x8e>
    1880:	fe 2f       	mov	r31, r30
    1882:	27 d0       	rcall	.+78     	; 0x18d2 <__divsf3_pse+0x8e>
    1884:	66 0f       	add	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	bb 1f       	adc	r27, r27
    188c:	26 17       	cp	r18, r22
    188e:	37 07       	cpc	r19, r23
    1890:	48 07       	cpc	r20, r24
    1892:	ab 07       	cpc	r26, r27
    1894:	b0 e8       	ldi	r27, 0x80	; 128
    1896:	09 f0       	breq	.+2      	; 0x189a <__divsf3_pse+0x56>
    1898:	bb 0b       	sbc	r27, r27
    189a:	80 2d       	mov	r24, r0
    189c:	bf 01       	movw	r22, r30
    189e:	ff 27       	eor	r31, r31
    18a0:	93 58       	subi	r25, 0x83	; 131
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	2a f0       	brmi	.+10     	; 0x18b0 <__divsf3_pse+0x6c>
    18a6:	9e 3f       	cpi	r25, 0xFE	; 254
    18a8:	51 05       	cpc	r21, r1
    18aa:	68 f0       	brcs	.+26     	; 0x18c6 <__divsf3_pse+0x82>
    18ac:	c4 c0       	rjmp	.+392    	; 0x1a36 <__fp_inf>
    18ae:	4e c1       	rjmp	.+668    	; 0x1b4c <__fp_szero>
    18b0:	5f 3f       	cpi	r21, 0xFF	; 255
    18b2:	ec f3       	brlt	.-6      	; 0x18ae <__divsf3_pse+0x6a>
    18b4:	98 3e       	cpi	r25, 0xE8	; 232
    18b6:	dc f3       	brlt	.-10     	; 0x18ae <__divsf3_pse+0x6a>
    18b8:	86 95       	lsr	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	b7 95       	ror	r27
    18c0:	f7 95       	ror	r31
    18c2:	9f 5f       	subi	r25, 0xFF	; 255
    18c4:	c9 f7       	brne	.-14     	; 0x18b8 <__divsf3_pse+0x74>
    18c6:	88 0f       	add	r24, r24
    18c8:	91 1d       	adc	r25, r1
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret
    18d2:	e1 e0       	ldi	r30, 0x01	; 1
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	bb 1f       	adc	r27, r27
    18dc:	62 17       	cp	r22, r18
    18de:	73 07       	cpc	r23, r19
    18e0:	84 07       	cpc	r24, r20
    18e2:	ba 07       	cpc	r27, r26
    18e4:	20 f0       	brcs	.+8      	; 0x18ee <__divsf3_pse+0xaa>
    18e6:	62 1b       	sub	r22, r18
    18e8:	73 0b       	sbc	r23, r19
    18ea:	84 0b       	sbc	r24, r20
    18ec:	ba 0b       	sbc	r27, r26
    18ee:	ee 1f       	adc	r30, r30
    18f0:	88 f7       	brcc	.-30     	; 0x18d4 <__divsf3_pse+0x90>
    18f2:	e0 95       	com	r30
    18f4:	08 95       	ret

000018f6 <__fixunssfsi>:
    18f6:	f8 d0       	rcall	.+496    	; 0x1ae8 <__fp_splitA>
    18f8:	88 f0       	brcs	.+34     	; 0x191c <__fixunssfsi+0x26>
    18fa:	9f 57       	subi	r25, 0x7F	; 127
    18fc:	90 f0       	brcs	.+36     	; 0x1922 <__fixunssfsi+0x2c>
    18fe:	b9 2f       	mov	r27, r25
    1900:	99 27       	eor	r25, r25
    1902:	b7 51       	subi	r27, 0x17	; 23
    1904:	a0 f0       	brcs	.+40     	; 0x192e <__fixunssfsi+0x38>
    1906:	d1 f0       	breq	.+52     	; 0x193c <__fixunssfsi+0x46>
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	1a f0       	brmi	.+6      	; 0x1918 <__fixunssfsi+0x22>
    1912:	ba 95       	dec	r27
    1914:	c9 f7       	brne	.-14     	; 0x1908 <__fixunssfsi+0x12>
    1916:	12 c0       	rjmp	.+36     	; 0x193c <__fixunssfsi+0x46>
    1918:	b1 30       	cpi	r27, 0x01	; 1
    191a:	81 f0       	breq	.+32     	; 0x193c <__fixunssfsi+0x46>
    191c:	16 d1       	rcall	.+556    	; 0x1b4a <__fp_zero>
    191e:	b1 e0       	ldi	r27, 0x01	; 1
    1920:	08 95       	ret
    1922:	13 c1       	rjmp	.+550    	; 0x1b4a <__fp_zero>
    1924:	67 2f       	mov	r22, r23
    1926:	78 2f       	mov	r23, r24
    1928:	88 27       	eor	r24, r24
    192a:	b8 5f       	subi	r27, 0xF8	; 248
    192c:	39 f0       	breq	.+14     	; 0x193c <__fixunssfsi+0x46>
    192e:	b9 3f       	cpi	r27, 0xF9	; 249
    1930:	cc f3       	brlt	.-14     	; 0x1924 <__fixunssfsi+0x2e>
    1932:	86 95       	lsr	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b3 95       	inc	r27
    193a:	d9 f7       	brne	.-10     	; 0x1932 <__fixunssfsi+0x3c>
    193c:	3e f4       	brtc	.+14     	; 0x194c <__fixunssfsi+0x56>
    193e:	90 95       	com	r25
    1940:	80 95       	com	r24
    1942:	70 95       	com	r23
    1944:	61 95       	neg	r22
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	08 95       	ret

0000194e <__floatunsisf>:
    194e:	e8 94       	clt
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <__floatsisf+0x12>

00001952 <__floatsisf>:
    1952:	97 fb       	bst	r25, 7
    1954:	3e f4       	brtc	.+14     	; 0x1964 <__floatsisf+0x12>
    1956:	90 95       	com	r25
    1958:	80 95       	com	r24
    195a:	70 95       	com	r23
    195c:	61 95       	neg	r22
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	99 23       	and	r25, r25
    1966:	a9 f0       	breq	.+42     	; 0x1992 <__floatsisf+0x40>
    1968:	f9 2f       	mov	r31, r25
    196a:	96 e9       	ldi	r25, 0x96	; 150
    196c:	bb 27       	eor	r27, r27
    196e:	93 95       	inc	r25
    1970:	f6 95       	lsr	r31
    1972:	87 95       	ror	r24
    1974:	77 95       	ror	r23
    1976:	67 95       	ror	r22
    1978:	b7 95       	ror	r27
    197a:	f1 11       	cpse	r31, r1
    197c:	f8 cf       	rjmp	.-16     	; 0x196e <__floatsisf+0x1c>
    197e:	fa f4       	brpl	.+62     	; 0x19be <__floatsisf+0x6c>
    1980:	bb 0f       	add	r27, r27
    1982:	11 f4       	brne	.+4      	; 0x1988 <__floatsisf+0x36>
    1984:	60 ff       	sbrs	r22, 0
    1986:	1b c0       	rjmp	.+54     	; 0x19be <__floatsisf+0x6c>
    1988:	6f 5f       	subi	r22, 0xFF	; 255
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	8f 4f       	sbci	r24, 0xFF	; 255
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	16 c0       	rjmp	.+44     	; 0x19be <__floatsisf+0x6c>
    1992:	88 23       	and	r24, r24
    1994:	11 f0       	breq	.+4      	; 0x199a <__floatsisf+0x48>
    1996:	96 e9       	ldi	r25, 0x96	; 150
    1998:	11 c0       	rjmp	.+34     	; 0x19bc <__floatsisf+0x6a>
    199a:	77 23       	and	r23, r23
    199c:	21 f0       	breq	.+8      	; 0x19a6 <__floatsisf+0x54>
    199e:	9e e8       	ldi	r25, 0x8E	; 142
    19a0:	87 2f       	mov	r24, r23
    19a2:	76 2f       	mov	r23, r22
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <__floatsisf+0x5e>
    19a6:	66 23       	and	r22, r22
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <__floatsisf+0x74>
    19aa:	96 e8       	ldi	r25, 0x86	; 134
    19ac:	86 2f       	mov	r24, r22
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	2a f0       	brmi	.+10     	; 0x19be <__floatsisf+0x6c>
    19b4:	9a 95       	dec	r25
    19b6:	66 0f       	add	r22, r22
    19b8:	77 1f       	adc	r23, r23
    19ba:	88 1f       	adc	r24, r24
    19bc:	da f7       	brpl	.-10     	; 0x19b4 <__floatsisf+0x62>
    19be:	88 0f       	add	r24, r24
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	97 f9       	bld	r25, 7
    19c6:	08 95       	ret

000019c8 <floor>:
    19c8:	a9 d0       	rcall	.+338    	; 0x1b1c <__fp_trunc>
    19ca:	80 f0       	brcs	.+32     	; 0x19ec <floor+0x24>
    19cc:	9f 37       	cpi	r25, 0x7F	; 127
    19ce:	40 f4       	brcc	.+16     	; 0x19e0 <floor+0x18>
    19d0:	91 11       	cpse	r25, r1
    19d2:	0e f0       	brts	.+2      	; 0x19d6 <floor+0xe>
    19d4:	bb c0       	rjmp	.+374    	; 0x1b4c <__fp_szero>
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	80 e8       	ldi	r24, 0x80	; 128
    19dc:	9f eb       	ldi	r25, 0xBF	; 191
    19de:	08 95       	ret
    19e0:	26 f4       	brtc	.+8      	; 0x19ea <floor+0x22>
    19e2:	1b 16       	cp	r1, r27
    19e4:	61 1d       	adc	r22, r1
    19e6:	71 1d       	adc	r23, r1
    19e8:	81 1d       	adc	r24, r1
    19ea:	2b c0       	rjmp	.+86     	; 0x1a42 <__fp_mintl>
    19ec:	45 c0       	rjmp	.+138    	; 0x1a78 <__fp_mpack>

000019ee <__fp_cmp>:
    19ee:	99 0f       	add	r25, r25
    19f0:	00 08       	sbc	r0, r0
    19f2:	55 0f       	add	r21, r21
    19f4:	aa 0b       	sbc	r26, r26
    19f6:	e0 e8       	ldi	r30, 0x80	; 128
    19f8:	fe ef       	ldi	r31, 0xFE	; 254
    19fa:	16 16       	cp	r1, r22
    19fc:	17 06       	cpc	r1, r23
    19fe:	e8 07       	cpc	r30, r24
    1a00:	f9 07       	cpc	r31, r25
    1a02:	c0 f0       	brcs	.+48     	; 0x1a34 <__fp_cmp+0x46>
    1a04:	12 16       	cp	r1, r18
    1a06:	13 06       	cpc	r1, r19
    1a08:	e4 07       	cpc	r30, r20
    1a0a:	f5 07       	cpc	r31, r21
    1a0c:	98 f0       	brcs	.+38     	; 0x1a34 <__fp_cmp+0x46>
    1a0e:	62 1b       	sub	r22, r18
    1a10:	73 0b       	sbc	r23, r19
    1a12:	84 0b       	sbc	r24, r20
    1a14:	95 0b       	sbc	r25, r21
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <__fp_cmp+0x38>
    1a18:	0a 26       	eor	r0, r26
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <__fp_cmp+0x46>
    1a1c:	23 2b       	or	r18, r19
    1a1e:	24 2b       	or	r18, r20
    1a20:	25 2b       	or	r18, r21
    1a22:	21 f4       	brne	.+8      	; 0x1a2c <__fp_cmp+0x3e>
    1a24:	08 95       	ret
    1a26:	0a 26       	eor	r0, r26
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__fp_cmp+0x3e>
    1a2a:	a1 40       	sbci	r26, 0x01	; 1
    1a2c:	a6 95       	lsr	r26
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
    1a30:	81 1d       	adc	r24, r1
    1a32:	81 1d       	adc	r24, r1
    1a34:	08 95       	ret

00001a36 <__fp_inf>:
    1a36:	97 f9       	bld	r25, 7
    1a38:	9f 67       	ori	r25, 0x7F	; 127
    1a3a:	80 e8       	ldi	r24, 0x80	; 128
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	08 95       	ret

00001a42 <__fp_mintl>:
    1a42:	88 23       	and	r24, r24
    1a44:	71 f4       	brne	.+28     	; 0x1a62 <__fp_mintl+0x20>
    1a46:	77 23       	and	r23, r23
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <__fp_mintl+0x10>
    1a4a:	98 50       	subi	r25, 0x08	; 8
    1a4c:	87 2b       	or	r24, r23
    1a4e:	76 2f       	mov	r23, r22
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <__fp_mintl+0x1e>
    1a52:	66 23       	and	r22, r22
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__fp_mintl+0x18>
    1a56:	99 27       	eor	r25, r25
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <__fp_mintl+0x32>
    1a5a:	90 51       	subi	r25, 0x10	; 16
    1a5c:	86 2b       	or	r24, r22
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	2a f0       	brmi	.+10     	; 0x1a6e <__fp_mintl+0x2c>
    1a64:	9a 95       	dec	r25
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	da f7       	brpl	.-10     	; 0x1a64 <__fp_mintl+0x22>
    1a6e:	88 0f       	add	r24, r24
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <__fp_mpack>:
    1a78:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <__fp_mpack_finite+0xc>

00001a7c <__fp_mpack_finite>:
    1a7c:	91 50       	subi	r25, 0x01	; 1
    1a7e:	20 f4       	brcc	.+8      	; 0x1a88 <__fp_mpack_finite+0xc>
    1a80:	87 95       	ror	r24
    1a82:	77 95       	ror	r23
    1a84:	67 95       	ror	r22
    1a86:	b7 95       	ror	r27
    1a88:	88 0f       	add	r24, r24
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	97 f9       	bld	r25, 7
    1a92:	08 95       	ret

00001a94 <__fp_nan>:
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	80 ec       	ldi	r24, 0xC0	; 192
    1a98:	08 95       	ret

00001a9a <__fp_pscA>:
    1a9a:	00 24       	eor	r0, r0
    1a9c:	0a 94       	dec	r0
    1a9e:	16 16       	cp	r1, r22
    1aa0:	17 06       	cpc	r1, r23
    1aa2:	18 06       	cpc	r1, r24
    1aa4:	09 06       	cpc	r0, r25
    1aa6:	08 95       	ret

00001aa8 <__fp_pscB>:
    1aa8:	00 24       	eor	r0, r0
    1aaa:	0a 94       	dec	r0
    1aac:	12 16       	cp	r1, r18
    1aae:	13 06       	cpc	r1, r19
    1ab0:	14 06       	cpc	r1, r20
    1ab2:	05 06       	cpc	r0, r21
    1ab4:	08 95       	ret

00001ab6 <__fp_round>:
    1ab6:	09 2e       	mov	r0, r25
    1ab8:	03 94       	inc	r0
    1aba:	00 0c       	add	r0, r0
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <__fp_round+0xc>
    1abe:	88 23       	and	r24, r24
    1ac0:	52 f0       	brmi	.+20     	; 0x1ad6 <__fp_round+0x20>
    1ac2:	bb 0f       	add	r27, r27
    1ac4:	40 f4       	brcc	.+16     	; 0x1ad6 <__fp_round+0x20>
    1ac6:	bf 2b       	or	r27, r31
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <__fp_round+0x18>
    1aca:	60 ff       	sbrs	r22, 0
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <__fp_round+0x20>
    1ace:	6f 5f       	subi	r22, 0xFF	; 255
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	08 95       	ret

00001ad8 <__fp_split3>:
    1ad8:	57 fd       	sbrc	r21, 7
    1ada:	90 58       	subi	r25, 0x80	; 128
    1adc:	44 0f       	add	r20, r20
    1ade:	55 1f       	adc	r21, r21
    1ae0:	59 f0       	breq	.+22     	; 0x1af8 <__fp_splitA+0x10>
    1ae2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae4:	71 f0       	breq	.+28     	; 0x1b02 <__fp_splitA+0x1a>
    1ae6:	47 95       	ror	r20

00001ae8 <__fp_splitA>:
    1ae8:	88 0f       	add	r24, r24
    1aea:	97 fb       	bst	r25, 7
    1aec:	99 1f       	adc	r25, r25
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <__fp_splitA+0x20>
    1af0:	9f 3f       	cpi	r25, 0xFF	; 255
    1af2:	79 f0       	breq	.+30     	; 0x1b12 <__fp_splitA+0x2a>
    1af4:	87 95       	ror	r24
    1af6:	08 95       	ret
    1af8:	12 16       	cp	r1, r18
    1afa:	13 06       	cpc	r1, r19
    1afc:	14 06       	cpc	r1, r20
    1afe:	55 1f       	adc	r21, r21
    1b00:	f2 cf       	rjmp	.-28     	; 0x1ae6 <__fp_split3+0xe>
    1b02:	46 95       	lsr	r20
    1b04:	f1 df       	rcall	.-30     	; 0x1ae8 <__fp_splitA>
    1b06:	08 c0       	rjmp	.+16     	; 0x1b18 <__fp_splitA+0x30>
    1b08:	16 16       	cp	r1, r22
    1b0a:	17 06       	cpc	r1, r23
    1b0c:	18 06       	cpc	r1, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	f1 cf       	rjmp	.-30     	; 0x1af4 <__fp_splitA+0xc>
    1b12:	86 95       	lsr	r24
    1b14:	71 05       	cpc	r23, r1
    1b16:	61 05       	cpc	r22, r1
    1b18:	08 94       	sec
    1b1a:	08 95       	ret

00001b1c <__fp_trunc>:
    1b1c:	e5 df       	rcall	.-54     	; 0x1ae8 <__fp_splitA>
    1b1e:	a0 f0       	brcs	.+40     	; 0x1b48 <__fp_trunc+0x2c>
    1b20:	be e7       	ldi	r27, 0x7E	; 126
    1b22:	b9 17       	cp	r27, r25
    1b24:	88 f4       	brcc	.+34     	; 0x1b48 <__fp_trunc+0x2c>
    1b26:	bb 27       	eor	r27, r27
    1b28:	9f 38       	cpi	r25, 0x8F	; 143
    1b2a:	60 f4       	brcc	.+24     	; 0x1b44 <__fp_trunc+0x28>
    1b2c:	16 16       	cp	r1, r22
    1b2e:	b1 1d       	adc	r27, r1
    1b30:	67 2f       	mov	r22, r23
    1b32:	78 2f       	mov	r23, r24
    1b34:	88 27       	eor	r24, r24
    1b36:	98 5f       	subi	r25, 0xF8	; 248
    1b38:	f7 cf       	rjmp	.-18     	; 0x1b28 <__fp_trunc+0xc>
    1b3a:	86 95       	lsr	r24
    1b3c:	77 95       	ror	r23
    1b3e:	67 95       	ror	r22
    1b40:	b1 1d       	adc	r27, r1
    1b42:	93 95       	inc	r25
    1b44:	96 39       	cpi	r25, 0x96	; 150
    1b46:	c8 f3       	brcs	.-14     	; 0x1b3a <__fp_trunc+0x1e>
    1b48:	08 95       	ret

00001b4a <__fp_zero>:
    1b4a:	e8 94       	clt

00001b4c <__fp_szero>:
    1b4c:	bb 27       	eor	r27, r27
    1b4e:	66 27       	eor	r22, r22
    1b50:	77 27       	eor	r23, r23
    1b52:	cb 01       	movw	r24, r22
    1b54:	97 f9       	bld	r25, 7
    1b56:	08 95       	ret

00001b58 <__mulsf3>:
    1b58:	0b d0       	rcall	.+22     	; 0x1b70 <__mulsf3x>
    1b5a:	ad cf       	rjmp	.-166    	; 0x1ab6 <__fp_round>
    1b5c:	9e df       	rcall	.-196    	; 0x1a9a <__fp_pscA>
    1b5e:	28 f0       	brcs	.+10     	; 0x1b6a <__mulsf3+0x12>
    1b60:	a3 df       	rcall	.-186    	; 0x1aa8 <__fp_pscB>
    1b62:	18 f0       	brcs	.+6      	; 0x1b6a <__mulsf3+0x12>
    1b64:	95 23       	and	r25, r21
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <__mulsf3+0x12>
    1b68:	66 cf       	rjmp	.-308    	; 0x1a36 <__fp_inf>
    1b6a:	94 cf       	rjmp	.-216    	; 0x1a94 <__fp_nan>
    1b6c:	11 24       	eor	r1, r1
    1b6e:	ee cf       	rjmp	.-36     	; 0x1b4c <__fp_szero>

00001b70 <__mulsf3x>:
    1b70:	b3 df       	rcall	.-154    	; 0x1ad8 <__fp_split3>
    1b72:	a0 f3       	brcs	.-24     	; 0x1b5c <__mulsf3+0x4>

00001b74 <__mulsf3_pse>:
    1b74:	95 9f       	mul	r25, r21
    1b76:	d1 f3       	breq	.-12     	; 0x1b6c <__mulsf3+0x14>
    1b78:	95 0f       	add	r25, r21
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	55 1f       	adc	r21, r21
    1b7e:	62 9f       	mul	r22, r18
    1b80:	f0 01       	movw	r30, r0
    1b82:	72 9f       	mul	r23, r18
    1b84:	bb 27       	eor	r27, r27
    1b86:	f0 0d       	add	r31, r0
    1b88:	b1 1d       	adc	r27, r1
    1b8a:	63 9f       	mul	r22, r19
    1b8c:	aa 27       	eor	r26, r26
    1b8e:	f0 0d       	add	r31, r0
    1b90:	b1 1d       	adc	r27, r1
    1b92:	aa 1f       	adc	r26, r26
    1b94:	64 9f       	mul	r22, r20
    1b96:	66 27       	eor	r22, r22
    1b98:	b0 0d       	add	r27, r0
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	66 1f       	adc	r22, r22
    1b9e:	82 9f       	mul	r24, r18
    1ba0:	22 27       	eor	r18, r18
    1ba2:	b0 0d       	add	r27, r0
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	62 1f       	adc	r22, r18
    1ba8:	73 9f       	mul	r23, r19
    1baa:	b0 0d       	add	r27, r0
    1bac:	a1 1d       	adc	r26, r1
    1bae:	62 1f       	adc	r22, r18
    1bb0:	83 9f       	mul	r24, r19
    1bb2:	a0 0d       	add	r26, r0
    1bb4:	61 1d       	adc	r22, r1
    1bb6:	22 1f       	adc	r18, r18
    1bb8:	74 9f       	mul	r23, r20
    1bba:	33 27       	eor	r19, r19
    1bbc:	a0 0d       	add	r26, r0
    1bbe:	61 1d       	adc	r22, r1
    1bc0:	23 1f       	adc	r18, r19
    1bc2:	84 9f       	mul	r24, r20
    1bc4:	60 0d       	add	r22, r0
    1bc6:	21 1d       	adc	r18, r1
    1bc8:	82 2f       	mov	r24, r18
    1bca:	76 2f       	mov	r23, r22
    1bcc:	6a 2f       	mov	r22, r26
    1bce:	11 24       	eor	r1, r1
    1bd0:	9f 57       	subi	r25, 0x7F	; 127
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	8a f0       	brmi	.+34     	; 0x1bf8 <__mulsf3_pse+0x84>
    1bd6:	e1 f0       	breq	.+56     	; 0x1c10 <__mulsf3_pse+0x9c>
    1bd8:	88 23       	and	r24, r24
    1bda:	4a f0       	brmi	.+18     	; 0x1bee <__mulsf3_pse+0x7a>
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	bb 1f       	adc	r27, r27
    1be2:	66 1f       	adc	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	50 40       	sbci	r21, 0x00	; 0
    1bec:	a9 f7       	brne	.-22     	; 0x1bd8 <__mulsf3_pse+0x64>
    1bee:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	70 f0       	brcs	.+28     	; 0x1c10 <__mulsf3_pse+0x9c>
    1bf4:	20 cf       	rjmp	.-448    	; 0x1a36 <__fp_inf>
    1bf6:	aa cf       	rjmp	.-172    	; 0x1b4c <__fp_szero>
    1bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfa:	ec f3       	brlt	.-6      	; 0x1bf6 <__mulsf3_pse+0x82>
    1bfc:	98 3e       	cpi	r25, 0xE8	; 232
    1bfe:	dc f3       	brlt	.-10     	; 0x1bf6 <__mulsf3_pse+0x82>
    1c00:	86 95       	lsr	r24
    1c02:	77 95       	ror	r23
    1c04:	67 95       	ror	r22
    1c06:	b7 95       	ror	r27
    1c08:	f7 95       	ror	r31
    1c0a:	e7 95       	ror	r30
    1c0c:	9f 5f       	subi	r25, 0xFF	; 255
    1c0e:	c1 f7       	brne	.-16     	; 0x1c00 <__mulsf3_pse+0x8c>
    1c10:	fe 2b       	or	r31, r30
    1c12:	88 0f       	add	r24, r24
    1c14:	91 1d       	adc	r25, r1
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	97 f9       	bld	r25, 7
    1c1c:	08 95       	ret

00001c1e <vfprintf>:
    1c1e:	a2 e1       	ldi	r26, 0x12	; 18
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e5 e1       	ldi	r30, 0x15	; 21
    1c24:	fe e0       	ldi	r31, 0x0E	; 14
    1c26:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__>
    1c2a:	7c 01       	movw	r14, r24
    1c2c:	1b 01       	movw	r2, r22
    1c2e:	6a 01       	movw	r12, r20
    1c30:	fc 01       	movw	r30, r24
    1c32:	17 82       	std	Z+7, r1	; 0x07
    1c34:	16 82       	std	Z+6, r1	; 0x06
    1c36:	83 81       	ldd	r24, Z+3	; 0x03
    1c38:	81 fd       	sbrc	r24, 1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <vfprintf+0x24>
    1c3c:	6b c3       	rjmp	.+1750   	; 0x2314 <vfprintf+0x6f6>
    1c3e:	65 01       	movw	r12, r10
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <vfprintf+0x2e>
    1c42:	88 24       	eor	r8, r8
    1c44:	83 94       	inc	r8
    1c46:	91 2c       	mov	r9, r1
    1c48:	8c 0e       	add	r8, r28
    1c4a:	9d 1e       	adc	r9, r29
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	f1 01       	movw	r30, r2
    1c52:	93 fd       	sbrc	r25, 3
    1c54:	85 91       	lpm	r24, Z+
    1c56:	93 ff       	sbrs	r25, 3
    1c58:	81 91       	ld	r24, Z+
    1c5a:	1f 01       	movw	r2, r30
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <vfprintf+0x44>
    1c60:	55 c3       	rjmp	.+1706   	; 0x230c <vfprintf+0x6ee>
    1c62:	85 32       	cpi	r24, 0x25	; 37
    1c64:	39 f4       	brne	.+14     	; 0x1c74 <vfprintf+0x56>
    1c66:	93 fd       	sbrc	r25, 3
    1c68:	85 91       	lpm	r24, Z+
    1c6a:	93 ff       	sbrs	r25, 3
    1c6c:	81 91       	ld	r24, Z+
    1c6e:	1f 01       	movw	r2, r30
    1c70:	85 32       	cpi	r24, 0x25	; 37
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <vfprintf+0x62>
    1c74:	b7 01       	movw	r22, r14
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1c7c:	56 01       	movw	r10, r12
    1c7e:	df cf       	rjmp	.-66     	; 0x1c3e <vfprintf+0x20>
    1c80:	71 2c       	mov	r7, r1
    1c82:	61 2c       	mov	r6, r1
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	20 32       	cpi	r18, 0x20	; 32
    1c88:	a8 f4       	brcc	.+42     	; 0x1cb4 <vfprintf+0x96>
    1c8a:	8b 32       	cpi	r24, 0x2B	; 43
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <vfprintf+0x88>
    1c8e:	28 f4       	brcc	.+10     	; 0x1c9a <vfprintf+0x7c>
    1c90:	80 32       	cpi	r24, 0x20	; 32
    1c92:	51 f0       	breq	.+20     	; 0x1ca8 <vfprintf+0x8a>
    1c94:	83 32       	cpi	r24, 0x23	; 35
    1c96:	71 f4       	brne	.+28     	; 0x1cb4 <vfprintf+0x96>
    1c98:	0b c0       	rjmp	.+22     	; 0x1cb0 <vfprintf+0x92>
    1c9a:	8d 32       	cpi	r24, 0x2D	; 45
    1c9c:	39 f0       	breq	.+14     	; 0x1cac <vfprintf+0x8e>
    1c9e:	80 33       	cpi	r24, 0x30	; 48
    1ca0:	49 f4       	brne	.+18     	; 0x1cb4 <vfprintf+0x96>
    1ca2:	21 60       	ori	r18, 0x01	; 1
    1ca4:	28 c0       	rjmp	.+80     	; 0x1cf6 <vfprintf+0xd8>
    1ca6:	22 60       	ori	r18, 0x02	; 2
    1ca8:	24 60       	ori	r18, 0x04	; 4
    1caa:	25 c0       	rjmp	.+74     	; 0x1cf6 <vfprintf+0xd8>
    1cac:	28 60       	ori	r18, 0x08	; 8
    1cae:	23 c0       	rjmp	.+70     	; 0x1cf6 <vfprintf+0xd8>
    1cb0:	20 61       	ori	r18, 0x10	; 16
    1cb2:	21 c0       	rjmp	.+66     	; 0x1cf6 <vfprintf+0xd8>
    1cb4:	27 fd       	sbrc	r18, 7
    1cb6:	27 c0       	rjmp	.+78     	; 0x1d06 <vfprintf+0xe8>
    1cb8:	38 2f       	mov	r19, r24
    1cba:	30 53       	subi	r19, 0x30	; 48
    1cbc:	3a 30       	cpi	r19, 0x0A	; 10
    1cbe:	78 f4       	brcc	.+30     	; 0x1cde <vfprintf+0xc0>
    1cc0:	26 ff       	sbrs	r18, 6
    1cc2:	06 c0       	rjmp	.+12     	; 0x1cd0 <vfprintf+0xb2>
    1cc4:	fa e0       	ldi	r31, 0x0A	; 10
    1cc6:	7f 9e       	mul	r7, r31
    1cc8:	30 0d       	add	r19, r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	73 2e       	mov	r7, r19
    1cce:	13 c0       	rjmp	.+38     	; 0x1cf6 <vfprintf+0xd8>
    1cd0:	4a e0       	ldi	r20, 0x0A	; 10
    1cd2:	64 9e       	mul	r6, r20
    1cd4:	30 0d       	add	r19, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	63 2e       	mov	r6, r19
    1cda:	20 62       	ori	r18, 0x20	; 32
    1cdc:	0c c0       	rjmp	.+24     	; 0x1cf6 <vfprintf+0xd8>
    1cde:	8e 32       	cpi	r24, 0x2E	; 46
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <vfprintf+0xcc>
    1ce2:	26 fd       	sbrc	r18, 6
    1ce4:	13 c3       	rjmp	.+1574   	; 0x230c <vfprintf+0x6ee>
    1ce6:	20 64       	ori	r18, 0x40	; 64
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <vfprintf+0xd8>
    1cea:	8c 36       	cpi	r24, 0x6C	; 108
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <vfprintf+0xd4>
    1cee:	20 68       	ori	r18, 0x80	; 128
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0xd8>
    1cf2:	88 36       	cpi	r24, 0x68	; 104
    1cf4:	41 f4       	brne	.+16     	; 0x1d06 <vfprintf+0xe8>
    1cf6:	f1 01       	movw	r30, r2
    1cf8:	93 fd       	sbrc	r25, 3
    1cfa:	85 91       	lpm	r24, Z+
    1cfc:	93 ff       	sbrs	r25, 3
    1cfe:	81 91       	ld	r24, Z+
    1d00:	1f 01       	movw	r2, r30
    1d02:	81 11       	cpse	r24, r1
    1d04:	c0 cf       	rjmp	.-128    	; 0x1c86 <vfprintf+0x68>
    1d06:	98 2f       	mov	r25, r24
    1d08:	95 54       	subi	r25, 0x45	; 69
    1d0a:	93 30       	cpi	r25, 0x03	; 3
    1d0c:	18 f4       	brcc	.+6      	; 0x1d14 <vfprintf+0xf6>
    1d0e:	20 61       	ori	r18, 0x10	; 16
    1d10:	80 5e       	subi	r24, 0xE0	; 224
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfprintf+0x102>
    1d14:	98 2f       	mov	r25, r24
    1d16:	95 56       	subi	r25, 0x65	; 101
    1d18:	93 30       	cpi	r25, 0x03	; 3
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <vfprintf+0x100>
    1d1c:	a4 c1       	rjmp	.+840    	; 0x2066 <vfprintf+0x448>
    1d1e:	2f 7e       	andi	r18, 0xEF	; 239
    1d20:	26 fd       	sbrc	r18, 6
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <vfprintf+0x10a>
    1d24:	16 e0       	ldi	r17, 0x06	; 6
    1d26:	71 2e       	mov	r7, r17
    1d28:	bf e3       	ldi	r27, 0x3F	; 63
    1d2a:	5b 2e       	mov	r5, r27
    1d2c:	52 22       	and	r5, r18
    1d2e:	85 36       	cpi	r24, 0x65	; 101
    1d30:	19 f4       	brne	.+6      	; 0x1d38 <vfprintf+0x11a>
    1d32:	f0 e4       	ldi	r31, 0x40	; 64
    1d34:	5f 2a       	or	r5, r31
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <vfprintf+0x128>
    1d38:	86 36       	cpi	r24, 0x66	; 102
    1d3a:	19 f4       	brne	.+6      	; 0x1d42 <vfprintf+0x124>
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	54 2a       	or	r5, r20
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x128>
    1d42:	71 10       	cpse	r7, r1
    1d44:	7a 94       	dec	r7
    1d46:	57 fe       	sbrs	r5, 7
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <vfprintf+0x13a>
    1d4a:	5b e3       	ldi	r21, 0x3B	; 59
    1d4c:	57 15       	cp	r21, r7
    1d4e:	48 f0       	brcs	.+18     	; 0x1d62 <vfprintf+0x144>
    1d50:	47 2c       	mov	r4, r7
    1d52:	43 94       	inc	r4
    1d54:	27 e0       	ldi	r18, 0x07	; 7
    1d56:	0d c0       	rjmp	.+26     	; 0x1d72 <vfprintf+0x154>
    1d58:	87 e0       	ldi	r24, 0x07	; 7
    1d5a:	87 15       	cp	r24, r7
    1d5c:	30 f0       	brcs	.+12     	; 0x1d6a <vfprintf+0x14c>
    1d5e:	27 2d       	mov	r18, r7
    1d60:	07 c0       	rjmp	.+14     	; 0x1d70 <vfprintf+0x152>
    1d62:	27 e0       	ldi	r18, 0x07	; 7
    1d64:	ac e3       	ldi	r26, 0x3C	; 60
    1d66:	4a 2e       	mov	r4, r26
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <vfprintf+0x154>
    1d6a:	27 e0       	ldi	r18, 0x07	; 7
    1d6c:	f7 e0       	ldi	r31, 0x07	; 7
    1d6e:	7f 2e       	mov	r7, r31
    1d70:	41 2c       	mov	r4, r1
    1d72:	56 01       	movw	r10, r12
    1d74:	94 e0       	ldi	r25, 0x04	; 4
    1d76:	a9 0e       	add	r10, r25
    1d78:	b1 1c       	adc	r11, r1
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	04 2d       	mov	r16, r4
    1d86:	a4 01       	movw	r20, r8
    1d88:	0e 94 c8 11 	call	0x2390	; 0x2390 <__ftoa_engine>
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	49 81       	ldd	r20, Y+1	; 0x01
    1d90:	4c 87       	std	Y+12, r20	; 0x0c
    1d92:	40 ff       	sbrs	r20, 0
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <vfprintf+0x17c>
    1d96:	43 ff       	sbrs	r20, 3
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <vfprintf+0x18a>
    1d9a:	51 fc       	sbrc	r5, 1
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <vfprintf+0x190>
    1d9e:	52 fe       	sbrs	r5, 2
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <vfprintf+0x196>
    1da2:	e0 e2       	ldi	r30, 0x20	; 32
    1da4:	de 2e       	mov	r13, r30
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <vfprintf+0x198>
    1da8:	7d e2       	ldi	r23, 0x2D	; 45
    1daa:	d7 2e       	mov	r13, r23
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <vfprintf+0x198>
    1dae:	6b e2       	ldi	r22, 0x2B	; 43
    1db0:	d6 2e       	mov	r13, r22
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <vfprintf+0x198>
    1db4:	d1 2c       	mov	r13, r1
    1db6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1db8:	8c 70       	andi	r24, 0x0C	; 12
    1dba:	a1 f1       	breq	.+104    	; 0x1e24 <vfprintf+0x206>
    1dbc:	dd 20       	and	r13, r13
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <vfprintf+0x1a6>
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x1a8>
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	86 15       	cp	r24, r6
    1dc8:	10 f0       	brcs	.+4      	; 0x1dce <vfprintf+0x1b0>
    1dca:	61 2c       	mov	r6, r1
    1dcc:	0b c0       	rjmp	.+22     	; 0x1de4 <vfprintf+0x1c6>
    1dce:	68 1a       	sub	r6, r24
    1dd0:	53 fc       	sbrc	r5, 3
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0x1c6>
    1dd4:	b7 01       	movw	r22, r14
    1dd6:	80 e2       	ldi	r24, 0x20	; 32
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1dde:	6a 94       	dec	r6
    1de0:	c9 f7       	brne	.-14     	; 0x1dd4 <vfprintf+0x1b6>
    1de2:	f3 cf       	rjmp	.-26     	; 0x1dca <vfprintf+0x1ac>
    1de4:	dd 20       	and	r13, r13
    1de6:	29 f0       	breq	.+10     	; 0x1df2 <vfprintf+0x1d4>
    1de8:	b7 01       	movw	r22, r14
    1dea:	8d 2d       	mov	r24, r13
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1df2:	5c 85       	ldd	r21, Y+12	; 0x0c
    1df4:	53 fd       	sbrc	r21, 3
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <vfprintf+0x1e0>
    1df8:	0c e6       	ldi	r16, 0x6C	; 108
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	0c c0       	rjmp	.+24     	; 0x1e16 <vfprintf+0x1f8>
    1dfe:	08 e6       	ldi	r16, 0x68	; 104
    1e00:	10 e0       	ldi	r17, 0x00	; 0
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <vfprintf+0x1f8>
    1e04:	51 10       	cpse	r5, r1
    1e06:	80 52       	subi	r24, 0x20	; 32
    1e08:	b7 01       	movw	r22, r14
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1e10:	0f 5f       	subi	r16, 0xFF	; 255
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <vfprintf+0x1fc>
    1e16:	80 e1       	ldi	r24, 0x10	; 16
    1e18:	58 22       	and	r5, r24
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	84 91       	lpm	r24, Z
    1e1e:	81 11       	cpse	r24, r1
    1e20:	f1 cf       	rjmp	.-30     	; 0x1e04 <vfprintf+0x1e6>
    1e22:	71 c2       	rjmp	.+1250   	; 0x2306 <vfprintf+0x6e8>
    1e24:	57 fe       	sbrs	r5, 7
    1e26:	0e c0       	rjmp	.+28     	; 0x1e44 <vfprintf+0x226>
    1e28:	40 0e       	add	r4, r16
    1e2a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e2c:	44 ff       	sbrs	r20, 4
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <vfprintf+0x21a>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	81 33       	cpi	r24, 0x31	; 49
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <vfprintf+0x21a>
    1e36:	4a 94       	dec	r4
    1e38:	14 14       	cp	r1, r4
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <vfprintf+0x270>
    1e3c:	58 e0       	ldi	r21, 0x08	; 8
    1e3e:	54 15       	cp	r21, r4
    1e40:	48 f1       	brcs	.+82     	; 0x1e94 <vfprintf+0x276>
    1e42:	2c c0       	rjmp	.+88     	; 0x1e9c <vfprintf+0x27e>
    1e44:	56 fc       	sbrc	r5, 6
    1e46:	2a c0       	rjmp	.+84     	; 0x1e9c <vfprintf+0x27e>
    1e48:	87 2d       	mov	r24, r7
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 17       	cp	r24, r16
    1e4e:	91 07       	cpc	r25, r17
    1e50:	44 f0       	brlt	.+16     	; 0x1e62 <vfprintf+0x244>
    1e52:	0c 3f       	cpi	r16, 0xFC	; 252
    1e54:	8f ef       	ldi	r24, 0xFF	; 255
    1e56:	18 07       	cpc	r17, r24
    1e58:	24 f0       	brlt	.+8      	; 0x1e62 <vfprintf+0x244>
    1e5a:	90 e8       	ldi	r25, 0x80	; 128
    1e5c:	59 2a       	or	r5, r25
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <vfprintf+0x244>
    1e60:	7a 94       	dec	r7
    1e62:	77 20       	and	r7, r7
    1e64:	49 f0       	breq	.+18     	; 0x1e78 <vfprintf+0x25a>
    1e66:	e2 e0       	ldi	r30, 0x02	; 2
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	ec 0f       	add	r30, r28
    1e6c:	fd 1f       	adc	r31, r29
    1e6e:	e7 0d       	add	r30, r7
    1e70:	f1 1d       	adc	r31, r1
    1e72:	80 81       	ld	r24, Z
    1e74:	80 33       	cpi	r24, 0x30	; 48
    1e76:	a1 f3       	breq	.-24     	; 0x1e60 <vfprintf+0x242>
    1e78:	57 fe       	sbrs	r5, 7
    1e7a:	10 c0       	rjmp	.+32     	; 0x1e9c <vfprintf+0x27e>
    1e7c:	47 2c       	mov	r4, r7
    1e7e:	43 94       	inc	r4
    1e80:	87 2d       	mov	r24, r7
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	08 17       	cp	r16, r24
    1e86:	19 07       	cpc	r17, r25
    1e88:	44 f4       	brge	.+16     	; 0x1e9a <vfprintf+0x27c>
    1e8a:	70 1a       	sub	r7, r16
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x27e>
    1e8e:	44 24       	eor	r4, r4
    1e90:	43 94       	inc	r4
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <vfprintf+0x27e>
    1e94:	58 e0       	ldi	r21, 0x08	; 8
    1e96:	45 2e       	mov	r4, r21
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <vfprintf+0x27e>
    1e9a:	71 2c       	mov	r7, r1
    1e9c:	57 fe       	sbrs	r5, 7
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <vfprintf+0x290>
    1ea0:	10 16       	cp	r1, r16
    1ea2:	11 06       	cpc	r1, r17
    1ea4:	3c f4       	brge	.+14     	; 0x1eb4 <vfprintf+0x296>
    1ea6:	98 01       	movw	r18, r16
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <vfprintf+0x29a>
    1eae:	25 e0       	ldi	r18, 0x05	; 5
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <vfprintf+0x29a>
    1eb4:	21 e0       	ldi	r18, 0x01	; 1
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	dd 20       	and	r13, r13
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <vfprintf+0x2a2>
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	77 20       	and	r7, r7
    1ec2:	31 f0       	breq	.+12     	; 0x1ed0 <vfprintf+0x2b2>
    1ec4:	47 2d       	mov	r20, r7
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	4f 5f       	subi	r20, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	24 0f       	add	r18, r20
    1ece:	35 1f       	adc	r19, r21
    1ed0:	46 2d       	mov	r20, r6
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	24 17       	cp	r18, r20
    1ed6:	35 07       	cpc	r19, r21
    1ed8:	14 f4       	brge	.+4      	; 0x1ede <vfprintf+0x2c0>
    1eda:	62 1a       	sub	r6, r18
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <vfprintf+0x2c2>
    1ede:	61 2c       	mov	r6, r1
    1ee0:	85 2d       	mov	r24, r5
    1ee2:	89 70       	andi	r24, 0x09	; 9
    1ee4:	49 f4       	brne	.+18     	; 0x1ef8 <vfprintf+0x2da>
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <vfprintf+0x2d6>
    1ee8:	b7 01       	movw	r22, r14
    1eea:	80 e2       	ldi	r24, 0x20	; 32
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1ef2:	6a 94       	dec	r6
    1ef4:	61 10       	cpse	r6, r1
    1ef6:	f8 cf       	rjmp	.-16     	; 0x1ee8 <vfprintf+0x2ca>
    1ef8:	dd 20       	and	r13, r13
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <vfprintf+0x2e8>
    1efc:	b7 01       	movw	r22, r14
    1efe:	8d 2d       	mov	r24, r13
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1f06:	53 fc       	sbrc	r5, 3
    1f08:	09 c0       	rjmp	.+18     	; 0x1f1c <vfprintf+0x2fe>
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <vfprintf+0x2fa>
    1f0c:	b7 01       	movw	r22, r14
    1f0e:	80 e3       	ldi	r24, 0x30	; 48
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1f16:	6a 94       	dec	r6
    1f18:	61 10       	cpse	r6, r1
    1f1a:	f8 cf       	rjmp	.-16     	; 0x1f0c <vfprintf+0x2ee>
    1f1c:	57 fe       	sbrs	r5, 7
    1f1e:	56 c0       	rjmp	.+172    	; 0x1fcc <vfprintf+0x3ae>
    1f20:	68 01       	movw	r12, r16
    1f22:	17 ff       	sbrs	r17, 7
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <vfprintf+0x30c>
    1f26:	c1 2c       	mov	r12, r1
    1f28:	d1 2c       	mov	r13, r1
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	a8 01       	movw	r20, r16
    1f30:	44 19       	sub	r20, r4
    1f32:	51 09       	sbc	r21, r1
    1f34:	5e 87       	std	Y+14, r21	; 0x0e
    1f36:	4d 87       	std	Y+13, r20	; 0x0d
    1f38:	28 01       	movw	r4, r16
    1f3a:	4c 18       	sub	r4, r12
    1f3c:	5d 08       	sbc	r5, r13
    1f3e:	48 0c       	add	r4, r8
    1f40:	59 1c       	adc	r5, r9
    1f42:	87 2d       	mov	r24, r7
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	44 27       	eor	r20, r20
    1f48:	55 27       	eor	r21, r21
    1f4a:	48 1b       	sub	r20, r24
    1f4c:	59 0b       	sbc	r21, r25
    1f4e:	58 8b       	std	Y+16, r21	; 0x10
    1f50:	4f 87       	std	Y+15, r20	; 0x0f
    1f52:	5f ef       	ldi	r21, 0xFF	; 255
    1f54:	c5 16       	cp	r12, r21
    1f56:	d5 06       	cpc	r13, r21
    1f58:	49 f4       	brne	.+18     	; 0x1f6c <vfprintf+0x34e>
    1f5a:	b7 01       	movw	r22, r14
    1f5c:	8e e2       	ldi	r24, 0x2E	; 46
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	2a 8b       	std	Y+18, r18	; 0x12
    1f62:	39 8b       	std	Y+17, r19	; 0x11
    1f64:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1f68:	39 89       	ldd	r19, Y+17	; 0x11
    1f6a:	2a 89       	ldd	r18, Y+18	; 0x12
    1f6c:	0c 15       	cp	r16, r12
    1f6e:	1d 05       	cpc	r17, r13
    1f70:	54 f0       	brlt	.+20     	; 0x1f86 <vfprintf+0x368>
    1f72:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f74:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f76:	4c 15       	cp	r20, r12
    1f78:	5d 05       	cpc	r21, r13
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <vfprintf+0x368>
    1f7c:	f2 01       	movw	r30, r4
    1f7e:	e2 0f       	add	r30, r18
    1f80:	f3 1f       	adc	r31, r19
    1f82:	81 81       	ldd	r24, Z+1	; 0x01
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <vfprintf+0x36a>
    1f86:	80 e3       	ldi	r24, 0x30	; 48
    1f88:	51 e0       	ldi	r21, 0x01	; 1
    1f8a:	c5 1a       	sub	r12, r21
    1f8c:	d1 08       	sbc	r13, r1
    1f8e:	2f 5f       	subi	r18, 0xFF	; 255
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f94:	58 89       	ldd	r21, Y+16	; 0x10
    1f96:	c4 16       	cp	r12, r20
    1f98:	d5 06       	cpc	r13, r21
    1f9a:	4c f0       	brlt	.+18     	; 0x1fae <vfprintf+0x390>
    1f9c:	b7 01       	movw	r22, r14
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	2a 8b       	std	Y+18, r18	; 0x12
    1fa2:	39 8b       	std	Y+17, r19	; 0x11
    1fa4:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1fa8:	2a 89       	ldd	r18, Y+18	; 0x12
    1faa:	39 89       	ldd	r19, Y+17	; 0x11
    1fac:	d2 cf       	rjmp	.-92     	; 0x1f52 <vfprintf+0x334>
    1fae:	c0 16       	cp	r12, r16
    1fb0:	d1 06       	cpc	r13, r17
    1fb2:	49 f4       	brne	.+18     	; 0x1fc6 <vfprintf+0x3a8>
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	96 33       	cpi	r25, 0x36	; 54
    1fb8:	28 f4       	brcc	.+10     	; 0x1fc4 <vfprintf+0x3a6>
    1fba:	95 33       	cpi	r25, 0x35	; 53
    1fbc:	21 f4       	brne	.+8      	; 0x1fc6 <vfprintf+0x3a8>
    1fbe:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fc0:	54 fd       	sbrc	r21, 4
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <vfprintf+0x3a8>
    1fc4:	81 e3       	ldi	r24, 0x31	; 49
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	4a c0       	rjmp	.+148    	; 0x2060 <vfprintf+0x442>
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	81 33       	cpi	r24, 0x31	; 49
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <vfprintf+0x3ba>
    1fd2:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fd4:	4f 7e       	andi	r20, 0xEF	; 239
    1fd6:	4c 87       	std	Y+12, r20	; 0x0c
    1fd8:	b7 01       	movw	r22, r14
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1fe0:	71 10       	cpse	r7, r1
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <vfprintf+0x3d0>
    1fe4:	54 fe       	sbrs	r5, 4
    1fe6:	16 c0       	rjmp	.+44     	; 0x2014 <vfprintf+0x3f6>
    1fe8:	85 e4       	ldi	r24, 0x45	; 69
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	15 c0       	rjmp	.+42     	; 0x2018 <vfprintf+0x3fa>
    1fee:	b7 01       	movw	r22, r14
    1ff0:	8e e2       	ldi	r24, 0x2E	; 46
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    1ff8:	42 e0       	ldi	r20, 0x02	; 2
    1ffa:	d4 2e       	mov	r13, r20
    1ffc:	f4 01       	movw	r30, r8
    1ffe:	ed 0d       	add	r30, r13
    2000:	f1 1d       	adc	r31, r1
    2002:	d3 94       	inc	r13
    2004:	b7 01       	movw	r22, r14
    2006:	80 81       	ld	r24, Z
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    200e:	7a 94       	dec	r7
    2010:	a9 f7       	brne	.-22     	; 0x1ffc <vfprintf+0x3de>
    2012:	e8 cf       	rjmp	.-48     	; 0x1fe4 <vfprintf+0x3c6>
    2014:	85 e6       	ldi	r24, 0x65	; 101
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	b7 01       	movw	r22, r14
    201a:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    201e:	17 fd       	sbrc	r17, 7
    2020:	06 c0       	rjmp	.+12     	; 0x202e <vfprintf+0x410>
    2022:	01 15       	cp	r16, r1
    2024:	11 05       	cpc	r17, r1
    2026:	41 f4       	brne	.+16     	; 0x2038 <vfprintf+0x41a>
    2028:	5c 85       	ldd	r21, Y+12	; 0x0c
    202a:	54 ff       	sbrs	r21, 4
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <vfprintf+0x41a>
    202e:	11 95       	neg	r17
    2030:	01 95       	neg	r16
    2032:	11 09       	sbc	r17, r1
    2034:	8d e2       	ldi	r24, 0x2D	; 45
    2036:	01 c0       	rjmp	.+2      	; 0x203a <vfprintf+0x41c>
    2038:	8b e2       	ldi	r24, 0x2B	; 43
    203a:	b7 01       	movw	r22, r14
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    2042:	80 e3       	ldi	r24, 0x30	; 48
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x42e>
    2046:	8f 5f       	subi	r24, 0xFF	; 255
    2048:	0a 50       	subi	r16, 0x0A	; 10
    204a:	11 09       	sbc	r17, r1
    204c:	0a 30       	cpi	r16, 0x0A	; 10
    204e:	11 05       	cpc	r17, r1
    2050:	d4 f7       	brge	.-12     	; 0x2046 <vfprintf+0x428>
    2052:	b7 01       	movw	r22, r14
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    205a:	b7 01       	movw	r22, r14
    205c:	c8 01       	movw	r24, r16
    205e:	c0 96       	adiw	r24, 0x30	; 48
    2060:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    2064:	50 c1       	rjmp	.+672    	; 0x2306 <vfprintf+0x6e8>
    2066:	83 36       	cpi	r24, 0x63	; 99
    2068:	31 f0       	breq	.+12     	; 0x2076 <vfprintf+0x458>
    206a:	83 37       	cpi	r24, 0x73	; 115
    206c:	81 f0       	breq	.+32     	; 0x208e <vfprintf+0x470>
    206e:	83 35       	cpi	r24, 0x53	; 83
    2070:	09 f0       	breq	.+2      	; 0x2074 <vfprintf+0x456>
    2072:	5e c0       	rjmp	.+188    	; 0x2130 <vfprintf+0x512>
    2074:	24 c0       	rjmp	.+72     	; 0x20be <vfprintf+0x4a0>
    2076:	56 01       	movw	r10, r12
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	a8 0e       	add	r10, r24
    207c:	b1 1c       	adc	r11, r1
    207e:	f6 01       	movw	r30, r12
    2080:	80 81       	ld	r24, Z
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	cc 24       	eor	r12, r12
    2086:	c3 94       	inc	r12
    2088:	d1 2c       	mov	r13, r1
    208a:	84 01       	movw	r16, r8
    208c:	14 c0       	rjmp	.+40     	; 0x20b6 <vfprintf+0x498>
    208e:	56 01       	movw	r10, r12
    2090:	f2 e0       	ldi	r31, 0x02	; 2
    2092:	af 0e       	add	r10, r31
    2094:	b1 1c       	adc	r11, r1
    2096:	f6 01       	movw	r30, r12
    2098:	00 81       	ld	r16, Z
    209a:	11 81       	ldd	r17, Z+1	; 0x01
    209c:	26 ff       	sbrs	r18, 6
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <vfprintf+0x488>
    20a0:	67 2d       	mov	r22, r7
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x48c>
    20a6:	6f ef       	ldi	r22, 0xFF	; 255
    20a8:	7f ef       	ldi	r23, 0xFF	; 255
    20aa:	c8 01       	movw	r24, r16
    20ac:	2a 8b       	std	Y+18, r18	; 0x12
    20ae:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <strnlen>
    20b2:	6c 01       	movw	r12, r24
    20b4:	2a 89       	ldd	r18, Y+18	; 0x12
    20b6:	9f e7       	ldi	r25, 0x7F	; 127
    20b8:	59 2e       	mov	r5, r25
    20ba:	52 22       	and	r5, r18
    20bc:	17 c0       	rjmp	.+46     	; 0x20ec <vfprintf+0x4ce>
    20be:	56 01       	movw	r10, r12
    20c0:	f2 e0       	ldi	r31, 0x02	; 2
    20c2:	af 0e       	add	r10, r31
    20c4:	b1 1c       	adc	r11, r1
    20c6:	f6 01       	movw	r30, r12
    20c8:	00 81       	ld	r16, Z
    20ca:	11 81       	ldd	r17, Z+1	; 0x01
    20cc:	26 ff       	sbrs	r18, 6
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x4b8>
    20d0:	67 2d       	mov	r22, r7
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <vfprintf+0x4bc>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	c8 01       	movw	r24, r16
    20dc:	2a 8b       	std	Y+18, r18	; 0x12
    20de:	0e 94 a0 12 	call	0x2540	; 0x2540 <strnlen_P>
    20e2:	6c 01       	movw	r12, r24
    20e4:	2a 89       	ldd	r18, Y+18	; 0x12
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	58 2e       	mov	r5, r24
    20ea:	52 2a       	or	r5, r18
    20ec:	53 fc       	sbrc	r5, 3
    20ee:	1c c0       	rjmp	.+56     	; 0x2128 <vfprintf+0x50a>
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x4e0>
    20f2:	b7 01       	movw	r22, r14
    20f4:	80 e2       	ldi	r24, 0x20	; 32
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    20fc:	6a 94       	dec	r6
    20fe:	86 2d       	mov	r24, r6
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	c8 16       	cp	r12, r24
    2104:	d9 06       	cpc	r13, r25
    2106:	a8 f3       	brcs	.-22     	; 0x20f2 <vfprintf+0x4d4>
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <vfprintf+0x50a>
    210a:	f8 01       	movw	r30, r16
    210c:	57 fc       	sbrc	r5, 7
    210e:	85 91       	lpm	r24, Z+
    2110:	57 fe       	sbrs	r5, 7
    2112:	81 91       	ld	r24, Z+
    2114:	8f 01       	movw	r16, r30
    2116:	b7 01       	movw	r22, r14
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    211e:	61 10       	cpse	r6, r1
    2120:	6a 94       	dec	r6
    2122:	f1 e0       	ldi	r31, 0x01	; 1
    2124:	cf 1a       	sub	r12, r31
    2126:	d1 08       	sbc	r13, r1
    2128:	c1 14       	cp	r12, r1
    212a:	d1 04       	cpc	r13, r1
    212c:	71 f7       	brne	.-36     	; 0x210a <vfprintf+0x4ec>
    212e:	eb c0       	rjmp	.+470    	; 0x2306 <vfprintf+0x6e8>
    2130:	84 36       	cpi	r24, 0x64	; 100
    2132:	11 f0       	breq	.+4      	; 0x2138 <vfprintf+0x51a>
    2134:	89 36       	cpi	r24, 0x69	; 105
    2136:	51 f5       	brne	.+84     	; 0x218c <vfprintf+0x56e>
    2138:	56 01       	movw	r10, r12
    213a:	27 ff       	sbrs	r18, 7
    213c:	09 c0       	rjmp	.+18     	; 0x2150 <vfprintf+0x532>
    213e:	44 e0       	ldi	r20, 0x04	; 4
    2140:	a4 0e       	add	r10, r20
    2142:	b1 1c       	adc	r11, r1
    2144:	f6 01       	movw	r30, r12
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <vfprintf+0x546>
    2150:	f2 e0       	ldi	r31, 0x02	; 2
    2152:	af 0e       	add	r10, r31
    2154:	b1 1c       	adc	r11, r1
    2156:	f6 01       	movw	r30, r12
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	88 27       	eor	r24, r24
    215e:	77 fd       	sbrc	r23, 7
    2160:	80 95       	com	r24
    2162:	98 2f       	mov	r25, r24
    2164:	12 2f       	mov	r17, r18
    2166:	1f 76       	andi	r17, 0x6F	; 111
    2168:	97 ff       	sbrs	r25, 7
    216a:	08 c0       	rjmp	.+16     	; 0x217c <vfprintf+0x55e>
    216c:	90 95       	com	r25
    216e:	80 95       	com	r24
    2170:	70 95       	com	r23
    2172:	61 95       	neg	r22
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	10 68       	ori	r17, 0x80	; 128
    217c:	2a e0       	ldi	r18, 0x0A	; 10
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	a4 01       	movw	r20, r8
    2182:	0e 94 2c 13 	call	0x2658	; 0x2658 <__ultoa_invert>
    2186:	d8 2e       	mov	r13, r24
    2188:	d8 18       	sub	r13, r8
    218a:	40 c0       	rjmp	.+128    	; 0x220c <vfprintf+0x5ee>
    218c:	12 2f       	mov	r17, r18
    218e:	85 37       	cpi	r24, 0x75	; 117
    2190:	21 f4       	brne	.+8      	; 0x219a <vfprintf+0x57c>
    2192:	1f 7e       	andi	r17, 0xEF	; 239
    2194:	2a e0       	ldi	r18, 0x0A	; 10
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	1f c0       	rjmp	.+62     	; 0x21d8 <vfprintf+0x5ba>
    219a:	19 7f       	andi	r17, 0xF9	; 249
    219c:	8f 36       	cpi	r24, 0x6F	; 111
    219e:	a1 f0       	breq	.+40     	; 0x21c8 <vfprintf+0x5aa>
    21a0:	20 f4       	brcc	.+8      	; 0x21aa <vfprintf+0x58c>
    21a2:	88 35       	cpi	r24, 0x58	; 88
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <vfprintf+0x58a>
    21a6:	b2 c0       	rjmp	.+356    	; 0x230c <vfprintf+0x6ee>
    21a8:	0b c0       	rjmp	.+22     	; 0x21c0 <vfprintf+0x5a2>
    21aa:	80 37       	cpi	r24, 0x70	; 112
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <vfprintf+0x598>
    21ae:	88 37       	cpi	r24, 0x78	; 120
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <vfprintf+0x596>
    21b2:	ac c0       	rjmp	.+344    	; 0x230c <vfprintf+0x6ee>
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <vfprintf+0x59a>
    21b6:	10 61       	ori	r17, 0x10	; 16
    21b8:	14 ff       	sbrs	r17, 4
    21ba:	09 c0       	rjmp	.+18     	; 0x21ce <vfprintf+0x5b0>
    21bc:	14 60       	ori	r17, 0x04	; 4
    21be:	07 c0       	rjmp	.+14     	; 0x21ce <vfprintf+0x5b0>
    21c0:	24 ff       	sbrs	r18, 4
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <vfprintf+0x5b6>
    21c4:	16 60       	ori	r17, 0x06	; 6
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <vfprintf+0x5b6>
    21c8:	28 e0       	ldi	r18, 0x08	; 8
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	05 c0       	rjmp	.+10     	; 0x21d8 <vfprintf+0x5ba>
    21ce:	20 e1       	ldi	r18, 0x10	; 16
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0x5ba>
    21d4:	20 e1       	ldi	r18, 0x10	; 16
    21d6:	32 e0       	ldi	r19, 0x02	; 2
    21d8:	56 01       	movw	r10, r12
    21da:	17 ff       	sbrs	r17, 7
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <vfprintf+0x5d2>
    21de:	f4 e0       	ldi	r31, 0x04	; 4
    21e0:	af 0e       	add	r10, r31
    21e2:	b1 1c       	adc	r11, r1
    21e4:	f6 01       	movw	r30, r12
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <vfprintf+0x5e2>
    21f0:	f2 e0       	ldi	r31, 0x02	; 2
    21f2:	af 0e       	add	r10, r31
    21f4:	b1 1c       	adc	r11, r1
    21f6:	f6 01       	movw	r30, r12
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a4 01       	movw	r20, r8
    2202:	0e 94 2c 13 	call	0x2658	; 0x2658 <__ultoa_invert>
    2206:	d8 2e       	mov	r13, r24
    2208:	d8 18       	sub	r13, r8
    220a:	1f 77       	andi	r17, 0x7F	; 127
    220c:	16 ff       	sbrs	r17, 6
    220e:	0b c0       	rjmp	.+22     	; 0x2226 <vfprintf+0x608>
    2210:	21 2f       	mov	r18, r17
    2212:	2e 7f       	andi	r18, 0xFE	; 254
    2214:	d7 14       	cp	r13, r7
    2216:	50 f4       	brcc	.+20     	; 0x222c <vfprintf+0x60e>
    2218:	14 ff       	sbrs	r17, 4
    221a:	0a c0       	rjmp	.+20     	; 0x2230 <vfprintf+0x612>
    221c:	12 fd       	sbrc	r17, 2
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <vfprintf+0x612>
    2220:	21 2f       	mov	r18, r17
    2222:	2e 7e       	andi	r18, 0xEE	; 238
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <vfprintf+0x612>
    2226:	0d 2d       	mov	r16, r13
    2228:	21 2f       	mov	r18, r17
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <vfprintf+0x614>
    222c:	0d 2d       	mov	r16, r13
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <vfprintf+0x614>
    2230:	07 2d       	mov	r16, r7
    2232:	24 ff       	sbrs	r18, 4
    2234:	0c c0       	rjmp	.+24     	; 0x224e <vfprintf+0x630>
    2236:	fe 01       	movw	r30, r28
    2238:	ed 0d       	add	r30, r13
    223a:	f1 1d       	adc	r31, r1
    223c:	80 81       	ld	r24, Z
    223e:	80 33       	cpi	r24, 0x30	; 48
    2240:	11 f4       	brne	.+4      	; 0x2246 <vfprintf+0x628>
    2242:	29 7e       	andi	r18, 0xE9	; 233
    2244:	08 c0       	rjmp	.+16     	; 0x2256 <vfprintf+0x638>
    2246:	22 ff       	sbrs	r18, 2
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <vfprintf+0x636>
    224a:	0e 5f       	subi	r16, 0xFE	; 254
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <vfprintf+0x638>
    224e:	82 2f       	mov	r24, r18
    2250:	86 78       	andi	r24, 0x86	; 134
    2252:	09 f0       	breq	.+2      	; 0x2256 <vfprintf+0x638>
    2254:	0f 5f       	subi	r16, 0xFF	; 255
    2256:	23 fd       	sbrc	r18, 3
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <vfprintf+0x664>
    225a:	20 ff       	sbrs	r18, 0
    225c:	0f c0       	rjmp	.+30     	; 0x227c <vfprintf+0x65e>
    225e:	7d 2c       	mov	r7, r13
    2260:	06 15       	cp	r16, r6
    2262:	60 f4       	brcc	.+24     	; 0x227c <vfprintf+0x65e>
    2264:	76 0c       	add	r7, r6
    2266:	70 1a       	sub	r7, r16
    2268:	06 2d       	mov	r16, r6
    226a:	08 c0       	rjmp	.+16     	; 0x227c <vfprintf+0x65e>
    226c:	b7 01       	movw	r22, r14
    226e:	80 e2       	ldi	r24, 0x20	; 32
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	2a 8b       	std	Y+18, r18	; 0x12
    2274:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    2278:	0f 5f       	subi	r16, 0xFF	; 255
    227a:	2a 89       	ldd	r18, Y+18	; 0x12
    227c:	06 15       	cp	r16, r6
    227e:	b0 f3       	brcs	.-20     	; 0x226c <vfprintf+0x64e>
    2280:	04 c0       	rjmp	.+8      	; 0x228a <vfprintf+0x66c>
    2282:	06 15       	cp	r16, r6
    2284:	10 f4       	brcc	.+4      	; 0x228a <vfprintf+0x66c>
    2286:	60 1a       	sub	r6, r16
    2288:	01 c0       	rjmp	.+2      	; 0x228c <vfprintf+0x66e>
    228a:	61 2c       	mov	r6, r1
    228c:	24 ff       	sbrs	r18, 4
    228e:	12 c0       	rjmp	.+36     	; 0x22b4 <vfprintf+0x696>
    2290:	b7 01       	movw	r22, r14
    2292:	80 e3       	ldi	r24, 0x30	; 48
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	2a 8b       	std	Y+18, r18	; 0x12
    2298:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    229c:	2a 89       	ldd	r18, Y+18	; 0x12
    229e:	22 ff       	sbrs	r18, 2
    22a0:	1e c0       	rjmp	.+60     	; 0x22de <vfprintf+0x6c0>
    22a2:	21 ff       	sbrs	r18, 1
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <vfprintf+0x68e>
    22a6:	88 e5       	ldi	r24, 0x58	; 88
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <vfprintf+0x692>
    22ac:	88 e7       	ldi	r24, 0x78	; 120
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	b7 01       	movw	r22, r14
    22b2:	0c c0       	rjmp	.+24     	; 0x22cc <vfprintf+0x6ae>
    22b4:	82 2f       	mov	r24, r18
    22b6:	86 78       	andi	r24, 0x86	; 134
    22b8:	91 f0       	breq	.+36     	; 0x22de <vfprintf+0x6c0>
    22ba:	21 fd       	sbrc	r18, 1
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <vfprintf+0x6a4>
    22be:	80 e2       	ldi	r24, 0x20	; 32
    22c0:	01 c0       	rjmp	.+2      	; 0x22c4 <vfprintf+0x6a6>
    22c2:	8b e2       	ldi	r24, 0x2B	; 43
    22c4:	27 fd       	sbrc	r18, 7
    22c6:	8d e2       	ldi	r24, 0x2D	; 45
    22c8:	b7 01       	movw	r22, r14
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    22d0:	06 c0       	rjmp	.+12     	; 0x22de <vfprintf+0x6c0>
    22d2:	b7 01       	movw	r22, r14
    22d4:	80 e3       	ldi	r24, 0x30	; 48
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    22dc:	7a 94       	dec	r7
    22de:	d7 14       	cp	r13, r7
    22e0:	c0 f3       	brcs	.-16     	; 0x22d2 <vfprintf+0x6b4>
    22e2:	da 94       	dec	r13
    22e4:	f4 01       	movw	r30, r8
    22e6:	ed 0d       	add	r30, r13
    22e8:	f1 1d       	adc	r31, r1
    22ea:	b7 01       	movw	r22, r14
    22ec:	80 81       	ld	r24, Z
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    22f4:	d1 10       	cpse	r13, r1
    22f6:	f5 cf       	rjmp	.-22     	; 0x22e2 <vfprintf+0x6c4>
    22f8:	06 c0       	rjmp	.+12     	; 0x2306 <vfprintf+0x6e8>
    22fa:	b7 01       	movw	r22, r14
    22fc:	80 e2       	ldi	r24, 0x20	; 32
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 de 12 	call	0x25bc	; 0x25bc <fputc>
    2304:	6a 94       	dec	r6
    2306:	61 10       	cpse	r6, r1
    2308:	f8 cf       	rjmp	.-16     	; 0x22fa <vfprintf+0x6dc>
    230a:	99 cc       	rjmp	.-1742   	; 0x1c3e <vfprintf+0x20>
    230c:	f7 01       	movw	r30, r14
    230e:	26 81       	ldd	r18, Z+6	; 0x06
    2310:	37 81       	ldd	r19, Z+7	; 0x07
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x6fa>
    2314:	2f ef       	ldi	r18, 0xFF	; 255
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	c9 01       	movw	r24, r18
    231a:	62 96       	adiw	r28, 0x12	; 18
    231c:	e2 e1       	ldi	r30, 0x12	; 18
    231e:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__>

00002322 <__prologue_saves__>:
    2322:	2f 92       	push	r2
    2324:	3f 92       	push	r3
    2326:	4f 92       	push	r4
    2328:	5f 92       	push	r5
    232a:	6f 92       	push	r6
    232c:	7f 92       	push	r7
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	ca 1b       	sub	r28, r26
    234c:	db 0b       	sbc	r29, r27
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	09 94       	ijmp

0000235a <__epilogue_restores__>:
    235a:	2a 88       	ldd	r2, Y+18	; 0x12
    235c:	39 88       	ldd	r3, Y+17	; 0x11
    235e:	48 88       	ldd	r4, Y+16	; 0x10
    2360:	5f 84       	ldd	r5, Y+15	; 0x0f
    2362:	6e 84       	ldd	r6, Y+14	; 0x0e
    2364:	7d 84       	ldd	r7, Y+13	; 0x0d
    2366:	8c 84       	ldd	r8, Y+12	; 0x0c
    2368:	9b 84       	ldd	r9, Y+11	; 0x0b
    236a:	aa 84       	ldd	r10, Y+10	; 0x0a
    236c:	b9 84       	ldd	r11, Y+9	; 0x09
    236e:	c8 84       	ldd	r12, Y+8	; 0x08
    2370:	df 80       	ldd	r13, Y+7	; 0x07
    2372:	ee 80       	ldd	r14, Y+6	; 0x06
    2374:	fd 80       	ldd	r15, Y+5	; 0x05
    2376:	0c 81       	ldd	r16, Y+4	; 0x04
    2378:	1b 81       	ldd	r17, Y+3	; 0x03
    237a:	aa 81       	ldd	r26, Y+2	; 0x02
    237c:	b9 81       	ldd	r27, Y+1	; 0x01
    237e:	ce 0f       	add	r28, r30
    2380:	d1 1d       	adc	r29, r1
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	ed 01       	movw	r28, r26
    238e:	08 95       	ret

00002390 <__ftoa_engine>:
    2390:	28 30       	cpi	r18, 0x08	; 8
    2392:	08 f0       	brcs	.+2      	; 0x2396 <__ftoa_engine+0x6>
    2394:	27 e0       	ldi	r18, 0x07	; 7
    2396:	33 27       	eor	r19, r19
    2398:	da 01       	movw	r26, r20
    239a:	99 0f       	add	r25, r25
    239c:	31 1d       	adc	r19, r1
    239e:	87 fd       	sbrc	r24, 7
    23a0:	91 60       	ori	r25, 0x01	; 1
    23a2:	00 96       	adiw	r24, 0x00	; 0
    23a4:	61 05       	cpc	r22, r1
    23a6:	71 05       	cpc	r23, r1
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <__ftoa_engine+0x28>
    23aa:	32 60       	ori	r19, 0x02	; 2
    23ac:	2e 5f       	subi	r18, 0xFE	; 254
    23ae:	3d 93       	st	X+, r19
    23b0:	30 e3       	ldi	r19, 0x30	; 48
    23b2:	2a 95       	dec	r18
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <__ftoa_engine+0x1e>
    23b6:	08 95       	ret
    23b8:	9f 3f       	cpi	r25, 0xFF	; 255
    23ba:	30 f0       	brcs	.+12     	; 0x23c8 <__ftoa_engine+0x38>
    23bc:	80 38       	cpi	r24, 0x80	; 128
    23be:	71 05       	cpc	r23, r1
    23c0:	61 05       	cpc	r22, r1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__ftoa_engine+0x36>
    23c4:	3c 5f       	subi	r19, 0xFC	; 252
    23c6:	3c 5f       	subi	r19, 0xFC	; 252
    23c8:	3d 93       	st	X+, r19
    23ca:	91 30       	cpi	r25, 0x01	; 1
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <__ftoa_engine+0x40>
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	91 1d       	adc	r25, r1
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	1f 93       	push	r17
    23d8:	0f 93       	push	r16
    23da:	ff 92       	push	r15
    23dc:	ef 92       	push	r14
    23de:	19 2f       	mov	r17, r25
    23e0:	98 7f       	andi	r25, 0xF8	; 248
    23e2:	96 95       	lsr	r25
    23e4:	e9 2f       	mov	r30, r25
    23e6:	96 95       	lsr	r25
    23e8:	96 95       	lsr	r25
    23ea:	e9 0f       	add	r30, r25
    23ec:	ff 27       	eor	r31, r31
    23ee:	e6 53       	subi	r30, 0x36	; 54
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	99 27       	eor	r25, r25
    23f4:	33 27       	eor	r19, r19
    23f6:	ee 24       	eor	r14, r14
    23f8:	ff 24       	eor	r15, r15
    23fa:	a7 01       	movw	r20, r14
    23fc:	e7 01       	movw	r28, r14
    23fe:	05 90       	lpm	r0, Z+
    2400:	08 94       	sec
    2402:	07 94       	ror	r0
    2404:	28 f4       	brcc	.+10     	; 0x2410 <__ftoa_engine+0x80>
    2406:	36 0f       	add	r19, r22
    2408:	e7 1e       	adc	r14, r23
    240a:	f8 1e       	adc	r15, r24
    240c:	49 1f       	adc	r20, r25
    240e:	51 1d       	adc	r21, r1
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	06 94       	lsr	r0
    241a:	a1 f7       	brne	.-24     	; 0x2404 <__ftoa_engine+0x74>
    241c:	05 90       	lpm	r0, Z+
    241e:	07 94       	ror	r0
    2420:	28 f4       	brcc	.+10     	; 0x242c <__ftoa_engine+0x9c>
    2422:	e7 0e       	add	r14, r23
    2424:	f8 1e       	adc	r15, r24
    2426:	49 1f       	adc	r20, r25
    2428:	56 1f       	adc	r21, r22
    242a:	c1 1d       	adc	r28, r1
    242c:	77 0f       	add	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	66 1f       	adc	r22, r22
    2434:	06 94       	lsr	r0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <__ftoa_engine+0x90>
    2438:	05 90       	lpm	r0, Z+
    243a:	07 94       	ror	r0
    243c:	28 f4       	brcc	.+10     	; 0x2448 <__ftoa_engine+0xb8>
    243e:	f8 0e       	add	r15, r24
    2440:	49 1f       	adc	r20, r25
    2442:	56 1f       	adc	r21, r22
    2444:	c7 1f       	adc	r28, r23
    2446:	d1 1d       	adc	r29, r1
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	66 1f       	adc	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	06 94       	lsr	r0
    2452:	a1 f7       	brne	.-24     	; 0x243c <__ftoa_engine+0xac>
    2454:	05 90       	lpm	r0, Z+
    2456:	07 94       	ror	r0
    2458:	20 f4       	brcc	.+8      	; 0x2462 <__ftoa_engine+0xd2>
    245a:	49 0f       	add	r20, r25
    245c:	56 1f       	adc	r21, r22
    245e:	c7 1f       	adc	r28, r23
    2460:	d8 1f       	adc	r29, r24
    2462:	99 0f       	add	r25, r25
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	06 94       	lsr	r0
    246c:	a9 f7       	brne	.-22     	; 0x2458 <__ftoa_engine+0xc8>
    246e:	84 91       	lpm	r24, Z
    2470:	10 95       	com	r17
    2472:	17 70       	andi	r17, 0x07	; 7
    2474:	41 f0       	breq	.+16     	; 0x2486 <__ftoa_engine+0xf6>
    2476:	d6 95       	lsr	r29
    2478:	c7 95       	ror	r28
    247a:	57 95       	ror	r21
    247c:	47 95       	ror	r20
    247e:	f7 94       	ror	r15
    2480:	e7 94       	ror	r14
    2482:	1a 95       	dec	r17
    2484:	c1 f7       	brne	.-16     	; 0x2476 <__ftoa_engine+0xe6>
    2486:	e0 e7       	ldi	r30, 0x70	; 112
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	68 94       	set
    248c:	15 90       	lpm	r1, Z+
    248e:	15 91       	lpm	r17, Z+
    2490:	35 91       	lpm	r19, Z+
    2492:	65 91       	lpm	r22, Z+
    2494:	95 91       	lpm	r25, Z+
    2496:	05 90       	lpm	r0, Z+
    2498:	7f e2       	ldi	r23, 0x2F	; 47
    249a:	73 95       	inc	r23
    249c:	e1 18       	sub	r14, r1
    249e:	f1 0a       	sbc	r15, r17
    24a0:	43 0b       	sbc	r20, r19
    24a2:	56 0b       	sbc	r21, r22
    24a4:	c9 0b       	sbc	r28, r25
    24a6:	d0 09       	sbc	r29, r0
    24a8:	c0 f7       	brcc	.-16     	; 0x249a <__ftoa_engine+0x10a>
    24aa:	e1 0c       	add	r14, r1
    24ac:	f1 1e       	adc	r15, r17
    24ae:	43 1f       	adc	r20, r19
    24b0:	56 1f       	adc	r21, r22
    24b2:	c9 1f       	adc	r28, r25
    24b4:	d0 1d       	adc	r29, r0
    24b6:	7e f4       	brtc	.+30     	; 0x24d6 <__ftoa_engine+0x146>
    24b8:	70 33       	cpi	r23, 0x30	; 48
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <__ftoa_engine+0x130>
    24bc:	8a 95       	dec	r24
    24be:	e6 cf       	rjmp	.-52     	; 0x248c <__ftoa_engine+0xfc>
    24c0:	e8 94       	clt
    24c2:	01 50       	subi	r16, 0x01	; 1
    24c4:	30 f0       	brcs	.+12     	; 0x24d2 <__ftoa_engine+0x142>
    24c6:	08 0f       	add	r16, r24
    24c8:	0a f4       	brpl	.+2      	; 0x24cc <__ftoa_engine+0x13c>
    24ca:	00 27       	eor	r16, r16
    24cc:	02 17       	cp	r16, r18
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <__ftoa_engine+0x142>
    24d0:	20 2f       	mov	r18, r16
    24d2:	23 95       	inc	r18
    24d4:	02 2f       	mov	r16, r18
    24d6:	7a 33       	cpi	r23, 0x3A	; 58
    24d8:	28 f0       	brcs	.+10     	; 0x24e4 <__ftoa_engine+0x154>
    24da:	79 e3       	ldi	r23, 0x39	; 57
    24dc:	7d 93       	st	X+, r23
    24de:	2a 95       	dec	r18
    24e0:	e9 f7       	brne	.-6      	; 0x24dc <__ftoa_engine+0x14c>
    24e2:	10 c0       	rjmp	.+32     	; 0x2504 <__ftoa_engine+0x174>
    24e4:	7d 93       	st	X+, r23
    24e6:	2a 95       	dec	r18
    24e8:	89 f6       	brne	.-94     	; 0x248c <__ftoa_engine+0xfc>
    24ea:	06 94       	lsr	r0
    24ec:	97 95       	ror	r25
    24ee:	67 95       	ror	r22
    24f0:	37 95       	ror	r19
    24f2:	17 95       	ror	r17
    24f4:	17 94       	ror	r1
    24f6:	e1 18       	sub	r14, r1
    24f8:	f1 0a       	sbc	r15, r17
    24fa:	43 0b       	sbc	r20, r19
    24fc:	56 0b       	sbc	r21, r22
    24fe:	c9 0b       	sbc	r28, r25
    2500:	d0 09       	sbc	r29, r0
    2502:	98 f0       	brcs	.+38     	; 0x252a <__ftoa_engine+0x19a>
    2504:	23 95       	inc	r18
    2506:	7e 91       	ld	r23, -X
    2508:	73 95       	inc	r23
    250a:	7a 33       	cpi	r23, 0x3A	; 58
    250c:	08 f0       	brcs	.+2      	; 0x2510 <__ftoa_engine+0x180>
    250e:	70 e3       	ldi	r23, 0x30	; 48
    2510:	7c 93       	st	X, r23
    2512:	20 13       	cpse	r18, r16
    2514:	b8 f7       	brcc	.-18     	; 0x2504 <__ftoa_engine+0x174>
    2516:	7e 91       	ld	r23, -X
    2518:	70 61       	ori	r23, 0x10	; 16
    251a:	7d 93       	st	X+, r23
    251c:	30 f0       	brcs	.+12     	; 0x252a <__ftoa_engine+0x19a>
    251e:	83 95       	inc	r24
    2520:	71 e3       	ldi	r23, 0x31	; 49
    2522:	7d 93       	st	X+, r23
    2524:	70 e3       	ldi	r23, 0x30	; 48
    2526:	2a 95       	dec	r18
    2528:	e1 f7       	brne	.-8      	; 0x2522 <__ftoa_engine+0x192>
    252a:	11 24       	eor	r1, r1
    252c:	ef 90       	pop	r14
    252e:	ff 90       	pop	r15
    2530:	0f 91       	pop	r16
    2532:	1f 91       	pop	r17
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	99 27       	eor	r25, r25
    253a:	87 fd       	sbrc	r24, 7
    253c:	90 95       	com	r25
    253e:	08 95       	ret

00002540 <strnlen_P>:
    2540:	fc 01       	movw	r30, r24
    2542:	05 90       	lpm	r0, Z+
    2544:	61 50       	subi	r22, 0x01	; 1
    2546:	70 40       	sbci	r23, 0x00	; 0
    2548:	01 10       	cpse	r0, r1
    254a:	d8 f7       	brcc	.-10     	; 0x2542 <strnlen_P+0x2>
    254c:	80 95       	com	r24
    254e:	90 95       	com	r25
    2550:	8e 0f       	add	r24, r30
    2552:	9f 1f       	adc	r25, r31
    2554:	08 95       	ret

00002556 <strcat>:
    2556:	fb 01       	movw	r30, r22
    2558:	dc 01       	movw	r26, r24
    255a:	0d 90       	ld	r0, X+
    255c:	00 20       	and	r0, r0
    255e:	e9 f7       	brne	.-6      	; 0x255a <strcat+0x4>
    2560:	11 97       	sbiw	r26, 0x01	; 1
    2562:	01 90       	ld	r0, Z+
    2564:	0d 92       	st	X+, r0
    2566:	00 20       	and	r0, r0
    2568:	e1 f7       	brne	.-8      	; 0x2562 <strcat+0xc>
    256a:	08 95       	ret

0000256c <strncmp>:
    256c:	fb 01       	movw	r30, r22
    256e:	dc 01       	movw	r26, r24
    2570:	41 50       	subi	r20, 0x01	; 1
    2572:	50 40       	sbci	r21, 0x00	; 0
    2574:	30 f0       	brcs	.+12     	; 0x2582 <strncmp+0x16>
    2576:	8d 91       	ld	r24, X+
    2578:	01 90       	ld	r0, Z+
    257a:	80 19       	sub	r24, r0
    257c:	19 f4       	brne	.+6      	; 0x2584 <strncmp+0x18>
    257e:	00 20       	and	r0, r0
    2580:	b9 f7       	brne	.-18     	; 0x2570 <strncmp+0x4>
    2582:	88 1b       	sub	r24, r24
    2584:	99 0b       	sbc	r25, r25
    2586:	08 95       	ret

00002588 <strncpy>:
    2588:	fb 01       	movw	r30, r22
    258a:	dc 01       	movw	r26, r24
    258c:	41 50       	subi	r20, 0x01	; 1
    258e:	50 40       	sbci	r21, 0x00	; 0
    2590:	48 f0       	brcs	.+18     	; 0x25a4 <strncpy+0x1c>
    2592:	01 90       	ld	r0, Z+
    2594:	0d 92       	st	X+, r0
    2596:	00 20       	and	r0, r0
    2598:	c9 f7       	brne	.-14     	; 0x258c <strncpy+0x4>
    259a:	01 c0       	rjmp	.+2      	; 0x259e <strncpy+0x16>
    259c:	1d 92       	st	X+, r1
    259e:	41 50       	subi	r20, 0x01	; 1
    25a0:	50 40       	sbci	r21, 0x00	; 0
    25a2:	e0 f7       	brcc	.-8      	; 0x259c <strncpy+0x14>
    25a4:	08 95       	ret

000025a6 <strnlen>:
    25a6:	fc 01       	movw	r30, r24
    25a8:	61 50       	subi	r22, 0x01	; 1
    25aa:	70 40       	sbci	r23, 0x00	; 0
    25ac:	01 90       	ld	r0, Z+
    25ae:	01 10       	cpse	r0, r1
    25b0:	d8 f7       	brcc	.-10     	; 0x25a8 <strnlen+0x2>
    25b2:	80 95       	com	r24
    25b4:	90 95       	com	r25
    25b6:	8e 0f       	add	r24, r30
    25b8:	9f 1f       	adc	r25, r31
    25ba:	08 95       	ret

000025bc <fputc>:
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	8c 01       	movw	r16, r24
    25c6:	eb 01       	movw	r28, r22
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	81 fd       	sbrc	r24, 1
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <fputc+0x18>
    25ce:	0f ef       	ldi	r16, 0xFF	; 255
    25d0:	1f ef       	ldi	r17, 0xFF	; 255
    25d2:	1a c0       	rjmp	.+52     	; 0x2608 <fputc+0x4c>
    25d4:	82 ff       	sbrs	r24, 2
    25d6:	0d c0       	rjmp	.+26     	; 0x25f2 <fputc+0x36>
    25d8:	2e 81       	ldd	r18, Y+6	; 0x06
    25da:	3f 81       	ldd	r19, Y+7	; 0x07
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	28 17       	cp	r18, r24
    25e2:	39 07       	cpc	r19, r25
    25e4:	64 f4       	brge	.+24     	; 0x25fe <fputc+0x42>
    25e6:	e8 81       	ld	r30, Y
    25e8:	f9 81       	ldd	r31, Y+1	; 0x01
    25ea:	01 93       	st	Z+, r16
    25ec:	f9 83       	std	Y+1, r31	; 0x01
    25ee:	e8 83       	st	Y, r30
    25f0:	06 c0       	rjmp	.+12     	; 0x25fe <fputc+0x42>
    25f2:	e8 85       	ldd	r30, Y+8	; 0x08
    25f4:	f9 85       	ldd	r31, Y+9	; 0x09
    25f6:	80 2f       	mov	r24, r16
    25f8:	09 95       	icall
    25fa:	89 2b       	or	r24, r25
    25fc:	41 f7       	brne	.-48     	; 0x25ce <fputc+0x12>
    25fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2600:	9f 81       	ldd	r25, Y+7	; 0x07
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	9f 83       	std	Y+7, r25	; 0x07
    2606:	8e 83       	std	Y+6, r24	; 0x06
    2608:	c8 01       	movw	r24, r16
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	08 95       	ret

00002614 <sprintf>:
    2614:	ae e0       	ldi	r26, 0x0E	; 14
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e0 e1       	ldi	r30, 0x10	; 16
    261a:	f3 e1       	ldi	r31, 0x13	; 19
    261c:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__+0x1c>
    2620:	0d 89       	ldd	r16, Y+21	; 0x15
    2622:	1e 89       	ldd	r17, Y+22	; 0x16
    2624:	86 e0       	ldi	r24, 0x06	; 6
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	1a 83       	std	Y+2, r17	; 0x02
    262a:	09 83       	std	Y+1, r16	; 0x01
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	9f e7       	ldi	r25, 0x7F	; 127
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	ce 01       	movw	r24, r28
    2636:	49 96       	adiw	r24, 0x19	; 25
    2638:	ac 01       	movw	r20, r24
    263a:	6f 89       	ldd	r22, Y+23	; 0x17
    263c:	78 8d       	ldd	r23, Y+24	; 0x18
    263e:	ce 01       	movw	r24, r28
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <vfprintf>
    2646:	ef 81       	ldd	r30, Y+7	; 0x07
    2648:	f8 85       	ldd	r31, Y+8	; 0x08
    264a:	e0 0f       	add	r30, r16
    264c:	f1 1f       	adc	r31, r17
    264e:	10 82       	st	Z, r1
    2650:	2e 96       	adiw	r28, 0x0e	; 14
    2652:	e4 e0       	ldi	r30, 0x04	; 4
    2654:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__+0x1c>

00002658 <__ultoa_invert>:
    2658:	fa 01       	movw	r30, r20
    265a:	aa 27       	eor	r26, r26
    265c:	28 30       	cpi	r18, 0x08	; 8
    265e:	51 f1       	breq	.+84     	; 0x26b4 <__ultoa_invert+0x5c>
    2660:	20 31       	cpi	r18, 0x10	; 16
    2662:	81 f1       	breq	.+96     	; 0x26c4 <__ultoa_invert+0x6c>
    2664:	e8 94       	clt
    2666:	6f 93       	push	r22
    2668:	6e 7f       	andi	r22, 0xFE	; 254
    266a:	6e 5f       	subi	r22, 0xFE	; 254
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	8f 4f       	sbci	r24, 0xFF	; 255
    2670:	9f 4f       	sbci	r25, 0xFF	; 255
    2672:	af 4f       	sbci	r26, 0xFF	; 255
    2674:	b1 e0       	ldi	r27, 0x01	; 1
    2676:	3e d0       	rcall	.+124    	; 0x26f4 <__ultoa_invert+0x9c>
    2678:	b4 e0       	ldi	r27, 0x04	; 4
    267a:	3c d0       	rcall	.+120    	; 0x26f4 <__ultoa_invert+0x9c>
    267c:	67 0f       	add	r22, r23
    267e:	78 1f       	adc	r23, r24
    2680:	89 1f       	adc	r24, r25
    2682:	9a 1f       	adc	r25, r26
    2684:	a1 1d       	adc	r26, r1
    2686:	68 0f       	add	r22, r24
    2688:	79 1f       	adc	r23, r25
    268a:	8a 1f       	adc	r24, r26
    268c:	91 1d       	adc	r25, r1
    268e:	a1 1d       	adc	r26, r1
    2690:	6a 0f       	add	r22, r26
    2692:	71 1d       	adc	r23, r1
    2694:	81 1d       	adc	r24, r1
    2696:	91 1d       	adc	r25, r1
    2698:	a1 1d       	adc	r26, r1
    269a:	20 d0       	rcall	.+64     	; 0x26dc <__ultoa_invert+0x84>
    269c:	09 f4       	brne	.+2      	; 0x26a0 <__ultoa_invert+0x48>
    269e:	68 94       	set
    26a0:	3f 91       	pop	r19
    26a2:	2a e0       	ldi	r18, 0x0A	; 10
    26a4:	26 9f       	mul	r18, r22
    26a6:	11 24       	eor	r1, r1
    26a8:	30 19       	sub	r19, r0
    26aa:	30 5d       	subi	r19, 0xD0	; 208
    26ac:	31 93       	st	Z+, r19
    26ae:	de f6       	brtc	.-74     	; 0x2666 <__ultoa_invert+0xe>
    26b0:	cf 01       	movw	r24, r30
    26b2:	08 95       	ret
    26b4:	46 2f       	mov	r20, r22
    26b6:	47 70       	andi	r20, 0x07	; 7
    26b8:	40 5d       	subi	r20, 0xD0	; 208
    26ba:	41 93       	st	Z+, r20
    26bc:	b3 e0       	ldi	r27, 0x03	; 3
    26be:	0f d0       	rcall	.+30     	; 0x26de <__ultoa_invert+0x86>
    26c0:	c9 f7       	brne	.-14     	; 0x26b4 <__ultoa_invert+0x5c>
    26c2:	f6 cf       	rjmp	.-20     	; 0x26b0 <__ultoa_invert+0x58>
    26c4:	46 2f       	mov	r20, r22
    26c6:	4f 70       	andi	r20, 0x0F	; 15
    26c8:	40 5d       	subi	r20, 0xD0	; 208
    26ca:	4a 33       	cpi	r20, 0x3A	; 58
    26cc:	18 f0       	brcs	.+6      	; 0x26d4 <__ultoa_invert+0x7c>
    26ce:	49 5d       	subi	r20, 0xD9	; 217
    26d0:	31 fd       	sbrc	r19, 1
    26d2:	40 52       	subi	r20, 0x20	; 32
    26d4:	41 93       	st	Z+, r20
    26d6:	02 d0       	rcall	.+4      	; 0x26dc <__ultoa_invert+0x84>
    26d8:	a9 f7       	brne	.-22     	; 0x26c4 <__ultoa_invert+0x6c>
    26da:	ea cf       	rjmp	.-44     	; 0x26b0 <__ultoa_invert+0x58>
    26dc:	b4 e0       	ldi	r27, 0x04	; 4
    26de:	a6 95       	lsr	r26
    26e0:	97 95       	ror	r25
    26e2:	87 95       	ror	r24
    26e4:	77 95       	ror	r23
    26e6:	67 95       	ror	r22
    26e8:	ba 95       	dec	r27
    26ea:	c9 f7       	brne	.-14     	; 0x26de <__ultoa_invert+0x86>
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	61 05       	cpc	r22, r1
    26f0:	71 05       	cpc	r23, r1
    26f2:	08 95       	ret
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	0a 2e       	mov	r0, r26
    26fa:	06 94       	lsr	r0
    26fc:	57 95       	ror	r21
    26fe:	47 95       	ror	r20
    2700:	37 95       	ror	r19
    2702:	27 95       	ror	r18
    2704:	ba 95       	dec	r27
    2706:	c9 f7       	brne	.-14     	; 0x26fa <__ultoa_invert+0xa2>
    2708:	62 0f       	add	r22, r18
    270a:	73 1f       	adc	r23, r19
    270c:	84 1f       	adc	r24, r20
    270e:	95 1f       	adc	r25, r21
    2710:	a0 1d       	adc	r26, r0
    2712:	08 95       	ret

00002714 <_exit>:
    2714:	f8 94       	cli

00002716 <__stop_program>:
    2716:	ff cf       	rjmp	.-2      	; 0x2716 <__stop_program>
